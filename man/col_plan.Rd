% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/col_plan.R
\name{col_plan}
\alias{col_plan}
\alias{span_structure}
\title{Define the Column Plan & Span Structures}
\usage{
col_plan(...)

span_structure(label, ...)
}
\arguments{
\item{...}{For a col_plan and span_structure,
<\code{\link[=dplyr_tidy_select]{tidy-select}}> arguments, unquoted expressions
separated by commas, and span_structures. Span_structures can nest
additional span_structures. To use a span_structure, there can only be one
defined "column" in the tfrmt.}

\item{label}{text label to span across the defined columns}
}
\description{
Using <\code{\link[=dplyr_tidy_select]{tidy-select}}> expressions and a series
span_structures, define the spanned column names, and the label to apply.
span_structures can be nested to allow for layered spanning headers.
}
\details{
\subsection{Column Selection}{

When col_plan gets applied and is used to create the output table, the
underlying logic becomes the input to \code{\link[dplyr]{select}}. Therefore,
behavior falls to the \code{\link[dplyr]{select}} for sub-setting columns, renaming,
and reordering the columns.

Avoid beginning the \code{col_plan()} column selection with a deselection (ie
\code{col_plan(-col1)}, \code{col_plan(-starts_with("value")))}. This will
result in the table preserving all columns not "de-selected" in the
statement, and the order of the columns not changed. It is preferred when
creating the \code{col_plan()} to identify all the columns planned on
preserving in the order they are wished to appear, or if
<\code{\link[=dplyr_tidy_select]{tidy-select}}> arguments - such as
\code{\link[dplyr]{everything}}- are used, identify the de-selection after
the positive-selection. Experiment with the \code{\link[dplyr]{select}}
function to understand this sort of behavior better.

Alternatively, once the gt table is produced, use the \code{\link[gt]{cols_hide}}
function to remove un-wanted columns.
}
}
\section{Images}{

Here are some example outputs:

\if{html}{\out{
<img src="https://raw.githubusercontent.com/GSK-Biostatistics/tfrmt/main/images/tfrmt-span_structure.jpg" style="width:100\%;">
}}
}

\examples{

library(dplyr)

## select col_1 as the first column, remove col_last, then create spanning
## structures that have multiple levels
spanning_col_plan_ex <- col_plan(
 col_1,
 -col_last,
 span_structure(
   label = "Top Label Level 1",
   span_structure(
     label = "Second Label Level 1.1",
     col_3, col_4
   ),
   span_structure(
     label = "Second Label Level 1.2",
     starts_with("B")
   ),
   col_5
 ),
 span_structure(
   label = "Top Label Level 2",
   col_6, col_7
 )
)

## select my_col_1 as the first column, then
## rename col_2 to new_col_1 and put as the
## second column, then select the rest of the columns
renaming_col_plan_ex <- col_plan(
   my_col_1,
   new_col_1 = col_2,
   everything()
   )

}
