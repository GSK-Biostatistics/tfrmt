[{"path":"https://gsk-biostatistics.github.io/tlang/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tlang/LICENSE.html","id":"1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/LICENSE.html","id":"2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/LICENSE.html","id":"3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/LICENSE.html","id":"4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/LICENSE.html","id":"5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/LICENSE.html","id":"6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/LICENSE.html","id":"7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/LICENSE.html","id":"8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/LICENSE.html","id":"9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright 2022 GlaxoSmithKline Research & Development Limited  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://gsk-biostatistics.github.io/tlang/articles/body_plan.html","id":"formatting-functions","dir":"Articles","previous_headings":"","what":"Formatting functions","title":"Body Plan","text":"following formatting functions may passed frmt_structure:","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/articles/body_plan.html","id":"format-frmt","dir":"Articles","previous_headings":"Formatting functions","what":"Format (frmt)","title":"Body Plan","text":"frmt object used specify value appear table: number digits, white space padding, extra characters, percents parentheses. pharma, common convention use x’s represent data values mock tables. , frmt complies familiar convention. example: frmt(expression = \"xxx.x%\") displays 3.829765 ” 3.8%” (note leading whitespace!) frmt(expression = \"xxx.x%\", missing = \"Missing\") displays NA “Missing” frmt(expression = \"xxx.x\", scientific = \" x10^x\") displays 1234.5678 ” 1.2 x10^ 3”","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/articles/body_plan.html","id":"format-when-frmt_when","dir":"Articles","previous_headings":"Formatting functions","what":"Format when (frmt_when)","title":"Body Plan","text":"frmt_when way format cells conditional values. frmt_when similar dplyr::case_when /else statements. condition, left hand side expression string right hand side formatting applied. example, following code allows users conditionally format upper lower bounds p-values: cause values 0.0347, 1.00, 0.000001 appear “0.035”, “>0.99”, “<0.001”.","code":"frmt_when(     \">0.99\" ~ \">0.99\",     \"<0.001\" ~ \"0.001\",     TRUE ~ frmt(\"x.xxx\") )"},{"path":"https://gsk-biostatistics.github.io/tlang/articles/body_plan.html","id":"format-combine-frmt_combine","dir":"Articles","previous_headings":"Formatting functions","what":"Format combine (frmt_combine)","title":"Body Plan","text":"frmt_combine used combine multiple values single cell. Within frmt_combine, values referenced according values param variable. Glue package syntax leveraged help user easily define want combined values appear. , individual data values may formatted using frmt frmt_when. examples: frmt_combine(\"({lower}, {upper})\", lower = frmt(\"xx.x\"), upper = frmt(\"xx.x\")) combine lower upper bounds confidence interval : “(xx.x, xx.x)”. frmt_combine(\"{n} ({pct})\", n = frmt(\"xxx\"), pct = frmt(\"xx.x\", missing = \"\")) print “n (%)” percentage non-missing, just “n” otherwise. frmt_combine(\"{n} ({pct})\", n = frmt(\"xxx\"), pct = frmt(\"xx.x\", missing = \"\"), missing = \"\") print “n (%)” percentage non-missing, “n” percentage missing n non-missing, “” n pct missing.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/articles/body_plan.html","id":"location-options","dir":"Articles","previous_headings":"","what":"Location options","title":"Body Plan","text":"variety ways user specify formatting locations: group variable values /label values, param value. Let’s take look various methods , ranging least specific specific. important details passing value “.default” group label means format applied values within group(s) label variables.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/articles/body_plan.html","id":"table-wide","dir":"Articles","previous_headings":"Location options","what":"Table-wide","title":"Body Plan","text":"user can specify formatting entire table : frmt(group = \".default\", label = \".default\", frmt(\"xx.x\"))","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/articles/body_plan.html","id":"param-specific","dir":"Articles","previous_headings":"Location options","what":"Param-specific","title":"Body Plan","text":"formatting specific values param variable, frmt objects must named according param. following code format values param value equals “pval”, regardless group, label, column value. frmt(group = \".default\", label = \".default\", pval = frmt(\"x.xxx\")) , param names required using frmt_combine.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/articles/body_plan.html","id":"label-specific","dir":"Articles","previous_headings":"Location options","what":"Label-specific","title":"Body Plan","text":"formatting specific values label variable, values passed label argument. following code format values label variable equals “mylab1” “mylab2”, regardless group, param, column value. frmt(group = \".default\", label = c(\"mylab1\",\"mylab2\"), frmt(\"x.xxx\"))","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/articles/body_plan.html","id":"group-specific","dir":"Articles","previous_headings":"Location options","what":"Group-specific","title":"Body Plan","text":"formatting specific values group variable, values passed group argument. Note user may multiple group variables. case multiple group variables, specifications passed named list (named according group variables). following code format values group1=“” group2=“” “b”, regardless label, param, column value: frmt(group = list(group1 = \"\", group2 = \"B\"), label = \".default\", frmt(\"x.xxx\"))","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/articles/body_plan.html","id":"multiple-specifications","dir":"Articles","previous_headings":"Location options","what":"Multiple specifications","title":"Body Plan","text":"user can specific ’d like, providing combination. example, following code format values group1=“”, group2=“”, label variable equals “mylab” param variable equals “mean”: frmt(group = list(group1 = \"\", group2 = \"B\"), label = \"mylab\", mean = frmt(\"x.xxx\"))","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/articles/body_plan.html","id":"layering-format-structures","dir":"Articles","previous_headings":"","what":"Layering format structures","title":"Body Plan","text":"user may provide many frmt_structure objects needed. important note overlapping frmt_structure objects, last one specified supercede previous. CDISC demographics table example, following frmt_structures needed cover values:","code":"body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(\"{n} {pct}\",                                 n = frmt(\"XXX\"),                                 pct = frmt_when(\"==100\" ~ \"\",                                                 \"==0\" ~ \"\",                                                 TRUE ~ frmt(\"(XX.X %)\"))                    )     ),     frmt_structure(group_val = \".default\", label_val = \"n\", frmt(\"xxx\")),     frmt_structure(group_val = \".default\", label_val = c(\"Mean\", \"Median\", \"Min\",\"Max\"), frmt(\"xxx.x\")),     frmt_structure(group_val = \".default\", label_val = \"SD\", frmt(\"xxx.xx\")),     frmt_structure(group_val = \".default\", label_val = \".default\", p = frmt_when(\">0.99\" ~ \">0.99\",                                                                                  \"<0.001\" ~ \"<0.001\",                                                                                  TRUE ~ frmt(\"x.xxx\", missing = \"\"))) )"},{"path":"https://gsk-biostatistics.github.io/tlang/articles/col_align_plan.html","id":"alignment-examples","dir":"Articles","previous_headings":"","what":"Alignment examples","title":"Column Alignment Plan","text":"Element aligns two arguments: alignment desired columns final table aligned. column values specified match contents column variable specified tfrmt object. Let’s take look alignment can applied example , contains variety different parameters formatted differently. Column alignment can improve table making easier read. Let’s start left-aligning p-value column. Notice providing col_align_plan, variables covered plan left-aligned default. alignment isn’t quite right < one value . Applying decimal alignment better fit: two columns, mix values represented. case, want align first set digits. words, align first instance decimal, comma, space: Finally, purpose demonstrating options, can align column differently (left, right, character three columns respectively):","code":"head(dat) #> # A tibble: 6 × 5 #>   label     param  column value   ord #>   <chr>     <chr>  <chr>  <dbl> <dbl> #> 1 n         n      trt1   12        1 #> 2 mean (sd) mean   trt1   12.3      2 #> 3 mean (sd) sd     trt1    4.35     2 #> 4 median    median trt1   14        3 #> 5 [q1, q3]  q1     trt1   10        4 #> 6 [q1, q3]  q3     trt1   20        4  tfrmt(   label = label,   column = column,   param = param,   values = value,   sorting_cols = c(ord),   col_plan = col_plan(-ord),    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt(\"xx\", missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"{mean} ({sd})\",                                  mean = frmt(\"xx.x\"),                                  sd = frmt(\"xx.xx\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"[{q1}, {q3}]\",                                  q1 = frmt(\"xx.x\"),                                  q3 = frmt(\"xx.x\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing = \"\")))   ) ) %>%    print_to_gt(dat) tfrmt(   label = label,   column = column,   param = param,   values = value,   sorting_cols = c(ord),   col_plan = col_plan(-ord),    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt(\"xx\", missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"{mean} ({sd})\",                                  mean = frmt(\"xx.x\"),                                  sd = frmt(\"xx.xx\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"[{q1}, {q3}]\",                                  q1 = frmt(\"xx.x\"),                                  q3 = frmt(\"xx.x\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing = \"\")))   ),    col_align =  col_align_plan(     element_align(align = \"left\", col = `p-value`))   ) %>%    print_to_gt(dat) tfrmt(   label = label,   column = column,   param = param,   values = value,   sorting_cols = c(ord),   col_plan = col_plan(-ord),    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt(\"xx\", missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"{mean} ({sd})\",                                  mean = frmt(\"xx.x\"),                                  sd = frmt(\"xx.xx\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"[{q1}, {q3}]\",                                  q1 = frmt(\"xx.x\"),                                  q3 = frmt(\"xx.x\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing = \"\")))   ),    col_align =  col_align_plan(     element_align(align = c(\".\"), col = `p-value`))   ) %>%    print_to_gt(dat) tfrmt(   label = label,   column = column,   param = param,   values = value,   sorting_cols = c(ord),   col_plan = col_plan(-ord),    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt(\"xx\", missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"{mean} ({sd})\",                                  mean = frmt(\"xx.x\"),                                  sd = frmt(\"xx.xx\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"[{q1}, {q3}]\",                                  q1 = frmt(\"xx.x\"),                                  q3 = frmt(\"xx.x\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing = \"\")))   ),    col_align =  col_align_plan(     element_align(align = c(\".\"), col = `p-value`),     element_align(align = c(\".\", \",\", \" \"), col = vars(starts_with(\"trt\"))))   ) %>%    print_to_gt(dat) tfrmt(   label = label,   column = column,   param = param,   values = value,   sorting_cols = c(ord),   col_plan = col_plan(-ord),    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt(\"xx\", missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"{mean} ({sd})\",                                  mean = frmt(\"xx.x\"),                                  sd = frmt(\"xx.xx\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"[{q1}, {q3}]\",                                  q1 = frmt(\"xx.x\"),                                  q3 = frmt(\"xx.x\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing = \"\")))   ),    col_align =  col_align_plan(     element_align(align = c(\".\"), col = `p-value`),     element_align(align = \"left\", col = trt1),     element_align(align = \"right\", col = trt2))   ) %>%    print_to_gt(dat)"},{"path":"https://gsk-biostatistics.github.io/tlang/articles/col_align_plan.html","id":"alignment-of-group-and-label-columns","dir":"Articles","previous_headings":"","what":"Alignment of group and label columns","title":"Column Alignment Plan","text":"time, group label columns left aligned default. user can adjust alignment columns gt directly.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/articles/col_align_plan.html","id":"alignment-via-body_plan","dir":"Articles","previous_headings":"","what":"Alignment via body_plan","title":"Column Alignment Plan","text":"noted simple cases, user can achieve desired alignment via frmts body_plan. frmt specifications allow us pad values desired length. example, frmt(xxx) ensure values fewer 3 digits padded accordingly: 23 become ” 23” 9 become ” 9”. straightforward table values similar scales, may sufficient. However many cases user may desire control alignment col_align_plan preferred method.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/articles/col_plan.html","id":"option-1-a-single-column-variable","dir":"Articles","previous_headings":"","what":"Option 1: A single column variable","title":"Column Plan","text":"Let’s consider following dataset includes single column variable:","code":"dat <- tribble(     ~group,     ~label,  ~my_col,    ~parm, ~val,     \"g1\", \"rowlabel1\",  \"col1\"  ,  \"value\",    1,     \"g1\", \"rowlabel1\",  \"col2\"  ,  \"value\",    1,     \"g1\", \"rowlabel1\",  \"mycol3\",  \"value\",    1,     \"g1\", \"rowlabel1\",  \"col4\"  ,  \"value\",    1,     \"g1\", \"rowlabel1\",  \"mycol5\",  \"value\",    1,     \"g1\", \"rowlabel2\",  \"col1\"  ,  \"value\",    2,     \"g1\", \"rowlabel2\",  \"col2\"  ,  \"value\",    2,     \"g1\", \"rowlabel2\",  \"mycol3\",  \"value\",    2,     \"g1\", \"rowlabel2\",  \"col4\"  ,  \"value\",    2,     \"g1\", \"rowlabel2\",  \"mycol5\",  \"value\",    2,     \"g2\", \"rowlabel3\",  \"col1\"  ,  \"value\",    3,     \"g2\", \"rowlabel3\",  \"col2\"  ,  \"value\",    3,     \"g2\", \"rowlabel3\",  \"mycol3\",  \"value\",    3,     \"g2\", \"rowlabel3\",  \"col4\"  ,  \"value\",    3,     \"g2\", \"rowlabel3\",  \"mycol5\",  \"value\",    3)"},{"path":"https://gsk-biostatistics.github.io/tlang/articles/col_plan.html","id":"simple-column-selection","dir":"Articles","previous_headings":"Option 1: A single column variable","what":"Simple Column Selection","title":"Column Plan","text":"case single column variable column spanners, col_plan behaves identically dplyr::select. Let’s say want remove one columns: Just like dplyr::select, can also reorder, rename, remove columns, using tidyselect syntax ’d like:","code":"tfrmt(     group = group,     label = label,     param = parm,     values = val,     column = my_col,     body_plan = body_plan(       frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"x\"))     ),     col_plan = col_plan(       -mycol5                 )   ) %>%    print_to_gt(dat) tfrmt(     group = group,     label = label,     param = parm,     values = val,     column = my_col,     body_plan = body_plan(       frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"x\"))     ),     col_plan = col_plan(       group,        label,        starts_with(\"col\"),       new_col_3 = mycol3,         -mycol5                 )   ) %>%    print_to_gt(dat)"},{"path":"https://gsk-biostatistics.github.io/tlang/articles/col_plan.html","id":"adding-column-spanners","dir":"Articles","previous_headings":"Option 1: A single column variable","what":"Adding column spanners","title":"Column Plan","text":"col_plan accepts combination tidyselect expressions, column names, /span structure (span_structure) objects. Recall *_structure objects modifying contents (.e., text) table; col_plan, use span_structures add column spanners. placed strategically col_plan inform tlang hierarchy spanners columns. span_structure constructed label defines spanner text, combination tidyselect expressions column names. Let’s try putting spanner columns starting “col”: span_structure can also contain one child span_structure entries, defining hierarchy spanners: Finally, can renaming well:","code":"tfrmt(     group = group,     label = label,     param = parm,     values = val,     column = my_col,     body_plan = body_plan(       frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"x\"))     ),     col_plan = col_plan(       group,        label,        span_structure(         \"column cols\",         starts_with(\"col\")         ),       new_col_3 = mycol3,        - mycol5                 )   ) %>%    print_to_gt(dat) #> Unable to subset dataset columns #> Reason: tfrmt(     group = group,     label = label,     param = parm,     values = val,     column = my_col,     body_plan = body_plan(       frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"x\"))     ),     col_plan = col_plan(       group,        label,        span_structure(         \"column cols\",         span_structure(           \"cols 1,2\",           col1, col2         ),         span_structure(           \"col 4\",           col4         )         ))   ) %>%    print_to_gt(dat) #> Unable to subset dataset columns #> Reason: Problem while computing `new_name_quo = map2(.data$new_name_in_df, .data$.removal_identifier_col, dot_char_as_quo)`. tfrmt(     group = group,     label = label,     param = parm,     values = val,     column = my_col,     body_plan = body_plan(       frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"x\"))     ),     col_plan = col_plan(       group,        label,        span_structure(         \"column cols\",         span_structure(           \"cols 1,2\",           col1, col2         ),         span_structure(           \"col 4\",           `new-col4` = col4         )         ))   ) %>%    print_to_gt(dat) #> Unable to subset dataset columns #> Reason: Problem while computing `new_name_quo = map2(.data$new_name_in_df, .data$.removal_identifier_col, dot_char_as_quo)`."},{"path":"https://gsk-biostatistics.github.io/tlang/articles/col_plan.html","id":"option-2-1-column-variable","dir":"Articles","previous_headings":"","what":"Option 2: >1 column variable","title":"Column Plan","text":"Multiple column variables used form hierarchy column spanners column labels, driven order column variables. first variable specified represents highest level spanner, last variable specified represents lowest level column label. Similar case 1 column variable, user may remove rename values lowest level column variable. multiple column variables, however, specifying column ordering col_plan bit trickier. default, tlang display columns appear data can customized col_plan. main limitation >1 column variable inability specify column spanners col_plan; spanning labels created using higher level column variable values, displayed -. , higher importance preparing analysis results data display. Let’s consider example dataset multiple column variables: Notice col_plan considerably simpler higher level columns repurposed column spanners: multiple column variables provided, essentially combined together behind scenes. means column order can defined column variables, including representing spanning. Specifically, may order columns leveraging contains() reference portion names. Reordering multiple column variables simplest lowest level column variable contains unique values (.e., 1 value per column final table), like example . Let’s suppose want move “col 4” column beginning also reorder “col1” “col2”. achieve , can select “col 4” “col2” finally columns. many cases, may uniqueness lower level column name. Take following example: Notice columns mean sd repeated treatment groups, differentiated spanners (span). still able modify ordering, lost bit control careful order put things col_plan. repeating names lowest level, best start lowest level column variable values move hierarchy, ways contradictions, latest used. example , see Unusual Tables Vignette.","code":"dat <- tribble(     ~group,     ~label,        ~span2,  ~span1,     ~my_col,    ~parm,   ~val,     \"g1\", \"rowlabel1\",  \"column cols\", \"cols 1,2\", \"col1\"  ,  \"value\",    1,     \"g1\", \"rowlabel1\",  \"column cols\", \"cols 1,2\", \"col2\"  ,  \"value\",    1,     \"g1\", \"rowlabel1\",             NA,         NA, \"mycol3\",  \"value\",    1,     \"g1\", \"rowlabel1\",  \"column cols\", \"col 4\"   , \"col4\"  ,  \"value\",    1,     \"g1\", \"rowlabel1\",             NA,         NA, \"mycol5\",  \"value\",    1,     \"g1\", \"rowlabel2\",  \"column cols\", \"cols 1,2\", \"col1\"  ,  \"value\",    2,     \"g1\", \"rowlabel2\",  \"column cols\", \"cols 1,2\", \"col2\"  ,  \"value\",    2,     \"g1\", \"rowlabel2\",             NA,        NA , \"mycol3\",  \"value\",    2,     \"g1\", \"rowlabel2\",  \"column cols\", \"col 4\"   , \"col4\"  ,  \"value\",    2,     \"g1\", \"rowlabel2\",             NA,         NA, \"mycol5\",  \"value\",    2,     \"g2\", \"rowlabel3\",  \"column cols\", \"cols 1,2\", \"col1\"  ,  \"value\",    3,     \"g2\", \"rowlabel3\",  \"column cols\", \"cols 1,2\", \"col2\"  ,  \"value\",    3,     \"g2\", \"rowlabel3\",             NA,         NA, \"mycol3\",  \"value\",    3,     \"g2\", \"rowlabel3\",  \"column cols\", \"col 4\"   , \"col4\"  ,  \"value\",    3,     \"g2\", \"rowlabel3\",             NA,         NA, \"mycol5\",  \"value\",    3,   ) tfrmt(     group = group,     label = label,     param = parm,     values = val,     column = c(span2, span1, my_col),     body_plan = body_plan(       frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"x\"))     ),     col_plan = col_plan(       group,        label,        starts_with(\"col\"),       new_col_3 = mycol3,         -mycol5                 )   ) %>%    print_to_gt(dat) tfrmt(     group = group,     label = label,     param = parm,     values = val,     column = c(span2, span1, my_col),     body_plan = body_plan(       frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"x\"))     ),     col_plan = col_plan(       group,        label,        contains(\"col 4\"),       contains(\"col2\"),       starts_with(\"col\"),       new_col_3 = mycol3,         -mycol5                 )   ) %>%    print_to_gt(dat) dat <- tribble(     ~group,     ~label,     ~span ,  ~my_col,    ~parm,   ~val,     \"g1\", \"rowlabel1\",  \"Treament\", \"mean\"   ,  \"mean\",    1.234,     \"g1\", \"rowlabel1\",  \"Treament\", \"sd\"     ,  \"sd\"  ,    2.123,     \"g1\", \"rowlabel2\",  \"Placebo\" , \"mean\"   ,  \"mean\",    2.843,     \"g1\", \"rowlabel2\",  \"Placebo\" , \"sd\"     ,  \"sd\"  ,    1.435   )"},{"path":"https://gsk-biostatistics.github.io/tlang/articles/col_plan.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Column Plan","text":"summary, use 1 >1 column variables personal choice. Depending chosen workflow, user can achieve desired column ordering labeling combination data preparation tfrmt options.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/articles/examples.html","id":"demography-table","dir":"Articles","previous_headings":"","what":"Demography Table","title":"Examples","text":"demography table going use demog_data, example analysis results dataset found package, based CDISC pilot data. dataset two different row label columns, rowlbl1 rowlbl2 building table group row labels. also two order columns used set row order output. single column define table’s columns (multiple column columns used column spanning). Finally param column, value column additional grouping column, grp, can use complex formatting. mock going match looks like : table, three columns treatment groups, total column groups combined, p-value column. table also contains mix categorical continuous analysis. first thing going building tfrmt specify columns make table isn’t nice table definitely doesn’t match mock. lets start formatting numbers. going build body_plan add tfrmt. fairly quick explanation body_plans like information see vignettes(\"Body Plan\") Body plans made series frmt_stuctures frmt_stucture represents formatting cell within table. order frmt_structures matter; always applied latest oldest. means first frmt_stucture body_plan generic. can use groups, labels parameters specify formatting applies values. start, going use rows “n (%)” default. way don’t need list every row “n (%)” row. rows made two different values, need use frmt_combine. Next, can format continuous variables, just straightforward one value per row can just use label filter frmt define look. Finally, want format p-values. bit complicated, since p-value sits row parameters; therefore group label value specific enough need something granular. , need specify parameter frmt_structure like frmt_structure(group_val = \".default\", label_val = \".default\", p = frmt(\"x.xx\"). , also need make sure never displays rounded p-value 0 1. can use frmt_when specify formatting based value. Now numbers looks correct, can drop order columns grp column (note want display grp column, plays role behind scenes, addressed next step). use col_plan uses tidy-select nomenclature drop/move columns. Now table looks just right. two problems, (1) alignment (2) spacing continuous categorical values. take care alignment going add col_align_plan accepts series element_aligns. allows columns aligned differently needed. table, want columns align either “.”, “,” ” ” element_align looks like element_align(align = c(\".\",\",\",\" \"), col = vars(everything())). alignment sorted can move spacing. order match spacing mock need use extra grp column data. look data, can see want space time either groups change. means can use row_grp_plan just \".default\" group value handle spacing. addition spacing, row_grp_plan let us move spanning group labels separate column changing label_loc “column”.","code":"#> # A tibble: 6 × 8 #>   rowlbl1 rowlbl2 param grp    ord1  ord2 column                 value #>   <chr>   <chr>   <chr> <chr> <dbl> <dbl> <chr>                  <dbl> #> 1 Age (y) n       n     cont      1     1 Placebo               86     #> 2 Age (y) n       n     cont      1     1 Xanomeline Low Dose   84     #> 3 Age (y) n       n     cont      1     1 Xanomeline High Dose  84     #> 4 Age (y) n       n     cont      1     1 Total                254     #> 5 Age (y) n       p     cont      1     1 p-value                0.593 #> 6 Age (y) Mean    Mean  cont      1     2 Placebo               75.2 tfrmt(   # specify columns in the data   group = c(rowlbl1,grp),   label = rowlbl2,   column = column,    param = param,   values = value,   sorting_cols = c(ord1, ord2)) %>%    print_to_gt(demog_data) %>%    tab_options(     container.width = 900   ) #> The following rows of the given dataset have no format applied to them 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346 tfrmt(   # specify columns in the data   group = c(rowlbl1,grp),   label = rowlbl2,   column = column,    param = param,   values = value,   sorting_cols = c(ord1, ord2),   # specify value formatting    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt_combine(\"{n} ({pct} %)\",                                                                                  n = frmt(\"xxx\"),                                                                                 pct = frmt(\"xx.x\"))),     frmt_structure(group_val = \".default\", label_val = \"n\", frmt(\"xxx\")),     frmt_structure(group_val = \".default\", label_val = c(\"Mean\", \"Median\", \"Min\",\"Max\"), frmt(\"xxx.x\")),     frmt_structure(group_val = \".default\", label_val = \"SD\", frmt(\"xxx.xx\")),     frmt_structure(group_val = \".default\", label_val = \".default\", p = frmt_when(\">0.99\" ~ \">0.99\",                                                                                  \"<0.001\" ~ \"<0.001\",                                                                                  TRUE ~ frmt(\"x.xxx\", missing = \"\")))   )) %>%    print_to_gt(demog_data) %>%    tab_options(     container.width = 900   ) tfrmt(   # specify columns in the data   group = c(rowlbl1,grp),   label = rowlbl2,   column = column,    param = param,   values = value,   sorting_cols = c(ord1, ord2),   # specify value formatting    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt_combine(\"{n} {pct}\",                                                                                  n = frmt(\"xxx\"),                                                                                 pct = frmt_when(\"==100\" ~ \"\",                                                                                                 \"==0\" ~ \"\",                                                                                                 TRUE ~ frmt(\"(xx.x %)\")))),     frmt_structure(group_val = \".default\", label_val = \"n\", frmt(\"xxx\")),     frmt_structure(group_val = \".default\", label_val = c(\"Mean\", \"Median\", \"Min\",\"Max\"), frmt(\"xxx.x\")),     frmt_structure(group_val = \".default\", label_val = \"SD\", frmt(\"xxx.xx\")),     frmt_structure(group_val = \".default\", label_val = \".default\", p = frmt(\"\")),     frmt_structure(group_val = \".default\", label_val = c(\"n\",\"<65 yrs\",\"<12 months\",\"<25\"), p = frmt_when(\">0.99\" ~ \">0.99\",                                                                                  \"<0.001\" ~ \"<0.001\",                                                                                  TRUE ~ frmt(\"x.xxx\", missing = \"\")))   ),   # remove extra cols   col_plan = col_plan(-grp,                        -starts_with(\"ord\") )) %>%    print_to_gt(demog_data) %>%    tab_options(     container.width = 900   ) demog_data %>%    distinct(rowlbl1,grp) #> # A tibble: 12 × 2 #>    rowlbl1                grp   #>    <chr>                  <chr> #>  1 \"Age (y)\"              cont  #>  2 \"Age (y)\"              cat   #>  3 \"Sex\"                  cat   #>  4 \"Race (Origin)\"        cat   #>  5 \"MMSE\"                 cont  #>  6 \"Duration of disease \" cont  #>  7 \"Duration of disease \" cat   #>  8 \"Years of education\"   cont  #>  9 \"Baseline weight(kg)\"  cont  #> 10 \"Baseline height(cm)\"  cont  #> 11 \"Baseline BMI\"         cont  #> 12 \"Baseline BMI\"         cat tfrmt(   # specify columns in the data   group = c(rowlbl1,grp),   label = rowlbl2,   column = column,    param = param,   values = value,   sorting_cols = c(ord1, ord2),   # specify value formatting    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt_combine(\"{n} {pct}\",                                                                                  n = frmt(\"xxx\"),                                                                                 pct = frmt_when(\"==100\" ~ \"\",                                                                                                 \"==0\" ~ \"\",                                                                                                 TRUE ~ frmt(\"(xx.x %)\")))),     frmt_structure(group_val = \".default\", label_val = \"n\", frmt(\"xxx\")),     frmt_structure(group_val = \".default\", label_val = c(\"Mean\", \"Median\", \"Min\",\"Max\"), frmt(\"xxx.x\")),     frmt_structure(group_val = \".default\", label_val = \"SD\", frmt(\"xxx.xx\")),     frmt_structure(group_val = \".default\", label_val = \".default\", p = frmt(\"\")),     frmt_structure(group_val = \".default\", label_val = c(\"n\",\"<65 yrs\",\"<12 months\",\"<25\"), p = frmt_when(\">0.99\" ~ \">0.99\",                                                                                  \"<0.001\" ~ \"<0.001\",                                                                                  TRUE ~ frmt(\"x.xxx\", missing = \"\")))   ),   # remove extra cols   col_plan = col_plan(-grp,                        -starts_with(\"ord\") ),   # Specify column alignment plan   col_align = col_align_plan(     element_align(align = c(\".\",\",\",\" \"), col = vars(everything()))   ),        # Specify row group plan   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = \".default\", element_block(post_space = \" \")),     label_loc = element_row_grp_loc(location = \"column\")   )      ) %>%    print_to_gt(demog_data) %>%    tab_options(     container.width = 900   )"},{"path":"https://gsk-biostatistics.github.io/tlang/articles/examples.html","id":"ae-table","dir":"Articles","previous_headings":"","what":"AE table","title":"Examples","text":"adverse events (AE) table, use ae_data analysis results data, also based CDISC pilot data. dataset two different row label columns, AEBODSYS AETERM, system organ class preferred term, respectively. also two order columns used set row order output. table column spanners, two column variables, col2 col1 define hierarchy columns; can used lieu col_plan span_structures(), desired. Finally, param column value column. brevity, subset AEs >10% prevalence High Dose group. mock going match looks like : table three treatment group columns (Placebo, Low, High Dose) following values reported: # subjects least one AE (n), percent subjects least one AE (pct), # AEs (AEs). also two p-value columns (Low Dose vs. Placebo, High Dose vs. Placebo). Like demography example, first thing going building tfrmt specify columns. Note col2 contains spanning labels col1 contains lower level column headers: Next, need format values using body_plan. Recall body plan made series frmt_stuctures frmt_stucture represents formatting cell within table. AE table boils following values: # subjects least one AE (n), percent subjects least one AE (pct), # AEs (AEs), p-value (pval). n pct combined using frmt_combine, 3 frmt_structure objects. Note use frmt_when format p-values. Almost ! AE table contains data Preferred Terms System Organ Classes. Therefore, want typical group-level header. Instead, want display System Organ Class label inline data, nest Preferred Term data underneath. Fortunately, able achieve formatting row_grp_plan: column alignment looks good -, except p-values. can use col_align_plan tweak . Notice still order columns column labels benefit renaming. can add col_plan help ordering: better control column labels, can provide single column lieu two columns. allows us make use col_plan’s span_structures define column labels spanners: AE table now complete!","code":"#> # A tibble: 6 × 8 #>   AEBODSYS        AETERM          col2             col1  param value  ord1  ord2 #>   <chr>           <chr>           <chr>            <chr> <chr> <dbl> <dbl> <dbl> #> 1 ANY BODY SYSTEM ANY BODY SYSTEM Placebo          n_pct n      65       0     0 #> 2 ANY BODY SYSTEM ANY BODY SYSTEM Placebo          n_pct pct    75.6     0     0 #> 3 ANY BODY SYSTEM ANY BODY SYSTEM Placebo          AEs   AEs   281       0     0 #> 4 ANY BODY SYSTEM ANY BODY SYSTEM Xanomeline Low … n_pct n      77       0     0 #> 5 ANY BODY SYSTEM ANY BODY SYSTEM Xanomeline Low … n_pct pct    91.7     0     0 #> 6 ANY BODY SYSTEM ANY BODY SYSTEM Xanomeline Low … AEs   AEs   412       0     0 tfrmt(   # specify columns in the data   group = AEBODSYS,   label = AETERM,   column = c(col2, col1),    param = param,   values = value,   sorting_cols = c(ord1, ord2)) %>%    print_to_gt(ae_data2) %>%    tab_options(     container.width = 1000   ) #> The following rows of the given dataset have no format applied to them 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165 tfrmt(   # specify columns in the data   group = AEBODSYS,   label = AETERM,   column = c(col2, col1),    param = param,   values = value,   sorting_cols = c(ord1, ord2),   # specify value formatting    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(\"{n} {pct}\",                                 n = frmt(\"XXX\"),                                 pct = frmt_when(                                   \"==100\" ~ \"\",                                   \"==0\" ~ \"\",                                   TRUE ~ frmt(\"(xx.x %)\")))),     frmt_structure(group_val = \".default\", label_val = \".default\",                     AEs = frmt(\"[XXX]\")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing =\"--\")))   )) %>%    print_to_gt(., ae_data2) %>%    tab_options(     container.width = 1000   ) tfrmt(   # specify columns in the data   group = AEBODSYS,   label = AETERM,   column = c(col2, col1),    param = param,   values = value,   sorting_cols = c(ord1, ord2),   # specify value formatting    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(\"{n} {pct}\",                                 n = frmt(\"XXX\"),                                 pct = frmt_when(                                   \"==100\" ~ \"\",                                   \"==0\" ~ \"\",                                   TRUE ~ frmt(\"(xx.x %)\")))),     frmt_structure(group_val = \".default\", label_val = \".default\",                     AEs = frmt(\"[XXX]\")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing =\"--\")))   ),   # Nest Preferred terms under SOC   row_grp_plan = row_grp_plan(label_loc = element_row_grp_loc(location = \"indented\"))   ) %>%    print_to_gt(ae_data2) %>%    tab_options(     container.width = 1000   ) tfrmt(   # specify columns in the data   group = AEBODSYS,   label = AETERM,   column = c(col2, col1),    param = param,   values = value,   sorting_cols = c(ord1, ord2),   # specify value formatting    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(\"{n} {pct}\",                                 n = frmt(\"XXX\"),                                 pct = frmt_when(                                   \"==100\" ~ \"\",                                   \"==0\" ~ \"\",                                   TRUE ~ frmt(\"(xx.x %)\")))),     frmt_structure(group_val = \".default\", label_val = \".default\",                     AEs = frmt(\"[XXX]\")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing =\"--\")))   ),   # Nest Preferred terms under SOC   row_grp_plan = row_grp_plan(label_loc = element_row_grp_loc(location = \"indented\")),   # alignment      # Specify column alignment plan   col_align = col_align_plan(     element_align(align = c(\".\",\",\",\" \"), col = vars(starts_with(\"p_\")))   )   ) %>%    print_to_gt(ae_data2) %>%    tab_options(     container.width = 1000   ) tfrmt(   # specify columns in the data   group = AEBODSYS,   label = AETERM,   column = c(col2, col1),    param = param,   values = value,   sorting_cols = c(ord1, ord2),   # specify value formatting    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(\"{n} {pct}\",                                 n = frmt(\"XXX\"),                                 pct = frmt_when(                                   \"==100\" ~ \"\",                                   \"==0\" ~ \"\",                                   TRUE ~ frmt(\"(xx.x %)\")))),     frmt_structure(group_val = \".default\", label_val = \".default\",                     AEs = frmt(\"[XXX]\")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing =\"--\")))   ),   # Nest Preferred terms under SOC   row_grp_plan = row_grp_plan(label_loc = element_row_grp_loc(location = \"indented\")),      # Specify column alignment plan   col_align = col_align_plan(     element_align(align = c(\".\",\",\",\" \"), col = vars(contains(\"pval\")))   ),      # columns   col_plan = col_plan(     -starts_with(\"ord\")   )   ) %>%    print_to_gt(ae_data2)  %>%    tab_options(     container.width = 1000   ) ae_data3 <- ae_data2 %>%    unite(\"combined_col\", c(col2, col1), sep = \"-\")  tfrmt(   # specify columns in the data   group = AEBODSYS,   label = AETERM,   column = combined_col,    param = param,   values = value,   sorting_cols = c(ord1, ord2),   # specify value formatting    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(\"{n} {pct}\",                                 n = frmt(\"XXX\"),                                 pct = frmt_when(                                   \"==100\" ~ \"\",                                   \"==0\" ~ \"\",                                   TRUE ~ frmt(\"(xx.x %)\")))),     frmt_structure(group_val = \".default\", label_val = \".default\",                     AEs = frmt(\"[XXX]\")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing =\"--\")))   ),   # Nest Preferred terms under SOC   row_grp_plan = row_grp_plan(label_loc = element_row_grp_loc(location = \"indented\")),      # Specify column alignment plan   col_align = col_align_plan(     element_align(align = c(\".\",\",\",\" \"), col = vars(contains(\"pval\")))   ),      # columns   col_plan = col_plan(     -starts_with(\"ord\"),         span_structure(       \"Xanomeline High Dose (N=84)\",        `n (%)` = `Xanomeline High Dose-n_pct` ,        `[AEs]` = `Xanomeline High Dose-AEs`      ),     span_structure(       \"Xanomeline Low Dose (N=84)\",        `n (%)` = `Xanomeline Low Dose-n_pct` ,        `[AEs]` = `Xanomeline Low Dose-AEs`      ),     span_structure(       \"Placebo (N=86)\",        `n (%)` = `Placebo-n_pct` ,        `[AEs]` = `Placebo-AEs`      ),      span_structure(       \"Fisher's Exact p-values\",        `Placebo vs. Low Dose` = `fisher_pval-p_low` ,        `Placebo vs. High Dose` = `fisher_pval-p_high`      )   )   ) %>%    print_to_gt(ae_data3)  %>%    tab_options(     container.width = 1000   ) #> Unable to subset dataset columns #> Reason: Problem while computing `new_name_quo = map2(.data$new_name_in_df, .data$.removal_identifier_col, dot_char_as_quo)`."},{"path":"https://gsk-biostatistics.github.io/tlang/articles/examples.html","id":"efficacy","dir":"Articles","previous_headings":"","what":"Efficacy","title":"Examples","text":"example, use efficacy_data dataset, example analysis results dataset found package, based CDISC pilot data ADAS-Cog(11) score. goal recreate table 14-3.01 CDISC pilot. data relatively simple contains 1 group column column column, adds complexity multiple analyses stacked together - summary statistics different values different time points, results several different ANCOVA models. Multiple treatment groups well contrasts groups included. mock going match looks like : Let’s first see table looks without special formatting. judicious use body_plan’s frmt, frmt_combine, frmt_when, can conditionally format different pieces results. summary statistics, number observations (n), mean standard deviation (mean, sd), median range (median, min, max). models, p-value (p.value) least squares mean difference (diff) well associated standard error (diff_se) 95% confidence interval (diff_lcl, diff_ucl). label column indicates row various measures belong . First, let’s format standalone values: n p-value. Notice n always sits row labeled “n”; therefore can reference label_val param name frmt_structure. p-values several different label values convenient format according param name frmt_structure. Next, remaining param values combined twos threes. Therefore, use frmt_combine utility achieve desired formatting: Now values formatted correctly, can make sure table sorted appropriately passing order columns sorting_cols. can also drop order columns final display using col_plan. Notice row labels quite right. First, bit hierarchy label values nested group values, nice add indentation make nesting obvious. Also, cases, group values also contain summary data, means ARD contains matching group label value. summary rows, want suppress printing extra group-level header, display summary data -line. row_grp_plan can help us via row_grp_loc argument: Almost done! Notice spec also contains empty rows different groups data. can mimic behavior passing row_grp_structure objects row_grp_plan. objects define “blocks” rows describe format . case, want add post space specific blocks data. can reference locations block based values group variable. , efficacy table complete!","code":"#> # A tibble: 6 × 7 #>   group    label     column               param value  ord1  ord2 #>   <chr>    <chr>     <chr>                <chr> <dbl> <dbl> <dbl> #> 1 Baseline n         Placebo              n      79       1     1 #> 2 Baseline n         Xanomeline Low Dose  n      81       1     1 #> 3 Baseline n         Xanomeline High Dose n      74       1     1 #> 4 Baseline Mean (SD) Placebo              mean   24.1     1     2 #> 5 Baseline Mean (SD) Xanomeline Low Dose  mean   24.4     1     2 #> 6 Baseline Mean (SD) Xanomeline High Dose mean   21.3     1     2 tfrmt(   group = group,   label = label,   column = column,   param = param,   values = value  ) %>%   print_to_gt(efficacy_data) %>%    tab_options(     container.width = 800   )  #> The following rows of the given dataset have no format applied to them 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 tfrmt(   group = group,   label = label,   column = column,   param = param,   values = value,    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \"n\",                     frmt(\"xx\")),  # we could also do: label_val = \".default\", n = frmt(\"xx\")     frmt_structure(group_val = \".default\", label_val = \".default\",                     p.value = frmt_when(\"<0.001\" ~ \"<0.001\",                                        \">0.99\" ~ \">0.99\",                                        TRUE ~ frmt(\"x.xxx\", missing = \" \")))   ) ) %>%   print_to_gt(efficacy_data) %>%    tab_options(     container.width = 800   ) #> The following rows of the given dataset have no format applied to them 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70 tfrmt(   group = group,   label = label,   column = column,   param = param,   values = value,    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \"n\",                     frmt(\"xx\")),  # we could also do: label_val = \".default\", n = frmt(\"xx\")     frmt_structure(group_val = \".default\", label_val = \".default\",                     p.value = frmt_when(\"<0.001\" ~ \"<0.001\",                                        \">0.99\" ~ \">0.99\",                                        TRUE ~ frmt(\"x.xxx\", missing = \" \"))),     frmt_structure(group_val = \".default\", label_val = \"Median (Range)\",                     frmt_combine(\"{median} ({min};{max})\",                                 median = frmt(\"xx.x\"),                                 min = frmt(\"xx\"),                                 max = frmt(\"xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"Mean (SD)\",                    frmt_combine(\"{mean} ({sd})\",                                 mean = frmt(\"xx.x\"),                                 sd = frmt(\"xx.xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"Diff of LS Means (SE)\",                     frmt_combine(\"{diff} ({diff_se})\",                                 diff = frmt(\"xx.x\"),                                 diff_se = frmt(\"xx.xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"95% CI\",                     frmt_combine(\"({diff_lcl};{diff_ucl})\",                                 diff_lcl = frmt(\"xx.x\"),                                 diff_ucl = frmt(\"xx.x\"), missing = \" \"))   ) ) %>%   print_to_gt(efficacy_data) %>%    tab_options(     container.width = 800   ) tfrmt(   group = group,   label = label,   column = column,   param = param,   values = value,   sorting_cols = c(ord1, ord2),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \"n\",                     frmt(\"xx\")),  # we could also do: label_val = \".default\", n = frmt(\"xx\")     frmt_structure(group_val = \".default\", label_val = \".default\",                     p.value = frmt_when(\"<0.001\" ~ \"<0.001\",                                        \">0.99\" ~ \">0.99\",                                        TRUE ~ frmt(\"x.xxx\", missing = \" \"))),     frmt_structure(group_val = \".default\", label_val = \"Median (Range)\",                     frmt_combine(\"{median} ({min};{max})\",                                 median = frmt(\"xx.x\"),                                 min = frmt(\"xx\"),                                 max = frmt(\"xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"Mean (SD)\",                     frmt_combine(\"{mean} ({sd})\",                                 mean = frmt(\"xx.x\"),                                 sd = frmt(\"xx.xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"Diff of LS Means (SE)\",                     frmt_combine(\"{diff} ({diff_se})\",                                 diff = frmt(\"xx.x\"),                                 diff_se = frmt(\"xx.xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"95% CI\",                     frmt_combine(\"({diff_lcl};{diff_ucl})\",                                 diff_lcl = frmt(\"xx.x\"),                                 diff_ucl = frmt(\"xx.x\"), missing = \" \"))   ),   col_plan = col_plan(     group, label, Placebo, contains(\"Low\"), contains(\"High\")   ) ) %>%   print_to_gt(efficacy_data) %>%    tab_options(     container.width = 800   ) tfrmt(   group = group,   label = label,   column = column,   param = param,   values = value,   sorting_cols = c(ord1, ord2),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \"n\",                     frmt(\"xx\")),  # we could also do: label_val = \".default\", n = frmt(\"xx\")     frmt_structure(group_val = \".default\", label_val = \".default\",                     p.value = frmt_when(\"<0.001\" ~ \"<0.001\",                                        \">0.99\" ~ \">0.99\",                                        TRUE ~ frmt(\"x.xxx\", missing = \" \"))),     frmt_structure(group_val = \".default\", label_val = \"Median (Range)\",                     frmt_combine(\"{median} ({min};{max})\",                                 median = frmt(\"xx.x\"),                                 min = frmt(\"xx\"),                                 max = frmt(\"xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"Mean (SD)\",                     frmt_combine(\"{mean} ({sd})\",                                 mean = frmt(\"xx.x\"),                                 sd = frmt(\"xx.xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"Diff of LS Means (SE)\",                     frmt_combine(\"{diff} ({diff_se})\",                                 diff = frmt(\"xx.x\"),                                 diff_se = frmt(\"xx.xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"95% CI\",                     frmt_combine(\"({diff_lcl};{diff_ucl})\",                                 diff_lcl = frmt(\"xx.x\"),                                 diff_ucl = frmt(\"xx.x\"), missing = \" \"))   ),   col_plan = col_plan(     group, label, Placebo, contains(\"Low\"), contains(\"High\")   ),   row_grp_plan = row_grp_plan(     label_loc = element_row_grp_loc(location = \"indented\")   ) ) %>%   print_to_gt(efficacy_data) %>%    tab_options(     container.width = 800   ) tfrmt(   group = group,   label = label,   column = column,   param = param,   values = value,   sorting_cols = c(ord1, ord2),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \"n\",                     frmt(\"xx\")),  # we could also do: label_val = \".default\", n = frmt(\"xx\")     frmt_structure(group_val = \".default\", label_val = \".default\",                     p.value = frmt_when(\"<0.001\" ~ \"<0.001\",                                        \">0.99\" ~ \">0.99\",                                        TRUE ~ frmt(\"x.xxx\", missing = \" \"))),     frmt_structure(group_val = \".default\", label_val = \"Median (Range)\",                     frmt_combine(\"{median} ({min};{max})\",                                 median = frmt(\"xx.x\"),                                 min = frmt(\"xx\"),                                 max = frmt(\"xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"Mean (SD)\",                     frmt_combine(\"{mean} ({sd})\",                                 mean = frmt(\"xx.x\"),                                 sd = frmt(\"xx.xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"Diff of LS Means (SE)\",                     frmt_combine(\"{diff} ({diff_se})\",                                 diff = frmt(\"xx.x\"),                                 diff_se = frmt(\"xx.xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"95% CI\",                     frmt_combine(\"({diff_lcl};{diff_ucl})\",                                 diff_lcl = frmt(\"xx.x\"),                                 diff_ucl = frmt(\"xx.x\"), missing = \" \"))   ),   col_plan = col_plan(     group, label, Placebo, contains(\"Low\"), contains(\"High\")   ),   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = list(group=\"Change from Baseline\"),                        element_block(post_space = \" \")),     row_grp_structure(group_val = list(group=\"p-value (Dose Response)\"),                       element_block(post_space = \" \")),     row_grp_structure(group_val = list(group=\"p-value (Xan - Placebo)\"),                        element_block(post_space = \" \")),     label_loc = element_row_grp_loc(location = \"indented\")   ) ) %>%   print_to_gt(efficacy_data) %>%    tab_options(     container.width = 800   )"},{"path":"https://gsk-biostatistics.github.io/tlang/articles/row_grp_plan.html","id":"row-group-structure","dir":"Articles","previous_headings":"","what":"Row group structure","title":"Row group plan","text":"Like body_plan, tlang’s row group plan (row_grp_plan), allows user specify number row group structure (row_grp_structure) objects, define groups rows appear. row_grp_structure contains group_val argument define relevant group values; behaves like filter relevant values. , row_grp_structure essentially performs group_by apply formatting within unique combination group values.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/articles/row_grp_plan.html","id":"element-block-objects","dir":"Articles","previous_headings":"Row group structure","what":"Element block objects","title":"Row group plan","text":"row_grp_structures purely aesthetic nature, accept element_block objects define styling given group rows. element_block objects work progress, currently provide ability add empty rows lines following groups data. add post space groups values based variable “grp1” (group tfrmt object) following: row_grp_structure(group_val = \".default\", element_block(post_space = \"   \")) add post space values grp1 = “grp1_1” following:","code":"my_tfrmt <- tfrmt(   group = grp1,   label = label,   param = param,    values = value,   column = column,   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = \".default\", element_block(post_space = \"   \"))     ),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"xx\"))   ) )  print_mock_gt(my_tfrmt, .default = 1:2)%>%     tab_style(       style = cell_text(whitespace = \"pre\", align = \"left\"),       locations = cells_stub()     ) my_tfrmt <- tfrmt(   group = grp1,   label = label,   param = param,    values = value,   column = column,   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = \"grp1_1\", element_block(post_space = \"   \"))     ),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"xx\"))   ) )  print_mock_gt(my_tfrmt, .default = 1:2)%>%     tab_style(       style = cell_text(whitespace = \"pre\", align = \"left\"),       locations = cells_stub()     )"},{"path":"https://gsk-biostatistics.github.io/tlang/articles/row_grp_plan.html","id":"row-labels","dir":"Articles","previous_headings":"","what":"Row labels","title":"Row group plan","text":"gt package offers default displays group row labels cover use cases, particularly user provides one group variable. , tlang offers multiple objects display. Let’s see differ following options: indented: Combined group/label variables spanning: Group label row spanning header column: Group label separate column noprint: Drop group labels","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/articles/row_grp_plan.html","id":"indented","dir":"Articles","previous_headings":"Row labels","what":"indented","title":"Row group plan","text":"tlang combine group label variables single column, using indentation distinguish hierarchies:","code":"my_tfrmt <- tfrmt(   group = c(grp1, grp2),   label = label,   param = param,    values = value,   column = column,   row_grp_plan = row_grp_plan(label_loc = element_row_grp_loc(location = \"indented\")),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"xx\"))   ) )  print_mock_gt(my_tfrmt, .default = 1:2)%>%     tab_style(       style = cell_text(whitespace = \"pre\", align = \"left\"),       locations = cells_stub()     )"},{"path":"https://gsk-biostatistics.github.io/tlang/articles/row_grp_plan.html","id":"spanning","dir":"Articles","previous_headings":"Row labels","what":"spanning","title":"Row group plan","text":"default option gt: group labels become spanning headers rows. Note case multiple group variables, top level group variable spanning row header, rest combine label variable using indentation:","code":"my_tfrmt <- tfrmt(   group = c(grp1, grp2),   label = label,   param = param,    values = value,   column = column,   row_grp_plan = row_grp_plan(label_loc = element_row_grp_loc(location = \"spanning\")),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"xx\"))   ) )  print_mock_gt(my_tfrmt, .default = 1:2)%>%     tab_style(       style = cell_text(whitespace = \"pre\", align = \"left\"),       locations = cells_stub()     )"},{"path":"https://gsk-biostatistics.github.io/tlang/articles/row_grp_plan.html","id":"column","dir":"Articles","previous_headings":"Row labels","what":"column","title":"Row group plan","text":"case, group labels become separate column left. Note case multiple group variables, top level group variable column, rest combine label variable using indentation:","code":"my_tfrmt <- tfrmt(   group = c(grp1, grp2),   label = label,   param = param,    values = value,   column = column,   row_grp_plan = row_grp_plan(label_loc = element_row_grp_loc(location = \"column\")),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"xx\"))   ) )  print_mock_gt(my_tfrmt, .default = 1:2)%>%     tab_style(       style = cell_text(whitespace = \"pre\", align = \"left\"),       locations = cells_stub()     )"},{"path":"https://gsk-biostatistics.github.io/tlang/articles/row_grp_plan.html","id":"noprint","dir":"Articles","previous_headings":"Row labels","what":"noprint","title":"Row group plan","text":"user may also suppress printing group variable specifying “noprint” option.","code":"my_tfrmt <- tfrmt(   group = c(grp1, grp2),   label = label,   param = param,    values = value,   column = column,   row_grp_plan = row_grp_plan(label_loc = element_row_grp_loc(location = \"noprint\")),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"xx\"))   ) )  print_mock_gt(my_tfrmt, .default = 1:2)"},{"path":"https://gsk-biostatistics.github.io/tlang/articles/unusual_tables.html","id":"multiple-columns-of-row-labels","dir":"Articles","previous_headings":"","what":"Multiple columns of Row Labels","title":"Unusual Tables","text":"unusual listings (tables) multiple row label columns. happens, often easier avoid using gt’s --box stub functions/formatting. example table like “Summary Number Subjects Site” CDISC pilot. make table values long “Pooled Id” “Site Id” columns, group label variables. also need column parameters even though . data standard ARD format can make tfrmt. makes tfrmt different won’t include group label, two ID columns displayed regular columns. also means columns table, including ID columns, can ordered via col_plan(). col_plan() follows conventions select() going start lowest level columns, select order spanning columns.","code":"data <- tribble(   ~`Pooled Id`,  ~`Site Id`, \"701\",  \"701\", \"703\",  \"703\", \"704\",  \"704\", \"705\",  \"705\", \"708\",  \"708\", \"709\",  \"709\", \"710\",  \"710\", \"713\",  \"713\", \"716\",  \"716\", \"718\",  \"718\", \"900\",  \"702\", \"900\",  \"706\", \"900\",  \"707\", \"900\",  \"711\", \"900\",  \"714\", \"900\",  \"715\", \"900\",  \"717\", \"Total\", \" \") %>%   crossing(col1 = c(\"Placebo (N=86)\",                    \"Xanomeline Low Dose (N=84)\",                    \"Xanomeline High Dose (N=84)\",                    \"Total (N=254)\"),            col2 = c(\"ITT\", \"Eff\", \"Com\")) %>%   mutate(val = rpois(216, 15), # Here I am just faking the data for display purposes           param = \"val\") tfrmt(   param = \"param\",   values = \"val\",   column = vars(col1, col2),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"XX\"))   ),   row_grp_plan = row_grp_plan(label_loc =element_row_grp_loc(\"column\")),   col_plan = col_plan(     `Pooled Id`,  `Site Id`,     contains(\"ITT\"),     contains(\"Eff\"),     contains(\"Placebo\"),     contains(\"High Dose\"),     contains(\"Low Dose\"),     everything()   ) ) %>%   print_to_gt(data)"},{"path":"https://gsk-biostatistics.github.io/tlang/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christina Fillmore. Author, maintainer. GlaxoSmithKline Research & Development Limited. Copyright holder, funder. Atorus Research LLC. Copyright holder, funder. Ellis Hughes. Author. Becca Krouse. Author. Karima Ahmad. Author.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fillmore C, Hughes E, Krouse B, Ahmad K (2022). tlang: Package (One Line, Title Case). https://GSK-Biostatistics.github.io/tlang/, https://gsk-biostatistics.github.io/tlang/.","code":"@Manual{,   title = {tlang: What the Package Does (One Line, Title Case)},   author = {Christina Fillmore and Ellis Hughes and Becca Krouse and Karima Ahmad},   year = {2022},   note = {https://GSK-Biostatistics.github.io/tlang/, https://gsk-biostatistics.github.io/tlang/}, }"},{"path":"https://gsk-biostatistics.github.io/tlang/index.html","id":"tlang","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"tlang package provides language defining display-related metadata, can used automate easily update output formats. clinical trials, displays generally quite standard, frequent, highly specific formatting tweaks (e.g., rounding, footnotes, headers) common. Prior data analysis, study teams often generate mock displays represent desired end product sponsors approve programmers replicate. process typically highly manual separate programming . also high importance placed verifying accuracy results via QC process double programming. Finally, movement toward industry standard data structure Analysis Results Data “ARD”, means analysis results datasets consistent structures column names. Specifically, ARD long, 1 record per computed value. tlang supports vision : Mock displays integrated programming workflow Results QC’ed prior formatting reduce rework Standard formatting styles can applied little one line code ARD structure can leveraged accommodate variety tables reducing amount repetitive tasks, study teams can focus quality interpretation results .","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/index.html","id":"why-tlang","dir":"","previous_headings":"","what":"Why tlang?","title":"What the Package Does (One Line, Title Case)","text":"many existing table-making packages R ecosystem, typically fall one two categories: Table packages perform analyses format results Table packages format output existing data design, tlang latter, intended used results computed. makes tlang unique, however, offers intuitive interface defining layering standard custom formats often specific clinical trials. also offers novel ability easily generate mock displays using metadata used actual displays. tlang built top powerful gt package, intended support variety output formats future.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"development version tlang can installed :","code":"devtools::install_github(\"GSK-Biostatistics/tlang\")"},{"path":"https://gsk-biostatistics.github.io/tlang/index.html","id":"input-data-structure","dir":"","previous_headings":"","what":"Input data structure","title":"What the Package Does (One Line, Title Case)","text":"expect input dataset long, 1 record per computed value. Required columns include: [Optional] 1 group columns, containing grouping values single label column, containing row label values 1 column columns, containing column values single param column, provides label distinct types values single values column, containing computed, raw data values [Optional] 1 sorting_cols columns, containing numeric vlaues used row ordering","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/index.html","id":"functionality","dir":"","previous_headings":"","what":"Functionality","title":"What the Package Does (One Line, Title Case)","text":"overview possible tlang: Create “tfrmt” metadata object containing formatting labeling display Layer tfrmt objects combine standard formatting user-specific formatting Create mock displays based existing sample data prior data ARD-standard compliant facilitates reuse automation benefits tlang: Provides tidyverse-friendly, pipeable interface Leverages gt output engine, allows customizations within gt ","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/index.html","id":"more-info","dir":"","previous_headings":"","what":"More Info","title":"What the Package Does (One Line, Title Case)","text":"information build tlang mocks/tables (like one !), please explore vignettes. Example GT Demog table","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/ae_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Adverse Events Analysis Results Data — ae_data","title":"Adverse Events Analysis Results Data — ae_data","text":"dataset containing results needed AE table. Using CDISC pilot data.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/ae_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adverse Events Analysis Results Data — ae_data","text":"","code":"ae_data"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/ae_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Adverse Events Analysis Results Data — ae_data","text":"data frame 2,794 rows 8 variables: AEBODSYS highest level row labels: System Organ Class AETERM specific row labels: Preferred Term col2 higher level column names (spanners) col1 lower level column names param parameter explain value value values put table ord1 controls ordering ord2 ordering controls","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/apply_frmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply formatting — apply_frmt","title":"Apply formatting — apply_frmt","text":"Apply formatting","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/apply_frmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply formatting — apply_frmt","text":"","code":"apply_frmt(frmt_def, .data, values, mock = FALSE, ...)  # S3 method for frmt apply_frmt(frmt_def, .data, values, mock = FALSE, ...)  # S3 method for frmt_combine apply_frmt(   frmt_def,   .data,   values,   mock = FALSE,   param,   column,   label,   group,   ... )  # S3 method for frmt_when apply_frmt(frmt_def, .data, values, mock = FALSE, ...)"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/apply_frmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply formatting — apply_frmt","text":"frmt_def formatting applied .data data, getting changed values values symbol one mock Logical value mock . default FALSE ... additional arguments methods param param column quosure column column columns list quosures label label column quosure group group column list quosures","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/apply_frmt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply formatting — apply_frmt","text":"formatted dataset","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/body_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Table Body Plan — body_plan","title":"Table Body Plan — body_plan","text":"Define formatting body contents table series frmt_structures. Structures get applied order bottom , last added structure first applied.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/body_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table Body Plan — body_plan","text":"","code":"body_plan(...)"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/body_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table Body Plan — body_plan","text":"... list frmt_structures defining body formatting","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/body_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table Body Plan — body_plan","text":"body_plan object","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tlang/reference/body_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table Body Plan — body_plan","text":"","code":"example_tfrmt<- tfrmt(       title = \"Table Title\",       body_plan = body_plan(         frmt_structure(           group_val = c(\"group1\"),           label_val = \".default\",           frmt(\"XXX\")         )       )      )"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/col_align_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Column Alignment Plan — col_align_plan","title":"Column Alignment Plan — col_align_plan","text":"Define columns table body aligned, whether left, right specific character(s).","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/col_align_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Column Alignment Plan — col_align_plan","text":"","code":"col_align_plan(...)"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/col_align_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Column Alignment Plan — col_align_plan","text":"... list frmt_structure","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/col_align_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Column Alignment Plan — col_align_plan","text":"table_body_plan object","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tlang/reference/col_align_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Column Alignment Plan — col_align_plan","text":"","code":"plan <- col_align_plan(     element_align(align = \"left\", col = \"my_var\"),     element_align(align = \"right\", col = vars(four)),     element_align(align = c(\".\", \",\", \" \"), col = vars(two, three))    )"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/col_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Define the Column Plan & Span Structures — col_plan","title":"Define the Column Plan & Span Structures — col_plan","text":"Using <tidy-select> expressions series span_structures, define spanned column names, label apply. span_structures can nested allow layered spanning headers.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/col_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define the Column Plan & Span Structures — col_plan","text":"","code":"col_plan(...)  span_structure(label, ...)"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/col_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define the Column Plan & Span Structures — col_plan","text":"... col_plan span_structure, <tidy-select> arguments, unquoted expressions separated commas, span_structures. Span_structures can nest additional span_structures. use span_structure, can one defined \"column\" tfrmt. label text label span across defined columns","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/col_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define the Column Plan & Span Structures — col_plan","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  ## select col_1 as the first column, remove col_last, then create spanning ## structures that have multiple levels spanning_col_plan_ex <- col_plan(  col_1,  -col_last,  span_structure(    label = \"Top Label Level 1\",    span_structure(      label = \"Second Label Level 1.1\",      col_3, col_4    ),    span_structure(      label = \"Second Label Level 1.2\",      starts_with(\"B\")    ),    col_5  ),  span_structure(    label = \"Top Label Level 2\",    col_6, col_7  ) )  ## select my_col_1 as the first column, then ## rename col_2 to new_col_1 and put as the ## second column, then select the rest of the columns renaming_col_plan_ex <- col_plan(    my_col_1,    new_col_1 = col_2,    everything()    )"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/demog_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Demography Analysis Results Data — demog_data","title":"Demography Analysis Results Data — demog_data","text":"dataset containing results needed demography table. Using CDISC pilot data.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/demog_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demography Analysis Results Data — demog_data","text":"","code":"demog_data"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/demog_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Demography Analysis Results Data — demog_data","text":"data frame 386 rows 7 variables: rowlbl1 highest level row labels rowlbl2 specific row labels param parameter explain value grp grouping column used distinquish continous categorical ord1 controls ordering ord2 ordering controls column column names value values put table","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/efficacy_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficacy Analysis Results Data — efficacy_data","title":"Efficacy Analysis Results Data — efficacy_data","text":"dataset containing results needed Efficacy table. Using CDISC pilot data ADAS-Cog(11).","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/efficacy_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficacy Analysis Results Data — efficacy_data","text":"","code":"efficacy_data"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/efficacy_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Efficacy Analysis Results Data — efficacy_data","text":"data frame 70 rows 7 variables: group highest level row labels label specific row labels column column names param parameter explain value value values put table ord1 controls ordering ord2 ordering controls","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/element_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Element block — element_block","title":"Element block — element_block","text":"Element block","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/element_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Element block — element_block","text":"","code":"element_block(   post_space = c(NULL, \" \", \"-\"),   background_fill = NULL,   border = c(NULL, \"outline\", \"bottom\") )"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/element_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Element block — element_block","text":"post_space Option create new line group block; specified characters fill cells background_fill Option fill background group block border Option add solid border group block (rectangle just bottom border)","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/element_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Element block — element_block","text":"element block object","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tlang/reference/element_row_grp_loc.html","id":null,"dir":"Reference","previous_headings":"","what":"Element Row Group Location — element_row_grp_loc","title":"Element Row Group Location — element_row_grp_loc","text":"Element Row Group Location","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/element_row_grp_loc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Element Row Group Location — element_row_grp_loc","text":"","code":"element_row_grp_loc(   location = c(\"indented\", \"spanning\", \"column\", \"noprint\"),   indent = \"  \" )"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/element_row_grp_loc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Element Row Group Location — element_row_grp_loc","text":"location Location row group labels. Specifying 'indented' combines group label variables single column sub-group indented parent. 'spanning' 'column' retain highest level group variable column combine remaining group label variables single column sub-groups indented. highest level group column either printed spanning header column gt. Finally, 'noprint' option allows user suppress group values printed. indent string number spaces want indent","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tlang/reference/frmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Table Value Formatting — frmt","title":"Table Value Formatting — frmt","text":"functions provide abstracted way approach define formatting table contents. defining way, formats can layered specific general cell styling can done first. frmt() base definition format. defines spacing, rounding, missing behavior. frmt_combine() used two rows need combined single cell table. rows needs defined frmt() need share label. frmt_when() used rows format behavior dependent value written similarly dplyr::case_when(). left hand side equation \"TRUE\"default case right hand side boolean expression \">50\".","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/frmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table Value Formatting — frmt","text":"","code":"frmt(expression, missing = NULL, scientific = NULL, ...)  frmt_combine(expression, ..., missing = NULL)  frmt_when(...)"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/frmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table Value Formatting — frmt","text":"expression string representing intended format. See details: expression detailed description. missing value missing intended formatted, value place. See details: missing detailed description. scientific string representing intended scientific notation appended expression. Ex. \"e^XX\" \" x10^XX\". ... See details: ... detailed description.","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tlang/reference/frmt.html","id":"expression","dir":"Reference","previous_headings":"","what":"expression","title":"Table Value Formatting — frmt","text":"frmt() numbers represented \"x\". additional character printed -. additional X's present left decimal point value, represented spaces. frmt_combine() defines parameters combined glue::glue() statement. Parameters need equal values param column defined expression \"param1 param2\".","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/frmt.html","id":"missing","dir":"Reference","previous_headings":"","what":"missing","title":"Table Value Formatting — frmt","text":"frmt() Value enter value missing. NULL, value \"\". frmt_combine() defines values combined missing. NULL value \"\".","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/frmt.html","id":"-","dir":"Reference","previous_headings":"","what":"...","title":"Table Value Formatting — frmt","text":"frmt() dots future extensions must empty. frmt_combine() accepts named arguments defining frmt() applied parameters combined. frmt_when()accepts series equations separated commas, similar dplyr::case_when(). left hand side equation \"TRUE\"default case right hand side boolean expression \">50\". right hand side equation frmt() apply left side evaluates TRUE.","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tlang/reference/frmt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table Value Formatting — frmt","text":"","code":"frmt(\"XXX %\") #> <frmt | Expression: `XXX %` >  frmt(\"XX.XXX\") #> <frmt | Expression: `XX.XXX` >  frmt(\"xx.xx\", scientific = \"x10^xx\") #> <frmt | Expression: `xx.xx` >  frmt_combine(  \"{param1} {param2}\",  param1 = frmt(\"XXX %\"),  param2 = frmt(\"XX.XXX\") ) #> < frmt_combine | Expression: `{param1} {param2}` >  frmt_when(   \">3\" ~ frmt(\"(X.X%)\"),   \"<=3\" ~ frmt(\"Undetectable\")   ) #> < frmt_when |   #>   >3 ~ <frmt | Expression: `(X.X%)` > #>   <=3 ~ <frmt | Expression: `Undetectable` >  #> ` >  frmt_when(   \"==100\"~ frmt(\"\"),   \"==0\"~ \"\",   \"TRUE\" ~ frmt(\"(XXX.X%)\")   ) #> < frmt_when |   #>   ==100 ~ <frmt | Expression: `` > #>   ==0 ~  #>   TRUE ~ <frmt | Expression: `(XXX.X%)` >  #> ` >"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/frmt_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Structure Object — frmt_structure","title":"Format Structure Object — frmt_structure","text":"Function needed create frmt_structure object, building block body_plan(). specifies rows format applied .","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/frmt_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Structure Object — frmt_structure","text":"","code":"frmt_structure(group_val = \".default\", label_val = \".default\", ...)"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/frmt_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Structure Object — frmt_structure","text":"group_val string named list strings represent value group given frmt implemented label_val string represent value label given frmt implemented ... either frmt(), frmt_combine(), frmt_when() object. can named also specify parameter value","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tlang/reference/frmt_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Structure Object — frmt_structure","text":"","code":"sample_structure <- frmt_structure(           group_val = c(\"group1\"),           label_val = \".default\",           frmt(\"XXX\")         )"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/frmt_utils.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if input is a frmt — is_frmt","title":"Check if input is a frmt — is_frmt","text":"Check input frmt Check input frmt_combine Check input frmt_structure Check input row_grp_structure","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/frmt_utils.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if input is a frmt — is_frmt","text":"","code":"is_frmt(x)  is_frmt_combine(x)  is_frmt_structure(x)  is_row_grp_structure(x)"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/frmt_utils.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if input is a frmt — is_frmt","text":"x Object check","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/layer_tfrmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer tfrmt objects together — layer_tfrmt","title":"Layer tfrmt objects together — layer_tfrmt","text":"Provide utility layering tfrmt objects together. tmft's values, preferentially choose second tfrmt default. alternative piping together tfrmts","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/layer_tfrmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer tfrmt objects together — layer_tfrmt","text":"","code":"layer_tfrmt(x, y, ..., join_body_plans = TRUE)"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/layer_tfrmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer tfrmt objects together — layer_tfrmt","text":"x, y tfrmt objects need combined ... arguments passed layer_tfrmt_arg functions combining different tfrmt elements join_body_plans body styles uniquely combined, just keep styling y","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/layer_tfrmt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer tfrmt objects together — layer_tfrmt","text":"","code":"tfrmt_1 <- tfrmt(title = \"title1\")  tfrmt_2 <- tfrmt(title = \"title2\",subtitle = \"subtitle2\")  layered_table_format <- layer_tfrmt(tfrmt_1, tfrmt_2)"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/print_mock_gt.html","id":null,"dir":"Reference","previous_headings":"","what":"Print mock table to GT — print_mock_gt","title":"Print mock table to GT — print_mock_gt","text":"Print mock table GT","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/print_mock_gt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print mock table to GT — print_mock_gt","text":"","code":"print_mock_gt(tfrmt, .data = NULL, .default = 1:3, n_cols = 3)"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/print_mock_gt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print mock table to GT — print_mock_gt","text":"tfrmt tfrmt mock table based .data Optional data. missing, group values, labels values parameter values estimated based tfrmt .default sequence replace default values dataset provided n_cols number columns used mock data provided","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/print_mock_gt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print mock table to GT — print_mock_gt","text":"stylized gt object","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/print_to_gt.html","id":null,"dir":"Reference","previous_headings":"","what":"Print to gt — print_to_gt","title":"Print to gt — print_to_gt","text":"Print gt","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/print_to_gt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print to gt — print_to_gt","text":"","code":"print_to_gt(tfrmt, .data)"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/print_to_gt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print to gt — print_to_gt","text":"tfrmt tfrmt object dictate structure table .data Data style order make table","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/print_to_gt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print to gt — print_to_gt","text":"stylized gt object","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/row_grp_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Row Group Plan — row_grp_plan","title":"Row Group Plan — row_grp_plan","text":"Define look table groups output. function allows add spaces blocks allows control groups viewed whether span entire table nested column.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/row_grp_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row Group Plan — row_grp_plan","text":"","code":"row_grp_plan(..., label_loc = element_row_grp_loc(location = \"indented\"))"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/row_grp_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row Group Plan — row_grp_plan","text":"... Row group structure objects separated commas label_loc Boolean specifying whether top-level group spanning label","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/row_grp_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row Group Plan — row_grp_plan","text":"row_grp_plan object","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tlang/reference/row_grp_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Row Group Plan — row_grp_plan","text":"","code":"## single grouping variable example   sample_grp_plan <- row_grp_plan(     row_grp_structure(group_val = c(\"A\",\"C\"), element_block(post_space = \"---\")),     row_grp_structure(group_val = c(\"B\"), element_block(post_space = \" \")),     label_loc = element_row_grp_loc(location = \"column\")   )    ## example with multiple grouping variables   sample_grp_plan <- row_grp_plan(      row_grp_structure(group_val = list(grp1 = \"A\", grp2 = \"b\"), element_block(post_space = \" \")),      label_loc = element_row_grp_loc(location = \"spanning\")      )"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/row_grp_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Row Group Structure Object — row_grp_structure","title":"Row Group Structure Object — row_grp_structure","text":"Function needed create row_grp_structure object, building block row_grp_plan()","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/row_grp_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row Group Structure Object — row_grp_structure","text":"","code":"row_grp_structure(group_val = \".default\", ...)"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/row_grp_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row Group Structure Object — row_grp_structure","text":"group_val string named list strings represent value group given frmt implemented ... element_block() object","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tlang/reference/tfrmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Table Format — tfrmt","title":"Table Format — tfrmt","text":"tfrmt, \"table format\" way pre-define non-data components tables, data handled added: .e. title, footers, headers, span headers, cell formats. addition, tfrmt's can layered, building one table format next. cases one value can used, newly defined tfrmt accepts latest tfrmt","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/tfrmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table Format — tfrmt","text":"","code":"tfrmt(   tfrmt_obj,   group = vars(),   label = quo(),   param = quo(),   values = quo(),   column = vars(),   title,   subtitle,   footer,   row_grp_plan,   body_plan,   col_align,   sorting_cols,   page_vars,   row_group,   col_plan,   col_widths,   ... )"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/tfrmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table Format — tfrmt","text":"tfrmt_obj tfrmt object base new format group grouping vars input dataset label label column input dataset param param column input dataset values values column input dataset column column names column input dataset title title table subtitle subtitle table footer footers table row_grp_plan plan row groups blocking. Takes row_grp_plan body_plan combination formatting input data col_align align columns? left, right, decimal sorting_cols columns determine sorting output page_vars column determine paging table (splitting) row_group columns determine row groups col_plan col_plan object used select, rename, nest columns col_widths special column widths. otherwise fits contents ... dots future extensions must empty.","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/theme_element.html","id":null,"dir":"Reference","previous_headings":"","what":"Element Align — element_align","title":"Element Align — element_align","text":"Element Align","code":""},{"path":"https://gsk-biostatistics.github.io/tlang/reference/theme_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Element Align — element_align","text":"","code":"element_align(align = \"left\", col = vars())"},{"path":"https://gsk-biostatistics.github.io/tlang/reference/theme_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Element Align — element_align","text":"align Alignment applied column. Acceptable values: \"left\" left alignment, \"right\" right alignment\", supply vector character(s) align . case character alignment, one character provided, alignment based first occurrence characters. alignment based white space, leading white spaces ignored. col Variable align ","code":""},{"path":[]}]
