[{"path":"https://gsk-biostatistics.github.io/tfrmt/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tfrmt/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright 2022 GlaxoSmithKline Research & Development Limited  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/body_plan.html","id":"formatting-functions","dir":"Articles","previous_headings":"","what":"Formatting functions","title":"Body Plan","text":"following formatting functions may passed frmt_structure:","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/body_plan.html","id":"format-frmt","dir":"Articles","previous_headings":"Formatting functions","what":"Format (frmt)","title":"Body Plan","text":"frmt object used specify value appear table: number digits, white space padding, extra characters, percentages parentheses. pharma, common convention use x’s represent data values mock tables. , frmt complies familiar convention. example: frmt(expression = \"xxx.x%\") displays 3.829765 ” 3.8%” (note leading whitespace!) frmt(expression = \"xxx.x%\", missing = \"Missing\") displays NA “Missing” frmt(expression = \"xxx.x\", scientific = \" x10^x\") displays 1234.5678 ” 1.2 x10^ 3”","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/body_plan.html","id":"format-when-frmt_when","dir":"Articles","previous_headings":"Formatting functions","what":"Format when (frmt_when)","title":"Body Plan","text":"frmt_when way format cells conditional values. frmt_when similar dplyr::case_when /else statements. condition, left hand side expression string right hand side formatting applied. example, following code allows users conditionally format upper lower bounds p-values: cause values 0.0347, 1.00, 0.000001 appear “0.035”, “>0.99”, “<0.001”.","code":"frmt_when(     \">0.99\" ~ \">0.99\",     \"<0.001\" ~ \"<0.001\",     TRUE ~ frmt(\"x.xxx\") )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/body_plan.html","id":"format-combine-frmt_combine","dir":"Articles","previous_headings":"Formatting functions","what":"Format combine (frmt_combine)","title":"Body Plan","text":"frmt_combine used combine multiple values single cell. Within frmt_combine, values referenced according values param variable. Glue package syntax leveraged help user easily define want combined values appear. , individual data values may formatted using frmt frmt_when. examples: frmt_combine(\"({lower}, {upper})\", lower = frmt(\"xx.x\"), upper = frmt(\"xx.x\")) combine lower upper bounds confidence interval : “(xx.x, xx.x)”. frmt_combine(\"{n} ({pct})\", n = frmt(\"xxx\"), pct = frmt(\"xx.x\", missing = \"\")) print “n (%)” percentage non-missing, just “n” otherwise. frmt_combine(\"{n} ({pct})\", n = frmt(\"xxx\"), pct = frmt(\"xx.x\", missing = \"\"), missing = \"\") print “n (%)” percentage non-missing, “n” percentage missing n non-missing, “” n pct missing.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/body_plan.html","id":"location-options","dir":"Articles","previous_headings":"","what":"Location options","title":"Body Plan","text":"variety ways user specify formatting locations: group variable values /label values, param value. Let’s take look various methods , ranging least specific specific. important detail passing value “.default” group label means format applied values within group(s) label variables.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/body_plan.html","id":"table-wide","dir":"Articles","previous_headings":"Location options","what":"Table-wide","title":"Body Plan","text":"user can specify formatting entire table : frmt(group = \".default\", label = \".default\", frmt(\"xx.x\"))","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/body_plan.html","id":"param-specific","dir":"Articles","previous_headings":"Location options","what":"Param-specific","title":"Body Plan","text":"formatting specific values param variable, frmt objects must named according param. following code format values param value equals “pval”, regardless group, label, column value. frmt(group = \".default\", label = \".default\", pval = frmt(\"x.xxx\")) , param names required using frmt_combine.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/body_plan.html","id":"label-specific","dir":"Articles","previous_headings":"Location options","what":"Label-specific","title":"Body Plan","text":"formatting specific values label variable, values passed label argument. following code format values label variable equals “mylab1” “mylab2”, regardless group, param, column value. frmt(group = \".default\", label = c(\"mylab1\",\"mylab2\"), frmt(\"x.xxx\"))","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/body_plan.html","id":"group-specific","dir":"Articles","previous_headings":"Location options","what":"Group-specific","title":"Body Plan","text":"formatting specific values group variable, values passed group argument. Note user may multiple group variables. case multiple group variables, specifications passed named list (named according group variables). following code format values group1=“” group2=“B”, regardless label, param, column value: frmt(group = list(group1 = \"\", group2 = \"B\"), label = \".default\", frmt(\"x.xxx\"))","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/body_plan.html","id":"column-specific","dir":"Articles","previous_headings":"Location options","what":"Column-specific","title":"Body Plan","text":"case formatting needs differ columns within given group/label/param level, user need incorporate column-level information param value. example, two columns, col1 col2, want mean col1 rounded differently col2, creating param column allow us differentiate mean values formatting: param = c(\"col1_mean\", \"col2_mean\").","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/body_plan.html","id":"multiple-specifications","dir":"Articles","previous_headings":"Location options","what":"Multiple specifications","title":"Body Plan","text":"user can specific ’d like, providing combination. example, following code format values group1=“”, group2=“B”, label variable equals “mylab” param variable equals “mean”: frmt(group = list(group1 = \"\", group2 = \"B\"), label = \"mylab\", mean = frmt(\"x.xxx\")) NOTE: tfrmt_sigdig() function provides ability create tfrmt auto-precision based significance group/label value.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/body_plan.html","id":"layering-format-structures","dir":"Articles","previous_headings":"","what":"Layering format structures","title":"Body Plan","text":"user may provide many frmt_structure objects needed. important note overlapping frmt_structure objects, last one specified supersede previous. CDISC demographics table example, following frmt_structures needed cover values:","code":"body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(\"{n} {pct}\",                                 n = frmt(\"XXX\"),                                 pct = frmt_when(\"==100\" ~ \"\",                                                 \"==0\" ~ \"\",                                                 TRUE ~ frmt(\"(XX.X %)\"))                    )     ),     frmt_structure(group_val = \".default\", label_val = \"n\", frmt(\"xxx\")),     frmt_structure(group_val = \".default\", label_val = c(\"Mean\", \"Median\", \"Min\",\"Max\"), frmt(\"xxx.x\")),     frmt_structure(group_val = \".default\", label_val = \"SD\", frmt(\"xxx.xx\")),     frmt_structure(group_val = \".default\", label_val = \".default\", p = frmt_when(\">0.99\" ~ \">0.99\",                                                                                  \"<0.001\" ~ \"<0.001\",                                                                                  TRUE ~ frmt(\"x.xxx\", missing = \"\"))) )"},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/building_mocks.html","id":"making-a-simple-mock-table","dir":"Articles","previous_headings":"","what":"Making a simple mock table","title":"Building Mocks","text":"count value percent value combined cell count value formatted maximum three digits percent value formatted two digits rounded one decimal place First, explore create mock table using tfrmt object alone. print_mock_gt() function parameters .default n_cols; options inform number rows columns mock table. example, use default values (3) print three row labels three columns. may enter different arguments parameters alter number rows columns shown. may notice message appears console - error, reminder include value parameter tfrmt specification using print_to_gt() function. like add little customisation supplying mock data can utilise crossing() function tidyr package. may also wish add integer column specifying order layer complex tables. example: time df data added print_mock_gt() function, now can see label column names changed. can adjust column names structure using col_plan parameter. accepts selection helpers tidyselect package. example, can select everything() remove columns -starts_with(\"ord\"). can also use span_structure() provide specific information trying order across multiple columns. Note: tfrmt_n_pct() function used place defining body_plan(). function returns tfrmt formatting previous example, information layering tfrmts see vignette. add title subtitle, pass arguments respective parameters.","code":"tfrmt_spec <- tfrmt(   # Specify columns in the data   label = label,   column = c(treatment, column),    param = param,      # Specify body plan   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(                      \"{count} {percent}\",                      count = frmt(\"xxx\"),                      percent = frmt_when(\"==100\"~ frmt(\"\"),                                          \"==0\"~ \"\",                                          \"TRUE\" ~ frmt(\"(xx.x%)\"))))     )) # Print table print_mock_gt(tfrmt_spec) #> Message: `tfrmt` will need `value` value to `print_to_gt` when data is avaliable df <- crossing(label = c(\"label 1\", \"label 2\", \"label 3\"),                treatment = c(\"Treatment\",\"Treatment\",\"Treatment\",\"Placebo\"),                column = c(\"trt1\", \"trt2\", \"trt1&trt2\", \"pl\"),                param = c(\"count\", \"percent\")) %>%   # Assign numerical order (optional - keep if using `sorting_cols` parameter)   mutate(ord1 = rep(seq(1:length(unique(.$label))), each = nrow(.)/length(unique(.$label)) ))  df #> # A tibble: 48 × 5 #>    label   treatment column    param    ord1 #>    <chr>   <chr>     <chr>     <chr>   <int> #>  1 label 1 Placebo   pl        count       1 #>  2 label 1 Placebo   pl        percent     1 #>  3 label 1 Placebo   trt1      count       1 #>  4 label 1 Placebo   trt1      percent     1 #>  5 label 1 Placebo   trt1&trt2 count       1 #>  6 label 1 Placebo   trt1&trt2 percent     1 #>  7 label 1 Placebo   trt2      count       1 #>  8 label 1 Placebo   trt2      percent     1 #>  9 label 1 Treatment pl        count       1 #> 10 label 1 Treatment pl        percent     1 #> # ℹ 38 more rows # Print table print_mock_gt(tfrmt_spec, df) #> Message: `tfrmt` will need `value` value to `print_to_gt` when data is avaliable tfrmt_spec <- tfrmt_n_pct(n = \"count\", pct = \"percent\") %>%    tfrmt(   # Specify columns in the data   label = label,   column = c(treatment, column),    param = param,   value = value,      # Specify column structure     col_plan = col_plan(       -starts_with(\"ord\"),       span_structure(         treatment = \"Treatment\",         column = c(           T1 = trt1,           T2 = trt2,           `T1&T2`= `trt1&trt2`         )       ),       span_structure(         treatment = \"Placebo\",         column = c(PL = pl)         )       )   )    print_mock_gt(tfrmt_spec, df) tfrmt_spec <- tfrmt_n_pct(n = \"count\", pct = \"percent\") %>%    tfrmt(     # Specify title, subtitle      title = \"Table Name\",     subtitle = \"Study ID: GSK12345\",           # Specify columns in the data     label = label,     column = c(treatment, column),      param = param,     value = value,     # Specify column structure     col_plan = col_plan(       -starts_with(\"ord\"),       span_structure(         treatment = \"Treatment\",         column = c(T1 = trt1,                    T2 = trt2,                    `T1&T2` = `trt1&trt2`)       ),       span_structure(         treatment = \"Placebo\",         column = c(PL = pl))     )   )    print_mock_gt(tfrmt_spec, df)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/building_mocks.html","id":"making-more-complex-mock-tables","dir":"Articles","previous_headings":"","what":"Making more complex mock tables","title":"Building Mocks","text":"Now let’s make slightly complex table customise value formats groups, labels columns. Extra features titles, arranging column structure avoided keep code simple possible.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/building_mocks.html","id":"different-value-formatting-between-columns","dir":"Articles","previous_headings":"Making more complex mock tables","what":"Different value formatting between columns","title":"Building Mocks","text":"used crossing() function twice differing columns bound using bind_rows(). tfrmt specification previous example one additional frmt_structure accounts value formatting ’d like apply new columns. Note ’d like print select columns dataset can simply filter df normally within print_mock_gt() function. example, df %>% filter(!stringr::str_detect(column, \"^Risk Diff\") used remove values start “Risk Diff”. Alternatively, can make use col_plan() directly specify columns wouldn’t like display. decided select placebo treatment columns.","code":"df <- bind_rows(   crossing(label = c(\"label 1\", \"label 2\", \"label 3\"),            column = c(\"T1\", \"T2\", \"PL\"),            param = c(\"count\", \"percent\")),   crossing(label = c(\"label 1\", \"label 2\", \"label 3\"),            column = c(\"Risk Diff T1-PL\", \"Risk Diff T2-PL\"),            param = c(\"num\", \"lower\", \"upper\"))) %>%   arrange_all()  df #> # A tibble: 36 × 3 #>    label   column          param   #>    <chr>   <chr>           <chr>   #>  1 label 1 PL              count   #>  2 label 1 PL              percent #>  3 label 1 Risk Diff T1-PL lower   #>  4 label 1 Risk Diff T1-PL num     #>  5 label 1 Risk Diff T1-PL upper   #>  6 label 1 Risk Diff T2-PL lower   #>  7 label 1 Risk Diff T2-PL num     #>  8 label 1 Risk Diff T2-PL upper   #>  9 label 1 T1              count   #> 10 label 1 T1              percent #> # ℹ 26 more rows tfrmt_n_pct(n = \"count\", pct = \"percent\") %>%    tfrmt(   # Specify columns in the data   label = \"label\",   param = \"param\",   column = \"column\",   value = value,      # Specify body plan   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(                      \"{num} ({lower}, {upper})\",                      num = frmt(\"xx.x\"),                      lower = frmt_when(\"==100\"~ frmt(\"\"),                                        \"==0\"~ \"\",                                        \"TRUE\" ~ frmt(\"xx.x%\")),                      upper = frmt_when(\"==100\"~ frmt(\"\"),                                        \"==0\"~ \"\",                                        \"TRUE\" ~ frmt(\"xx.x%\"))))     ),   col_plan = col_plan(     -starts_with(\"ord\"))   ) %>%   print_mock_gt(df) tfrmt_n_pct(n = \"count\", pct = \"percent\") %>%    tfrmt(   # Specify columns in the data   label = \"label\",   param = \"param\",   column = \"column\",   value = value,      # Specify body plan   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(                      \"{num} ({lower}, {upper})\",                      num = frmt(\"xx.x\"),                      lower = frmt_when(\"==100\"~ frmt(\"\"),                                        \"==0\"~ \"\",                                        \"TRUE\" ~ frmt(\"xx.x%\")),                      upper = frmt_when(\"==100\"~ frmt(\"\"),                                        \"==0\"~ \"\",                                        \"TRUE\" ~ frmt(\"xx.x%\"))))     ),   col_plan = col_plan(     label, PL, T1, T2     )   ) %>%   print_mock_gt(df)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/building_mocks.html","id":"same-value-formatting-but-1-grouping-level","dir":"Articles","previous_headings":"Making more complex mock tables","what":"Same value formatting but 1 grouping level","title":"Building Mocks","text":"example can see dataset contains one group variable (inside crossing()). Hence, account adding name group column group parameter tfrmt().","code":"df <- crossing(   group = c(\"group 1\", \"group 2\"),   label = c(\"label 1\", \"label 2\"),   column = c(\"PL\", \"T1\", \"T2\"),   param = c(\"count\", \"percent\")) %>%   arrange_all()  tfrmt_n_pct(n = \"count\", pct = \"percent\") %>%    tfrmt(   group = group,   label = label,   column = column,   param = param,   value = value,   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = \".default\",                       element_block(post_space = \"   \")) )) %>%   print_mock_gt(df)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/building_mocks.html","id":"different-value-formatting-but-1-grouping-level-using-label_val","dir":"Articles","previous_headings":"Making more complex mock tables","what":"Different value formatting but 1 grouping level (using label_val)","title":"Building Mocks","text":"time want specific change formatting values row label. Given label possesses different parameter values example, bind together multiple instances crossing() different label-parameter combinations, keeping rest . tfrmt specification leverage label_val parameter frmt_structure specify particular formatting label. Usually, default argument .default kept function attempt logically structure table best can. may notice “n”, “Mean (SD)” “Median (Range)” used instead generic “label #” names - just illustration row labels .","code":"df <- bind_rows(   crossing(group = c(\"group 1\", \"group 2\"),            label = c(\"n\"),            column = c(\"PL\", \"T1\", \"T2\"),            param = c(\"count\")),   crossing(group = c(\"group 1\", \"group 2\"),            label = c(\"Mean (SD)\"),            column = c(\"PL\", \"T1\", \"T2\"),            param = c(\"mean\", \"sd\")),   crossing(group = c(\"group 1\", \"group 2\"),            label = c(\"Median (Range)\"),            column = c(\"PL\", \"T1\", \"T2\"),            param = c(\"min\", \"max\", \"median\"))) %>%   arrange_all()  tfrmt(   # Specify columns in the data   group = group,   label = label,   column = column,   param = param,   value = value,   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = \".default\",                       element_block(post_space = \"   \")) ),    # Specify body plan   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \"n\", frmt(\"xx\")),     frmt_structure(group_val = \".default\", label_val = \"Median (Range)\",                    frmt_combine(\"{median} ({min},{max})\",                                 median = frmt(\"xx.x\"),                                 min = frmt(\"xx\"),                                 max = frmt(\"xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"Mean (SD)\",                    frmt_combine(\"{mean} ({sd})\",                                 mean = frmt(\"xx.x\"),                                 sd = frmt(\"xx.xx\"), missing = \" \"))   )) %>%   print_mock_gt(df)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/building_mocks.html","id":"different-value-formatting-but-1-grouping-level-using-group_val","dir":"Articles","previous_headings":"Making more complex mock tables","what":"Different value formatting but 1 grouping level (using group_val)","title":"Building Mocks","text":"Similarly, want change value formatting group can use group_val parameter frmt_structure. Note row_group_plan parameter used detail ’d like groups indented. information please see “Row group plan” article.","code":"df <- bind_rows(   crossing(group = c(\"group 1\"),            label = c(\"label 1\", \"label 2\"),            column = c(\"PL\", \"T1\", \"T2\"),            param = c(\"mean\", \"sd\")),   crossing(group = c(\"group 2\"),            label = c(\"label 1\", \"label 2\"),            column = c(\"PL\", \"T1\", \"T2\"),            param = c(\"median\", \"min\", \"max\"))) %>%   arrange_all()  tfrmt(   # Specify columns in the data   group = group,   label = label,   column = column,   param = param,   value = value,   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = list(\"group\" = c(\"group 1\", \"group 2\")),                       element_block(post_space = \"   \")) ),    # Specify body plan   body_plan = body_plan(     frmt_structure(group_val = \"group 1\", label_val = \".default\",                    frmt_combine(\"{mean} ({sd})\",                                 mean = frmt(\"xx.x\"),                                 sd = frmt(\"xx.x\"))),     frmt_structure(group_val = \"group 2\", label_val = \".default\",                    frmt_combine(\"{median} ({min},{max})\",                                 median = frmt(\"xx\"),                                 min = frmt(\"xx\"),                                 max = frmt(\"xx\"), missing = \" \"))   )) %>%   print_mock_gt(df)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/building_mocks.html","id":"different-value-formatting-but-1-grouping-level-using-label_val-and-group_val","dir":"Articles","previous_headings":"Making more complex mock tables","what":"Different value formatting but 1 grouping level (using label_val and group_val)","title":"Building Mocks","text":"Using df , can make use group_val label_val simultaneously control value formatting group label/row. can see different formatting labels groups well within group. Within row_group_structure, ’d like depict formatting one group need supply named list group_val. Furthermore, apply formatting one label can supply label names within c().","code":"tfrmt(   # Specify columns in the data   group = group,   label = label,   column = column,   param = param,   value = value,   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = list(\"group\" = c(\"group 1\", \"group 2\")),                       element_block(post_space = \"   \")) ),    # Specify body plan   body_plan = body_plan(     frmt_structure(group_val = \"group 1\", label_val = \"label 1\",                    frmt_combine(\"{mean} ({sd})\",                                 mean = frmt(\"xx\"),                                 sd = frmt(\"xx\"))),     frmt_structure(group_val = \"group 1\", label_val = \"label 2\",                    frmt_combine(\"{mean} ({sd})\",                                 mean = frmt(\"xx.x\"),                                 sd = frmt(\"xx.x\"))),     frmt_structure(group_val = \"group 2\", label_val = c(\"label 1\", \"label 2\"),                    frmt_combine(\"{median} ({min},{max})\",                                 median = frmt(\"xx\"),                                 min = frmt(\"xx\"),                                 max = frmt(\"xx\"), missing = \" \"))   )) %>%   print_mock_gt(df)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/building_mocks.html","id":"different-value-formatting-but-2-grouping-levels-using-group_val","dir":"Articles","previous_headings":"Making more complex mock tables","what":"Different value formatting but 2 grouping levels (using group_val)","title":"Building Mocks","text":"time two grouping levels parameters differ group level. Thus, two instances crossing() different grp1-param combinations. using one grouping level add group names group parameter c().","code":"df <- bind_rows(   crossing(grp1 = c(\"group 1.1\"),            grp2 = c(\"group 2.1\", \"group 2.2\"),            label = c(\"label 1\", \"label 2\"),            column = c(\"PL\", \"T1\", \"T2\"),            param = c(\"count\")),   crossing(grp1 = c(\"group 1.2\"),            grp2 = c(\"group 2.1\", \"group 2.2\"),            label = c(\"label 1\", \"label 2\"),            column = c(\"PL\", \"T1\", \"T2\"),            param = c(\"mean\", \"sd\"))) %>%   arrange_all()  tfrmt(   group = c(grp1, grp2),   label = label,   column = column,   param = param,   value = value,   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = \".default\",                       element_block(post_space = \"   \")) ),    body_plan = body_plan(     frmt_structure(group_val = list(\"grp1\" = \"group 1.1\",                                     \"grp2\" = c(\"group 2.1\", \"group 2.2\")), label_val = \".default\",                    frmt(\"xx\")),     frmt_structure(group_val = list(\"grp1\" = \"group 1.2\",                                     \"grp2\" = c(\"group 2.1\", \"group 2.2\")), label_val = \".default\",                    frmt_combine(\"{mean} ({sd})\",                                 mean = frmt(\"xx.x\"),                                 sd = frmt(\"xx.x\")))     )) %>%   print_mock_gt(df)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/col_plan.html","id":"simple-column-selection","dir":"Articles","previous_headings":"","what":"Simple Column Selection","title":"Column Plan","text":"case single column variable column spanners, col_plan behaves similarly dplyr::select. Let’s say want remove one columns: Just like dplyr::select, can also reorder, rename, remove columns, using tidyselect syntax ’d like: Unlike dplyr::select though, col_plan respects last time column defined plan. allows reordering/moving column end easily.","code":"tfrmt(   group = group,   label = label,   param = parm,   value = val,   column = my_col,   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"x\"))   ),   col_plan = col_plan(     -mycol5               ) ) %>%    print_to_gt(dat) tfrmt(   group = group,   label = label,   param = parm,   value = val,   column = my_col,   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"x\"))   ),   col_plan = col_plan(     group,      label,      starts_with(\"col\"),     new_col_3 = mycol3,       -mycol5               ) ) %>%    print_to_gt(dat) tfrmt(   group = group,   label = label,   param = parm,   value = val,   column = my_col,   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"x\"))   ),   col_plan = col_plan(     group,      label,      starts_with(\"col\"),     everything(),     col1            ) ) %>%    print_to_gt(dat)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/col_plan.html","id":"editing-and-moving-column-spanners","dir":"Articles","previous_headings":"","what":"Editing and Moving Column Spanners","title":"Column Plan","text":"Multiple column variables used form hierarchy column spanners column labels, driven order column variables. first variable specified represents highest level spanner, last variable specified represents lowest level column label. Let’s consider example dataset multiple column variables. dataset three tiers, span2 one unique value, span1 two unique values my_col 4 unique values. NA’s indicate spanning values. Similar case 1 column variable, user may remove rename values lowest level column variable within col_plan. edit move columns based column spanners, span_structure must used. want bring columns start “col” together, well rename mycol3 drop mycol5. Let’s suppose want move “col 4” column beginning also reorder “col1” “col2”. achieve , can use span_structure. span_structure allows specify value(s) given column column, specify order. can select \"col 4\" span1. use another span_strcture select \"col2\" \"col1\" my_col span1 equals \"col 1,2\",finally columns. Reordering multiple column variables simplest lowest level column variable contains unique values (.e., 1 value per column final table), like example . , isn’t always case take following example: table want ensure \"Treatment\" always \"Placebo\" \"mean\" comes \"sd\". can make one span_structure specifies order span level order my_col level. examples col_plans see examples unusual table vignettes.","code":"dat <- tribble(   ~group,     ~label,        ~span2,  ~span1,     ~my_col,    ~parm,   ~val,   \"g1\", \"rowlabel1\",  \"column cols\", \"cols 1,2\", \"col1\"  ,  \"value\",    1,   \"g1\", \"rowlabel1\",  \"column cols\", \"cols 1,2\", \"col2\"  ,  \"value\",    1,   \"g1\", \"rowlabel1\",             NA,         NA, \"mycol3\",  \"value\",    1,   \"g1\", \"rowlabel1\",  \"column cols\", \"col 4\"   , \"col4\"  ,  \"value\",    1,   \"g1\", \"rowlabel1\",             NA,         NA, \"mycol5\",  \"value\",    1,   \"g1\", \"rowlabel2\",  \"column cols\", \"cols 1,2\", \"col1\"  ,  \"value\",    2,   \"g1\", \"rowlabel2\",  \"column cols\", \"cols 1,2\", \"col2\"  ,  \"value\",    2,   \"g1\", \"rowlabel2\",             NA,        NA , \"mycol3\",  \"value\",    2,   \"g1\", \"rowlabel2\",  \"column cols\", \"col 4\"   , \"col4\"  ,  \"value\",    2,   \"g1\", \"rowlabel2\",             NA,         NA, \"mycol5\",  \"value\",    2,   \"g2\", \"rowlabel3\",  \"column cols\", \"cols 1,2\", \"col1\"  ,  \"value\",    3,   \"g2\", \"rowlabel3\",  \"column cols\", \"cols 1,2\", \"col2\"  ,  \"value\",    3,   \"g2\", \"rowlabel3\",             NA,         NA, \"mycol3\",  \"value\",    3,   \"g2\", \"rowlabel3\",  \"column cols\", \"col 4\"   , \"col4\"  ,  \"value\",    3,   \"g2\", \"rowlabel3\",             NA,         NA, \"mycol5\",  \"value\",    3, ) tfrmt(   group = group,   label = label,   param = parm,   value = val,   column = c(span2, span1, my_col),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"x\"))   ),   col_plan = col_plan(     group,     label,     starts_with(\"col\"),     new_col_3 = mycol3,     -mycol5   ) ) %>%    print_to_gt(dat) tfrmt(   group = group,   label = label,   param = parm,   value = val,   column = c(span2, span1, my_col),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"x\"))   ),   col_plan = col_plan(     group,      label,      span_structure(span1 = c(\"col 4\")),     span_structure(span1 = c(\"cols 1,2\"), my_col = c(\"col2\", \"col1\")),     everything(),     new_col_3 = mycol3,       -mycol5               ) ) %>%    print_to_gt(dat) dat <- tribble(   ~group,     ~label,     ~span ,  ~my_col,    ~parm,   ~val,   \"g1\",      \"stats\",  \"Placebo\" , \"sd\"     ,  \"sd\"  ,    1.435,   \"g1\",      \"stats\",  \"Placebo\" , \"mean\"   ,  \"mean\",    2.843,   \"g1\",      \"stats\",  \"Treatment\", \"mean\"   ,  \"mean\",    1.234,   \"g1\",      \"stats\",  \"Treatment\", \"sd\"     ,  \"sd\"  ,    2.123, ) tfrmt(   group = group,   label = label,   param = parm,   value = val,   column = c(span, my_col),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"x.xx\"))   ),   col_plan = col_plan(     group,      label,      span_structure(span = c(\"Treatment\", \"Placebo\"),                    my_col = c(\"mean\", \"sd\"))   ) ) %>%    print_to_gt(dat)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/col_style_plan.html","id":"style-structure","dir":"Articles","previous_headings":"","what":"Style Structure","title":"Column Style Plan","text":"col_style_structure four arguments: columns final table aligned, alignment desired, alignment type, widths apply columns. col_style_structure requires least one alignment width defined. Optionally can assigned . column values specified match contents column variable specified tfrmt object. multiple values provided column, last value used reference column. col_style_plan() applied data, recent alignment width applied data, careful adding new col_style_structure’s, output may change anticipated new element specific enough.","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/col_style_plan.html","id":"alignment-examples---character","dir":"Articles","previous_headings":"Alignment","what":"Alignment Examples - Character","title":"Column Style Plan","text":"Let’s take look alignment can applied example , contains variety different parameters formatted differently. Column alignment can improve table making easier read. Let’s start left-aligning p-value column. Notice providing col_style_plan, variables covered plan left-aligned default. alignment isn’t quite right < one value . Applying decimal alignment better fit: two columns, mix values represented. case, want align first set digits. words, align first instance decimal, comma, space: Finally, purpose demonstrating options, can align column differently (left, right, character three columns respectively):","code":"dat <- tribble(   ~label     , ~param, ~column    , ~ value,   ~ord,    \"n\"        ,\"n\"     , \"trt1\"     ,12,        1,    \"mean (sd)\",\"mean\"  , \"trt1\"     ,12.332837, 2,   \"mean (sd)\",\"sd\"    , \"trt1\"     ,4.3454547, 2,   \"median\"   ,\"median\", \"trt1\"     ,14,        3,    \"[q1, q3]\" ,\"q1\"    , \"trt1\"     ,10,        4,   \"[q1, q3]\" ,\"q3\"    , \"trt1\"     ,20,        4,   \"n\"        ,\"n\"     , \"trt2\"     ,24,        1,   \"mean (sd)\",\"mean\"  , \"trt2\"     ,15.438737, 2,   \"mean (sd)\",\"sd\"    , \"trt2\"     ,6.723827,  2,    \"median\"   ,\"median\", \"trt2\"     ,16,        3,    \"[q1, q3]\" ,\"q1\"    , \"trt2\"     ,11,        4,    \"[q1, q3]\" ,\"q3\"    , \"trt2\"     ,22,        4,   \"n\"        ,\"pval\"  , \"p-value\"  ,NA,        1,    \"mean (sd)\",\"pval\"  , \"p-value\"  ,0.00002,   2,    \"median\"   ,\"pval\"  , \"p-value\"  ,0.051211,  3,    \"[q1, q3]\" ,\"pval\"  , \"p-value\"  ,NA,        4) head(dat) #> # A tibble: 6 × 5 #>   label     param  column value   ord #>   <chr>     <chr>  <chr>  <dbl> <dbl> #> 1 n         n      trt1   12        1 #> 2 mean (sd) mean   trt1   12.3      2 #> 3 mean (sd) sd     trt1    4.35     2 #> 4 median    median trt1   14        3 #> 5 [q1, q3]  q1     trt1   10        4 #> 6 [q1, q3]  q3     trt1   20        4  tfrmt(   label = label,   column = column,   param = param,   value = value,   sorting_cols = c(ord),   col_plan = col_plan(-ord),    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt(\"xx\", missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"{mean} ({sd})\",                                  mean = frmt(\"xx.x\"),                                  sd = frmt(\"xx.xx\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"[{q1}, {q3}]\",                                  q1 = frmt(\"xx.x\"),                                  q3 = frmt(\"xx.x\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing = \"\")))   ) ) %>%    print_to_gt(dat) tfrmt(   label = label,   column = column,   param = param,   value = value,   sorting_cols = c(ord),   col_plan = col_plan(-ord),    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt(\"xx\", missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"{mean} ({sd})\",                                  mean = frmt(\"xx.x\"),                                  sd = frmt(\"xx.xx\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"[{q1}, {q3}]\",                                  q1 = frmt(\"xx.x\"),                                  q3 = frmt(\"xx.x\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing = \"\")))   ),    col_style_plan =  col_style_plan(     col_style_structure(col = `p-value`, align = \"left\", type = \"char\")   )   ) %>%    print_to_gt(dat) tfrmt(   label = label,   column = column,   param = param,   value = value,   sorting_cols = c(ord),   col_plan = col_plan(-ord),    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt(\"xx\", missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"{mean} ({sd})\",                                  mean = frmt(\"xx.x\"),                                  sd = frmt(\"xx.xx\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"[{q1}, {q3}]\",                                  q1 = frmt(\"xx.x\"),                                  q3 = frmt(\"xx.x\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing = \"\")))   ),    col_style_plan =  col_style_plan(     col_style_structure(col = `p-value`, align = c(\".\"), type = \"char\"))   ) %>%    print_to_gt(dat) tfrmt(   label = label,   column = column,   param = param,   value = value,   sorting_cols = c(ord),   col_plan = col_plan(-ord),    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt(\"xx\", missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"{mean} ({sd})\",                                  mean = frmt(\"xx.x\"),                                  sd = frmt(\"xx.xx\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"[{q1}, {q3}]\",                                  q1 = frmt(\"xx.x\"),                                  q3 = frmt(\"xx.x\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing = \"\")))   ),    col_style_plan =  col_style_plan(     col_style_structure(col = `p-value`, align = c(\".\"), type = \"char\"),     col_style_structure(col = starts_with(\"trt\"), align = c(\".\", \",\", \" \"), type = \"char\")     )   ) %>%    print_to_gt(dat) tfrmt(   label = label,   column = column,   param = param,   value = value,   sorting_cols = c(ord),   col_plan = col_plan(-ord),    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt(\"xx\", missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"{mean} ({sd})\",                                  mean = frmt(\"xx.x\"),                                  sd = frmt(\"xx.xx\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"[{q1}, {q3}]\",                                  q1 = frmt(\"xx.x\"),                                  q3 = frmt(\"xx.x\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing = \"\")))   ),    col_style_plan =  col_style_plan(     col_style_structure(col = `p-value`, align = c(\".\"), type = \"char\"),     col_style_structure(col = trt1, align = \"left\", type = \"char\"),     col_style_structure(col = trt2, align = \"right\", type = \"char\"))   ) %>%    print_to_gt(dat)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/col_style_plan.html","id":"alignment-examples---positional","dir":"Articles","previous_headings":"Alignment","what":"Alignment Examples - Positional","title":"Column Style Plan","text":"ability align across multiple characters /positions, positional alignment gives us flexibility. , also requires granular representation wish align values. instance, instead specifying alignment first decimal: align = \".\", provide character vector representation formatted cells vertical bars placed position wish align: align = c(\"xx|.x\", \"x|.x\"). example , can use feature align multiple decimal places: Behind scenes, {tfrmt} makes assumptions vertical bars translate alignment: characters left first “|” left-padded needed. characters right final “|” right-padded needed whitespace found, padding applied portion string important note creating mock table, align input cover scenarios observed provided data. helper function called display_val_frmts helps create align input based tfrmt object (specifically body_plan) provided data. output helper function bit code can copied modified adding vertical bars desired:","code":"tf <- tfrmt(   label = label,   column = column,   param = param,   value = value,   sorting_cols = c(ord),   col_plan = col_plan(-ord),    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt(\"xx\", missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"{mean} ({sd})\",                                  mean = frmt(\"xx.x\"),                                  sd = frmt(\"xx.xx\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"[{q1}, {q3}]\",                                  q1 = frmt(\"xx.x\"),                                  q3 = frmt(\"xx.x\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing = \"\")))   ),    col_style_plan =  col_style_plan(     col_style_structure(col = `p-value`, align = c(\".\"), type = \"char\"),     col_style_structure(col = starts_with(\"trt\"),                          align = c(\"xx|\",                                   \"xx|.x ( x|.xx)\",                                   \"[xx|.x, xx|.x]\"),                          type = \"pos\")   ) )   tf %>%  print_to_gt(dat) display_val_frmts(tfrmt = tf, .data = dat, col = vars(starts_with(\"trt\"))) #> c(\"xx\", #>   \"xx.x ( x.xx)\", #>   \"[xx.x, xx.x]\")"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/col_style_plan.html","id":"alignment-of-group-and-label-columns","dir":"Articles","previous_headings":"Alignment","what":"Alignment of group and label columns","title":"Column Style Plan","text":"time, group label columns left aligned default. user can adjust alignment columns gt directly.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/col_style_plan.html","id":"alignment-via-body_plan","dir":"Articles","previous_headings":"Alignment","what":"Alignment via body_plan","title":"Column Style Plan","text":"noted simple cases, user can achieve desired alignment via frmts body_plan. frmt specifications allow us pad values desired length. example, frmt(xxx) ensure values fewer 3 digits padded accordingly: 23 become ” 23” 9 become ” 9”. straightforward table values similar scales, may sufficient. However many cases user may desire control alignment col_style_plan preferred method.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/col_style_plan.html","id":"width","dir":"Articles","previous_headings":"","what":"Width","title":"Column Style Plan","text":"Width set specific value number characters wide column allowed . value specified passing character numeric value “width” argument col_style_structure, taking format “##” ##, “##” number characters. Width can applied columns table.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/col_style_plan.html","id":"example","dir":"Articles","previous_headings":"Width","what":"Example","title":"Column Style Plan","text":"Continuing example alignment, set widths columns table. “label” output table, can apply widths column well.","code":"tfrmt(   label = label,   column = column,   param = param,   value = value,   sorting_cols = c(ord),   col_plan = col_plan(-ord),    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt(\"xx\", missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"{mean} ({sd})\",                                  mean = frmt(\"xx.x\"),                                  sd = frmt(\"xx.xx\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     frmt_combine(\"[{q1}, {q3}]\",                                  q1 = frmt(\"xx.x\"),                                  q3 = frmt(\"xx.x\"),                                 missing=\" \")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing = \"\")))   ),    col_style_plan =  col_style_plan(     col_style_structure(col = label, width = \"10\"),     col_style_structure(col = `p-value`, align = c(\".\"), width = \"10\"),     col_style_structure(col = trt1, align = \"left\", width = \"5\"),     col_style_structure(col = trt2, align = \"right\", width = \"5\"))   ) %>%    print_to_gt(dat)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/examples.html","id":"demography-table","dir":"Articles","previous_headings":"","what":"Demography Table","title":"Examples","text":"demography table going use data_demog, example analysis results dataset found package, based CDISC pilot data. dataset two different row label columns, rowlbl1 rowlbl2 building table group row labels. also two order columns used set row order output. single column define table’s columns (multiple column columns used column spanning). Finally param column, value column additional grouping column, grp, can use complex formatting. mock going match looks like : table, three columns treatment groups, total column groups combined, p-value column. table also contains mix categorical continuous analysis. first thing going building tfrmt specify columns makes table, isn’t nice table definitely doesn’t match mock. let’s start formatting numbers. going build body_plan add tfrmt. fairly quick explanation body_plans like information see vignettes(\"Body Plan\") Body plans made series frmt_stuctures frmt_stucture represents formatting cell within table. order frmt_structures matter; always applied latest oldest. means first frmt_stucture body_plan generic. can use groups, labels parameters specify formatting applies values. start, going use rows “n (%)” default. way don’t need list every row “n (%)” row. rows made two different values, need use frmt_combine. Next, can format continuous variables, just straightforward one value per row can just use label filter frmt define look. Finally, want format p-values. bit complicated, since p-value sits row parameters; therefore group label value specific enough need something granular. , need specify parameter frmt_structure like : frmt_structure(group_val = \".default\", label_val = \".default\", p = frmt(\"x.xx\"). , also need make sure never displays rounded p-value 0 1. can use frmt_when specify formatting based value. Now numbers look correct, can drop order columns grp column (note want display grp column, plays role behind scenes, addressed next step). use col_plan uses tidy-select nomenclature drop/move columns. Now table looks just right. two problems, (1) alignment (2) spacing continuous categorical values. take care alignment going add col_style_plan accepts series col_style_structures. allows columns aligned differently needed. table, want columns align either “.”, “,” ” ” col_style_structure looks like col_style_structure(align = c(\".\",\",\",\" \"), col = vars(everything())). alignment sorted can move spacing. order match spacing mock need use extra grp column data. look data, can see want space time either groups change. means can use row_grp_plan just \".default\" group value handle spacing. addition spacing, row_grp_plan let us move spanning group labels separate column changing label_loc “column”.","code":"#> # A tibble: 6 × 8 #> # Groups:   rowlbl1 [1] #>   rowlbl1 rowlbl2 param grp    ord1  ord2 column                 value #>   <chr>   <chr>   <chr> <chr> <dbl> <dbl> <chr>                  <dbl> #> 1 Age (y) n       n     cont      1     1 Placebo               86     #> 2 Age (y) n       n     cont      1     1 Xanomeline Low Dose   84     #> 3 Age (y) n       n     cont      1     1 Xanomeline High Dose  84     #> 4 Age (y) n       n     cont      1     1 Total                254     #> 5 Age (y) n       p     cont      1     1 p-value                0.593 #> 6 Age (y) Mean    Mean  cont      1     2 Placebo               75.2 tfrmt(   # specify columns in the data   group = c(rowlbl1,grp),   label = rowlbl2,   column = column,    param = param,   value = value,   sorting_cols = c(ord1, ord2)) %>%    print_to_gt(data_demog) %>%    tab_options(     container.width = 900   ) #> The following rows of the given dataset have no format applied to them 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346 #> Warning: Returning more (or less) than 1 row per `summarise()` group was deprecated in #> dplyr 1.1.0. #> ℹ Please use `reframe()` instead. #> ℹ When switching from `summarise()` to `reframe()`, remember that `reframe()` #>   always returns an ungrouped data frame and adjust accordingly. #> ℹ The deprecated feature was likely used in the tfrmt package. #>   Please report the issue at #>   <https://github.com/GSK-Biostatistics/tfrmt/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Multiple param listed for the same group/label values. #> The following frmt_structures may be missing from the body_plan #> or the order may need to be changed: #> - `frmt_structure(group_val = list(rowlbl1 = \"Age (y)\", grp = \"cat\"), label_val = c(\"65-80 yrs\",\"<65 yrs\",\">80 yrs\"), frmt_combine(\"{n}, {pct}\",n = frmt(\"xx\"), pct = frmt(\"xx\")))` #> - `frmt_structure(group_val = list(rowlbl1 = \"Baseline BMI\", grp = \"cat\"), label_val = c(\"25-<30\",\"<25\",\">=30\"), frmt_combine(\"{n}, {pct}\",n = frmt(\"xx\"), pct = frmt(\"xx\")))` #> - `frmt_structure(group_val = list(rowlbl1 = \"Duration of disease \", grp = \"cat\"), label_val = c(\"<12 months\",\">=12 months\"), frmt_combine(\"{n}, {pct}\",n = frmt(\"xx\"), pct = frmt(\"xx\")))` #> - `frmt_structure(group_val = list(rowlbl1 = \"Race (Origin)\", grp = \"cat\"), label_val = c(\"African Descent\",\"Caucasian\",\"Hispanic\",\"Other\"), frmt_combine(\"{n}, {pct}\",n = frmt(\"xx\"), pct = frmt(\"xx\")))` #> - `frmt_structure(group_val = list(rowlbl1 = \"Sex\", grp = \"cat\"), label_val = c(\"Female\",\"Male\"), frmt_combine(\"{n}, {pct}\",n = frmt(\"xx\"), pct = frmt(\"xx\")))` tfrmt(   # specify columns in the data   group = c(rowlbl1,grp),   label = rowlbl2,   column = column,    param = param,   value = value,   sorting_cols = c(ord1, ord2),   # specify value formatting    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt_combine(\"{n} ({pct} %)\",                                                                                  n = frmt(\"xxx\"),                                                                                 pct = frmt(\"xx.x\"))),     frmt_structure(group_val = \".default\", label_val = \"n\", frmt(\"xxx\")),     frmt_structure(group_val = \".default\", label_val = c(\"Mean\", \"Median\", \"Min\",\"Max\"), frmt(\"xxx.x\")),     frmt_structure(group_val = \".default\", label_val = \"SD\", frmt(\"xxx.xx\")),     frmt_structure(group_val = \".default\", label_val = \".default\", p = frmt_when(\">0.99\" ~ \">0.99\",                                                                                  \"<0.001\" ~ \"<0.001\",                                                                                  TRUE ~ frmt(\"x.xxx\", missing = \"\")))   )) %>%    print_to_gt(data_demog) %>%    tab_options(     container.width = 900   ) tfrmt(   # specify columns in the data   group = c(rowlbl1,grp),   label = rowlbl2,   column = column,    param = param,   value = value,   sorting_cols = c(ord1, ord2),   # specify value formatting    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt_combine(\"{n} {pct}\",                                                                                  n = frmt(\"xxx\"),                                                                                 pct = frmt_when(\"==100\" ~ \"\",                                                                                                 \"==0\" ~ \"\",                                                                                                 TRUE ~ frmt(\"(xx.x %)\")))),     frmt_structure(group_val = \".default\", label_val = \"n\", frmt(\"xxx\")),     frmt_structure(group_val = \".default\", label_val = c(\"Mean\", \"Median\", \"Min\",\"Max\"), frmt(\"xxx.x\")),     frmt_structure(group_val = \".default\", label_val = \"SD\", frmt(\"xxx.xx\")),     frmt_structure(group_val = \".default\", label_val = \".default\", p = frmt(\"\")),     frmt_structure(group_val = \".default\", label_val = c(\"n\",\"<65 yrs\",\"<12 months\",\"<25\"), p = frmt_when(\">0.99\" ~ \">0.99\",                                                                                  \"<0.001\" ~ \"<0.001\",                                                                                  TRUE ~ frmt(\"x.xxx\", missing = \"\")))   ),   # remove extra cols   col_plan = col_plan(-grp,                        -starts_with(\"ord\") )) %>%    print_to_gt(data_demog) %>%    tab_options(     container.width = 900   ) data_demog %>%    distinct(rowlbl1,grp) #> # A tibble: 12 × 2 #> # Groups:   rowlbl1 [9] #>    rowlbl1                grp   #>    <chr>                  <chr> #>  1 \"Age (y)\"              cont  #>  2 \"Age (y)\"              cat   #>  3 \"Sex\"                  cat   #>  4 \"Race (Origin)\"        cat   #>  5 \"MMSE\"                 cont  #>  6 \"Duration of disease \" cont  #>  7 \"Duration of disease \" cat   #>  8 \"Years of education\"   cont  #>  9 \"Baseline weight(kg)\"  cont  #> 10 \"Baseline height(cm)\"  cont  #> 11 \"Baseline BMI\"         cont  #> 12 \"Baseline BMI\"         cat tfrmt(   # specify columns in the data   group = c(rowlbl1,grp),   label = rowlbl2,   column = column,    param = param,   value = value,   sorting_cols = c(ord1, ord2),   # specify value formatting    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt_combine(\"{n} {pct}\",                                                                                  n = frmt(\"xxx\"),                                                                                 pct = frmt_when(\"==100\" ~ \"\",                                                                                                 \"==0\" ~ \"\",                                                                                                 TRUE ~ frmt(\"(xx.x %)\")))),     frmt_structure(group_val = \".default\", label_val = \"n\", frmt(\"xxx\")),     frmt_structure(group_val = \".default\", label_val = c(\"Mean\", \"Median\", \"Min\",\"Max\"), frmt(\"xxx.x\")),     frmt_structure(group_val = \".default\", label_val = \"SD\", frmt(\"xxx.xx\")),     frmt_structure(group_val = \".default\", label_val = \".default\", p = frmt(\"\")),     frmt_structure(group_val = \".default\", label_val = c(\"n\",\"<65 yrs\",\"<12 months\",\"<25\"), p = frmt_when(\">0.99\" ~ \">0.99\",                                                                                  \"<0.001\" ~ \"<0.001\",                                                                                  TRUE ~ frmt(\"x.xxx\", missing = \"\")))   ),   # remove extra cols   col_plan = col_plan(-grp,                        -starts_with(\"ord\") ),   # Specify column styling plan   col_style_plan = col_style_plan(     col_style_structure(align = c(\".\",\",\",\" \"), col = vars(everything()))   ),        # Specify row group plan   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = \".default\", element_block(post_space = \" \")),     label_loc = element_row_grp_loc(location = \"column\")   )      ) %>%    print_to_gt(data_demog) %>%    tab_options(     container.width = 900   )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/examples.html","id":"ae-table","dir":"Articles","previous_headings":"","what":"AE table","title":"Examples","text":"adverse events (AE) table, use data_ae analysis results data, also based CDISC pilot data. dataset two different row label columns, AEBODSYS AETERM, system organ class preferred term, respectively. also two order columns used set row order output. table column spanners, two column variables, col2 col1 define hierarchy columns. Finally, param column value column. brevity, subset AEs >10% prevalence High Dose group. mock going match looks like : table three treatment group columns (Placebo, Low, High Dose) following values reported: # subjects least one AE (n), percent subjects least one AE (pct), # AEs (AEs). also two p-value columns (Low Dose vs. Placebo, High Dose vs. Placebo). Like demography example, first thing going building tfrmt specify columns. Note col2 contains spanning labels col1 contains lower level column headers: Next, need format values using body_plan. Recall body plan made series frmt_stuctures frmt_stucture represents formatting cell within table. AE table boils following values: # subjects least one AE (n), percent subjects least one AE (pct), # AEs (AEs), p-value (pval). n pct combined using frmt_combine, 3 frmt_structure objects. Note use frmt_when format p-values. Almost ! AE table contains data Preferred Terms System Organ Classes. Therefore, want typical group-level header. Instead, want display System Organ Class label inline data, nest Preferred Term data underneath. Fortunately, able achieve formatting row_grp_plan: column alignment looks good -, except p-values. can use col_style_plan tweak . Notice still order columns column labels benefit renaming. can add col_plan help ordering: better control column labels, can make use col_plan’s span_structures define column labels spanners order names: AE table now complete!","code":"data_ae2 <- data_ae %>%    group_by(AEBODSYS, AETERM) %>%    mutate(pct_high = value[col2==\"Xanomeline High Dose\" & param==\"pct\"]) %>%    ungroup %>%    filter(pct_high >10) %>%    select(-pct_high) #> # A tibble: 6 × 8 #>   AEBODSYS        AETERM          col2             col1  param value  ord1  ord2 #>   <chr>           <chr>           <chr>            <chr> <chr> <dbl> <dbl> <dbl> #> 1 ANY BODY SYSTEM ANY BODY SYSTEM Placebo          n_pct n      65       0     0 #> 2 ANY BODY SYSTEM ANY BODY SYSTEM Placebo          n_pct pct    75.6     0     0 #> 3 ANY BODY SYSTEM ANY BODY SYSTEM Placebo          AEs   AEs   281       0     0 #> 4 ANY BODY SYSTEM ANY BODY SYSTEM Xanomeline Low … n_pct n      77       0     0 #> 5 ANY BODY SYSTEM ANY BODY SYSTEM Xanomeline Low … n_pct pct    91.7     0     0 #> 6 ANY BODY SYSTEM ANY BODY SYSTEM Xanomeline Low … AEs   AEs   412       0     0 tfrmt(   # specify columns in the data   group = AEBODSYS,   label = AETERM,   column = c(col2, col1),    param = param,   value = value,   sorting_cols = c(ord1, ord2)) %>%    print_to_gt(data_ae2) %>%    tab_options(     container.width = 1000   ) #> The following rows of the given dataset have no format applied to them 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165 #> Multiple param listed for the same group/label values. #> The following frmt_structures may be missing from the body_plan #> or the order may need to be changed: #> - `frmt_structure(group_val = \"ANY BODY SYSTEM\", label_val = \"ANY BODY SYSTEM\", frmt_combine(\"{n}, {pct}\",n = frmt(\"xx\"), pct = frmt(\"xx\")))` #> - `frmt_structure(group_val = \"CARDIAC DISORDERS\", label_val = \"CARDIAC DISORDERS\", frmt_combine(\"{n}, {pct}\",n = frmt(\"xx\"), pct = frmt(\"xx\")))` #> - `frmt_structure(group_val = \"GASTROINTESTINAL DISORDERS\", label_val = \"GASTROINTESTINAL DISORDERS\", frmt_combine(\"{n}, {pct}\",n = frmt(\"xx\"), pct = frmt(\"xx\")))` #> - `frmt_structure(group_val = \"GENERAL DISORDERS AND ADMINISTRATION SITE CONDITIONS\", label_val = c(\"APPLICATION SITE ERYTHEMA\",\"APPLICATION SITE IRRITATION\",\"APPLICATION SITE PRURITUS\",\"GENERAL DISORDERS AND ADMINISTRATION SITE CONDITIONS\"), frmt_combine(\"{n}, {pct}\",n = frmt(\"xx\"), pct = frmt(\"xx\")))` #> - `frmt_structure(group_val = \"INFECTIONS AND INFESTATIONS\", label_val = \"INFECTIONS AND INFESTATIONS\", frmt_combine(\"{n}, {pct}\",n = frmt(\"xx\"), pct = frmt(\"xx\")))` #> - `frmt_structure(group_val = \"NERVOUS SYSTEM DISORDERS\", label_val = c(\"DIZZINESS\",\"NERVOUS SYSTEM DISORDERS\"), frmt_combine(\"{n}, {pct}\",n = frmt(\"xx\"), pct = frmt(\"xx\")))` #> - `frmt_structure(group_val = \"RESPIRATORY, THORACIC AND MEDIASTINAL DISORDERS\", label_val = c(\"RESPIRATORY, THORACIC AND MEDIASTINAL DISORDERS\"), frmt_combine(\"{n}, {pct}\",n = frmt(\"xx\"), pct = frmt(\"xx\")))` #> - `frmt_structure(group_val = \"SKIN AND SUBCUTANEOUS TISSUE DISORDERS\", label_val = c(\"ERYTHEMA\",\"PRURITUS\",\"RASH\",\"SKIN AND SUBCUTANEOUS TISSUE DISORDERS\"), frmt_combine(\"{n}, {pct}\",n = frmt(\"xx\"), pct = frmt(\"xx\")))` tfrmt(   # specify columns in the data   group = AEBODSYS,   label = AETERM,   column = c(col2, col1),    param = param,   value = value,   sorting_cols = c(ord1, ord2),   # specify value formatting    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(\"{n} {pct}\",                                 n = frmt(\"XXX\"),                                 pct = frmt_when(                                   \"==100\" ~ \"\",                                   \"==0\" ~ \"\",                                   TRUE ~ frmt(\"(xx.x %)\")))),     frmt_structure(group_val = \".default\", label_val = \".default\",                     AEs = frmt(\"[XXX]\")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing =\"--\")))   )) %>%    print_to_gt(., data_ae2) %>%    tab_options(     container.width = 1000   ) tfrmt(   # specify columns in the data   group = AEBODSYS,   label = AETERM,   column = c(col2, col1),    param = param,   value = value,   sorting_cols = c(ord1, ord2),   # specify value formatting    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(\"{n} {pct}\",                                 n = frmt(\"XXX\"),                                 pct = frmt_when(                                   \"==100\" ~ \"\",                                   \"==0\" ~ \"\",                                   TRUE ~ frmt(\"(xx.x %)\")))),     frmt_structure(group_val = \".default\", label_val = \".default\",                     AEs = frmt(\"[XXX]\")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing =\"--\")))   ),   # Nest Preferred terms under SOC   row_grp_plan = row_grp_plan(label_loc = element_row_grp_loc(location = \"indented\"))   ) %>%    print_to_gt(data_ae2) %>%    tab_options(     container.width = 1000   ) tfrmt(   # specify columns in the data   group = AEBODSYS,   label = AETERM,   column = c(col2, col1),    param = param,   value = value,   sorting_cols = c(ord1, ord2),   # specify value formatting    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(\"{n} {pct}\",                                 n = frmt(\"XXX\"),                                 pct = frmt_when(                                   \"==100\" ~ \"\",                                   \"==0\" ~ \"\",                                   TRUE ~ frmt(\"(xx.x %)\")))),     frmt_structure(group_val = \".default\", label_val = \".default\",                     AEs = frmt(\"[XXX]\")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing =\"--\")))   ),   # Nest Preferred terms under SOC   row_grp_plan = row_grp_plan(label_loc = element_row_grp_loc(location = \"indented\")),   # alignment      # Specify column styling plan   col_style_plan = col_style_plan(     col_style_structure(align = c(\".\",\",\",\" \"), col = vars(starts_with(\"p_\")))   )   ) %>%    print_to_gt(data_ae2) %>%    tab_options(     container.width = 1000   ) tfrmt(   # specify columns in the data   group = AEBODSYS,   label = AETERM,   column = c(col2, col1),    param = param,   value = value,   sorting_cols = c(ord1, ord2),   # specify value formatting    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(\"{n} {pct}\",                                 n = frmt(\"XXX\"),                                 pct = frmt_when(                                   \"==100\" ~ \"\",                                   \"==0\" ~ \"\",                                   TRUE ~ frmt(\"(xx.x %)\")))),     frmt_structure(group_val = \".default\", label_val = \".default\",                     AEs = frmt(\"[XXX]\")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing =\"--\")))   ),   # Nest Preferred terms under SOC   row_grp_plan = row_grp_plan(label_loc = element_row_grp_loc(location = \"indented\")),    # Specify column styling plan   col_style_plan = col_style_plan(     col_style_structure(align = c(\".\",\",\",\" \"), col = vars(p_low, p_high))   ),   # columns   col_plan = col_plan(     -starts_with(\"ord\")   )   ) %>%    print_to_gt(data_ae2)  %>%    tab_options(     container.width = 1000   ) tfrmt(   # specify columns in the data   group = AEBODSYS,   label = AETERM,   column = c(col2, col1),    param = param,   value = value,   sorting_cols = c(ord1, ord2),   # specify value formatting    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(\"{n} {pct}\",                                 n = frmt(\"XXX\"),                                 pct = frmt_when(                                   \"==100\" ~ \"\",                                   \"==0\" ~ \"\",                                   TRUE ~ frmt(\"(xx.x %)\")))),     frmt_structure(group_val = \".default\", label_val = \".default\",                     AEs = frmt(\"[XXX]\")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing =\"--\")))   ),   # Nest Preferred terms under SOC   row_grp_plan = row_grp_plan(label_loc = element_row_grp_loc(location = \"indented\")),      # Specify column styling plan   col_style_plan = col_style_plan(     col_style_structure(align = c(\".\",\",\",\" \"), col = c(p_low, p_high))   ),      # columns   col_plan = col_plan(     ## defines the spanning column order, and then beneath them the order of their contents     -starts_with(\"ord\"),     span_structure(       col2 = c(         \"Xanomeline High Dose (N=84)\" = `Xanomeline High Dose`,         \"Xanomeline Low Dose (N=84)\" = `Xanomeline Low Dose`,         \"Placebo (N=86)\" = Placebo       ),       col1 = c(`n (%)` = `n_pct` ,                `[AEs]` = `AEs`)     ),     span_structure(       col2 = c(\"Fisher's Exact p-values\" = fisher_pval),       col1 = c(         # add a line break to help with table formatting         `Placebo vs.\\n Low Dose` = `p_low` ,        `Placebo vs.\\n High Dose` = `p_high`        )     ))   ) %>%    print_to_gt(data_ae2)  %>%    tab_options(     container.width = 1000   )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/examples.html","id":"efficacy","dir":"Articles","previous_headings":"","what":"Efficacy","title":"Examples","text":"example, use data_efficacy dataset, example analysis results dataset found package, based CDISC pilot data ADAS-Cog(11) score. goal recreate table 14-3.01 CDISC pilot. data relatively simple contains 1 group column column column, adds complexity multiple analyses stacked together - summary statistics different values different time points, results several different ANCOVA models. Multiple treatment groups well contrasts groups included. mock going match looks like : Let’s first see table looks without special formatting. judicious use body_plan’s frmt, frmt_combine, frmt_when, can conditionally format different pieces results. summary statistics, number observations (n), mean standard deviation (mean, sd), median range (median, min, max). models, p-value (p.value) least squares mean difference (diff) well associated standard error (diff_se) 95% confidence interval (diff_lcl, diff_ucl). label column indicates row various measures belong . First, let’s format stand-alone values: n p-value. Notice n always sits row labelled “n”; therefore can reference label_val param name frmt_structure. p-values several different label values convenient format according param name frmt_structure. Next, remaining param values combined twos threes. Therefore, use frmt_combine utility achieve desired formatting: Now values formatted correctly, can make sure table sorted appropriately passing order columns sorting_cols. can also drop order columns final display using col_plan. Notice row labels quite right. First, bit hierarchy label values nested group values, nice add indentation make nesting obvious. Also, cases, group values also contain summary data, means ARD contains matching group label value. summary rows, want suppress printing extra group-level header, display summary data -line. row_grp_plan can help us via row_grp_loc argument: Almost done! Notice spec also contains empty rows different groups data. can mimic behavior passing row_grp_structure objects row_grp_plan. objects define “blocks” rows describe format . case, want add post space specific blocks data. can reference locations block based values group variable. , efficacy table complete!","code":"#> # A tibble: 6 × 7 #>   group    label     column               param value  ord1  ord2 #>   <chr>    <chr>     <chr>                <chr> <dbl> <dbl> <dbl> #> 1 Baseline n         Placebo              n      79       1     1 #> 2 Baseline n         Xanomeline Low Dose  n      81       1     1 #> 3 Baseline n         Xanomeline High Dose n      74       1     1 #> 4 Baseline Mean (SD) Placebo              mean   24.1     1     2 #> 5 Baseline Mean (SD) Xanomeline Low Dose  mean   24.4     1     2 #> 6 Baseline Mean (SD) Xanomeline High Dose mean   21.3     1     2 tfrmt(   group = group,   label = label,   column = column,   param = param,   value = value  ) %>%   print_to_gt(data_efficacy) %>%    tab_options(     container.width = 800   )  #> The following rows of the given dataset have no format applied to them 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70 #> Multiple param listed for the same group/label values. #> The following frmt_structures may be missing from the body_plan #> or the order may need to be changed: #> - `frmt_structure(group_val = \"Baseline\", label_val = \"Median (Range)\", frmt_combine(\"{median}, {min}, {max}\",median = frmt(\"xx\"), min = frmt(\"xx\"), max = frmt(\"xx\")))` #> - `frmt_structure(group_val = \"Change from Baseline\", label_val = \"Median (Range)\", frmt_combine(\"{median}, {min}, {max}\",median = frmt(\"xx\"), min = frmt(\"xx\"), max = frmt(\"xx\")))` #> - `frmt_structure(group_val = \"Week 24\", label_val = \"Median (Range)\", frmt_combine(\"{median}, {min}, {max}\",median = frmt(\"xx\"), min = frmt(\"xx\"), max = frmt(\"xx\")))` #> - `frmt_structure(group_val = \"p-value (Xan - Placebo)\", label_val = \"95% CI\", frmt_combine(\"{diff_lcl}, {diff_ucl}\",diff_lcl = frmt(\"xx\"), diff_ucl = frmt(\"xx\")))` #> - `frmt_structure(group_val = \"p-value (Xan - Placebo)\", label_val = \"Diff of LS Means (SE)\", frmt_combine(\"{diff}, {diff_se}\",diff = frmt(\"xx\"), diff_se = frmt(\"xx\")))` #> - `frmt_structure(group_val = \"p-value (Xan High - Xan Low)\", label_val = \"95% CI\", frmt_combine(\"{diff_lcl}, {diff_ucl}\",diff_lcl = frmt(\"xx\"), diff_ucl = frmt(\"xx\")))` #> - `frmt_structure(group_val = \"p-value (Xan High - Xan Low)\", label_val = \"Diff of LS Means (SE)\", frmt_combine(\"{diff}, {diff_se}\",diff = frmt(\"xx\"), diff_se = frmt(\"xx\")))` tfrmt(   group = group,   label = label,   column = column,   param = param,   value = value,    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \"n\",                     frmt(\"xx\")),  # we could also do: label_val = \".default\", n = frmt(\"xx\")     frmt_structure(group_val = \".default\", label_val = \".default\",                     p.value = frmt_when(\"<0.001\" ~ \"<0.001\",                                        \">0.99\" ~ \">0.99\",                                        TRUE ~ frmt(\"x.xxx\", missing = \" \")))   ) ) %>%   print_to_gt(data_efficacy) %>%    tab_options(     container.width = 800   ) #> The following rows of the given dataset have no format applied to them 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70 #> Multiple param listed for the same group/label values. #> The following frmt_structures may be missing from the body_plan #> or the order may need to be changed: #> - `frmt_structure(group_val = \"Baseline\", label_val = \"Median (Range)\", frmt_combine(\"{median}, {min}, {max}\",median = frmt(\"xx\"), min = frmt(\"xx\"), max = frmt(\"xx\")))` #> - `frmt_structure(group_val = \"Change from Baseline\", label_val = \"Median (Range)\", frmt_combine(\"{median}, {min}, {max}\",median = frmt(\"xx\"), min = frmt(\"xx\"), max = frmt(\"xx\")))` #> - `frmt_structure(group_val = \"Week 24\", label_val = \"Median (Range)\", frmt_combine(\"{median}, {min}, {max}\",median = frmt(\"xx\"), min = frmt(\"xx\"), max = frmt(\"xx\")))` #> - `frmt_structure(group_val = \"p-value (Xan - Placebo)\", label_val = \"95% CI\", frmt_combine(\"{diff_lcl}, {diff_ucl}\",diff_lcl = frmt(\"xx\"), diff_ucl = frmt(\"xx\")))` #> - `frmt_structure(group_val = \"p-value (Xan - Placebo)\", label_val = \"Diff of LS Means (SE)\", frmt_combine(\"{diff}, {diff_se}\",diff = frmt(\"xx\"), diff_se = frmt(\"xx\")))` #> - `frmt_structure(group_val = \"p-value (Xan High - Xan Low)\", label_val = \"95% CI\", frmt_combine(\"{diff_lcl}, {diff_ucl}\",diff_lcl = frmt(\"xx\"), diff_ucl = frmt(\"xx\")))` #> - `frmt_structure(group_val = \"p-value (Xan High - Xan Low)\", label_val = \"Diff of LS Means (SE)\", frmt_combine(\"{diff}, {diff_se}\",diff = frmt(\"xx\"), diff_se = frmt(\"xx\")))` tfrmt(   group = group,   label = label,   column = column,   param = param,   value = value,    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \"n\",                     frmt(\"xx\")),  # we could also do: label_val = \".default\", n = frmt(\"xx\")     frmt_structure(group_val = \".default\", label_val = \".default\",                     p.value = frmt_when(\"<0.001\" ~ \"<0.001\",                                        \">0.99\" ~ \">0.99\",                                        TRUE ~ frmt(\"x.xxx\", missing = \" \"))),     frmt_structure(group_val = \".default\", label_val = \"Median (Range)\",                     frmt_combine(\"{median} ({min};{max})\",                                 median = frmt(\"xx.x\"),                                 min = frmt(\"xx\"),                                 max = frmt(\"xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"Mean (SD)\",                    frmt_combine(\"{mean} ({sd})\",                                 mean = frmt(\"xx.x\"),                                 sd = frmt(\"xx.xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"Diff of LS Means (SE)\",                     frmt_combine(\"{diff} ({diff_se})\",                                 diff = frmt(\"xx.x\"),                                 diff_se = frmt(\"xx.xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"95% CI\",                     frmt_combine(\"({diff_lcl};{diff_ucl})\",                                 diff_lcl = frmt(\"xx.x\"),                                 diff_ucl = frmt(\"xx.x\"), missing = \" \"))   ) ) %>%   print_to_gt(data_efficacy) %>%    tab_options(     container.width = 800   ) tfrmt(   group = group,   label = label,   column = column,   param = param,   value = value,   sorting_cols = c(ord1, ord2),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \"n\",                     frmt(\"xx\")),  # we could also do: label_val = \".default\", n = frmt(\"xx\")     frmt_structure(group_val = \".default\", label_val = \".default\",                     p.value = frmt_when(\"<0.001\" ~ \"<0.001\",                                        \">0.99\" ~ \">0.99\",                                        TRUE ~ frmt(\"x.xxx\", missing = \" \"))),     frmt_structure(group_val = \".default\", label_val = \"Median (Range)\",                     frmt_combine(\"{median} ({min};{max})\",                                 median = frmt(\"xx.x\"),                                 min = frmt(\"xx\"),                                 max = frmt(\"xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"Mean (SD)\",                     frmt_combine(\"{mean} ({sd})\",                                 mean = frmt(\"xx.x\"),                                 sd = frmt(\"xx.xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"Diff of LS Means (SE)\",                     frmt_combine(\"{diff} ({diff_se})\",                                 diff = frmt(\"xx.x\"),                                 diff_se = frmt(\"xx.xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"95% CI\",                     frmt_combine(\"({diff_lcl};{diff_ucl})\",                                 diff_lcl = frmt(\"xx.x\"),                                 diff_ucl = frmt(\"xx.x\"), missing = \" \"))   ),   col_plan = col_plan(     group, label, Placebo, contains(\"Low\"), contains(\"High\"), -starts_with(\"ord\")   ) ) %>%   print_to_gt(data_efficacy) %>%    tab_options(     container.width = 800   ) tfrmt(   group = group,   label = label,   column = column,   param = param,   value = value,   sorting_cols = c(ord1, ord2),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \"n\",                     frmt(\"xx\")),  # we could also do: label_val = \".default\", n = frmt(\"xx\")     frmt_structure(group_val = \".default\", label_val = \".default\",                     p.value = frmt_when(\"<0.001\" ~ \"<0.001\",                                        \">0.99\" ~ \">0.99\",                                        TRUE ~ frmt(\"x.xxx\", missing = \" \"))),     frmt_structure(group_val = \".default\", label_val = \"Median (Range)\",                     frmt_combine(\"{median} ({min};{max})\",                                 median = frmt(\"xx.x\"),                                 min = frmt(\"xx\"),                                 max = frmt(\"xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"Mean (SD)\",                     frmt_combine(\"{mean} ({sd})\",                                 mean = frmt(\"xx.x\"),                                 sd = frmt(\"xx.xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"Diff of LS Means (SE)\",                     frmt_combine(\"{diff} ({diff_se})\",                                 diff = frmt(\"xx.x\"),                                 diff_se = frmt(\"xx.xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"95% CI\",                     frmt_combine(\"({diff_lcl};{diff_ucl})\",                                 diff_lcl = frmt(\"xx.x\"),                                 diff_ucl = frmt(\"xx.x\"), missing = \" \"))   ),   col_plan = col_plan(     group, label, Placebo, contains(\"Low\"), contains(\"High\"), -starts_with(\"ord\")   ),   row_grp_plan = row_grp_plan(     label_loc = element_row_grp_loc(location = \"indented\")   ) ) %>%   print_to_gt(data_efficacy) %>%    tab_options(     container.width = 800   ) tfrmt(   group = group,   label = label,   column = column,   param = param,   value = value,   sorting_cols = c(ord1, ord2),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \"n\",                     frmt(\"xx\")),  # we could also do: label_val = \".default\", n = frmt(\"xx\")     frmt_structure(group_val = \".default\", label_val = \".default\",                     p.value = frmt_when(\"<0.001\" ~ \"<0.001\",                                        \">0.99\" ~ \">0.99\",                                        TRUE ~ frmt(\"x.xxx\", missing = \" \"))),     frmt_structure(group_val = \".default\", label_val = \"Median (Range)\",                     frmt_combine(\"{median} ({min};{max})\",                                 median = frmt(\"xx.x\"),                                 min = frmt(\"xx\"),                                 max = frmt(\"xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"Mean (SD)\",                     frmt_combine(\"{mean} ({sd})\",                                 mean = frmt(\"xx.x\"),                                 sd = frmt(\"xx.xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"Diff of LS Means (SE)\",                     frmt_combine(\"{diff} ({diff_se})\",                                 diff = frmt(\"xx.x\"),                                 diff_se = frmt(\"xx.xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"95% CI\",                     frmt_combine(\"({diff_lcl};{diff_ucl})\",                                 diff_lcl = frmt(\"xx.x\"),                                 diff_ucl = frmt(\"xx.x\"), missing = \" \"))   ),   col_plan = col_plan(     group, label, Placebo, contains(\"Low\"), contains(\"High\"), -starts_with(\"ord\")   ),   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = list(group=\"Change from Baseline\"),                        element_block(post_space = \" \")),     row_grp_structure(group_val = list(group=\"p-value (Dose Response)\"),                       element_block(post_space = \" \")),     row_grp_structure(group_val = list(group=\"p-value (Xan - Placebo)\"),                        element_block(post_space = \" \")),     label_loc = element_row_grp_loc(location = \"indented\")   ) ) %>%   print_to_gt(data_efficacy) %>%    tab_options(     container.width = 800   )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/faq.html","id":"can-you-format-a-column-header","dir":"Articles","previous_headings":"","what":"Can you format a column header?","title":"FAQ","text":"format column header, just use markdown syntax within character strings. Examples newline, bolding certain words. add newline column header need include markdown syntax <br> \\n character string. bolding, surround text ** either side. example code provided :","code":"es_data <-tibble(rowlbl1 =c(rep(\"Completion Status\",12),rep(\"Primary reason for withdrawal\",28)),                  rowlbl2 =c(rep(\"Completed\",4),rep(\"Prematurely Withdrawn\",4),rep(\"Unknown\",4),rep(\"Adverse Event\",4),rep(\"Lost to follow-up\",4),rep(\"Protocol violation\",4),rep(\"Subject decided to withdraw\",4),rep(\"Protocol Violation\",4),rep(\"Pre-Operative Dose[1]\",4),rep(\"Other\",4)),                  param=c(rep(c(\"n\",\"n\",\"pct\",\"pct\"),10)),                  column=c(rep(c(\"Placebo<br>(N=48)\",\"Treatment\\n**(N=38)**\"),20)), #newline and bold syntax                  value=c(24,19,2400/48,1900/38,5,1,500/48,100/38,19,18,1900/48,1800/38,1,1,100/48,100/38,0,0,0,0,0,0,0,0,1,1,100/48,100/38,1,4,100/48,400/38,1,0,100/48,0,2,3,200/48,300/38)  )  tfrmt(   # specify columns in the data   group = c(rowlbl1),   label = rowlbl2,   column = column,   param = param,   value = value,   # set formatting for values   body_plan = body_plan(     frmt_structure(       group_val = \".default\",       label_val = \".default\",       frmt_combine(         \"{n} {pct}\",         n = frmt(\"xxx\"),         pct = frmt_when(\"==100\" ~ \"\",                         \"==0\" ~ \"\",                         TRUE ~ frmt(\"(xx.x %)\"))       )     )   ),      # Specify row group plan   # Indent the rowlbl2   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = \".default\", element_block(post_space = \" \")),     label_loc = element_row_grp_loc(location = \"indented\")   ) ) %>%   print_to_gt(es_data) %>%   tab_options(container.width = 1000)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/footnotes.html","id":"description","dir":"Articles","previous_headings":"","what":"Description","title":"Using Footnotes","text":"tfrmt footnotes table component can added specification manner similar body_plan col_plan. dedicated function called footnote_plan consists list footnote_structures. letters (letters: , b, c, etc.) numbers (numbers: 1, 2, 3, etc.) standard (set 4 distinct symbols) extended (set 6 distinct symbols)","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/footnotes.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Using Footnotes","text":"Let’s go examples! mock data ’re going use.","code":"# Create mock data df <- crossing(group = c(\"group 1\", \"group 2\"),                label = c(\"label 1\", \"label 2\"),                column = c(\"PL\", \"T1\", \"T2\", \"T1&T2\"),                param = c(\"count\", \"percent\"))  # This one is used for examples 5 and 6 span_df <- df %>% mutate(span = case_when(column == \"PL\" ~ \"Placebo\",                                           column %in% c(\"T1\", \"T2\", \"T1&T2\") == TRUE ~ \"Treatment\"))"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/footnotes.html","id":"example-1-one-footnote-per-groupcolumn","dir":"Articles","previous_headings":"Examples","what":"Example 1 (one footnote per group/column)","title":"Using Footnotes","text":"Different footnotes separated individual footnote_structures.","code":"# Create specification tfrmt(   group = group,   label = label,   column = column,   param = param,   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = \".default\",                       element_block(post_space = \"   \")) ),      body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(\"{count} ({percent})\",                                 count = frmt(\"xx\"),                                 percent = frmt(\"xx.x\")))   ),      # Add footnotes here   footnote_plan = footnote_plan(     footnote_structure(footnote_text = \"Source Note\", group_val = \"group 1\"),     footnote_structure(footnote_text = \"Placebo\", column_val = \"PL\"),     marks = \"standard\"),      ) %>%   print_mock_gt(df) #> Message: `tfrmt` will need `value` value to `print_to_gt` when data is avaliable"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/footnotes.html","id":"example-2-same-footnote-for-multiple-columns","dir":"Articles","previous_headings":"Examples","what":"Example 2 (same footnote for multiple columns)","title":"Using Footnotes","text":"applying footnote multiple columns must enter named list LHS name column variable input data (“column” example) containing column header names output table, RHS column header name selected (“T1”, “T2” “T1&T2” case).","code":"# Create specification tfrmt(   group = group,   label = label,   column = column,   param = param,   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = \".default\",                       element_block(post_space = \"   \")) ),      body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(\"{count} ({percent})\",                                 count = frmt(\"xx\"),                                 percent = frmt(\"xx.x\")))   ),      # Add footnotes here   footnote_plan = footnote_plan(     footnote_structure(footnote_text = \"All Treatments\", list(column = c(\"T1\",\"T2\", \"T1&T2\"))),     marks = \"numbers\"),    ) %>%   print_mock_gt(df) #> Message: `tfrmt` will need `value` value to `print_to_gt` when data is avaliable"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/footnotes.html","id":"example-3-footnote-for-same-label-in-all-groups","dir":"Articles","previous_headings":"Examples","what":"Example 3 (footnote for same label in all groups)","title":"Using Footnotes","text":"","code":"# Create specification tfrmt(   group = group,   label = label,   column = column,   param = param,   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = \".default\",                       element_block(post_space = \"   \")) ),      body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(\"{count} ({percent})\",                                 count = frmt(\"xx\"),                                 percent = frmt(\"xx.x\")))   ),      # Add footnotes here   footnote_plan = footnote_plan(     footnote_structure(footnote_text = \"Footnote goes here\", label_val = \"label 1\"),     marks = \"standard\"),    ) %>%   print_mock_gt(df) #> Message: `tfrmt` will need `value` value to `print_to_gt` when data is avaliable"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/footnotes.html","id":"example-4-footnote-for-specific-label-in-one-group","dir":"Articles","previous_headings":"Examples","what":"Example 4 (footnote for specific label in one group)","title":"Using Footnotes","text":"","code":"# Create specification tfrmt(   group = group,   label = label,   column = column,   param = param,   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = \".default\",                       element_block(post_space = \"   \")) ),      body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(\"{count} ({percent})\",                                 count = frmt(\"xx\"),                                 percent = frmt(\"xx.x\")))   ),      # Add footnotes here   footnote_plan = footnote_plan(     footnote_structure(footnote_text = \"Footnote goes here\", group_val = \"group 1\", label_val = \"label 1\"),     marks = \"standard\"),    ) %>%   print_mock_gt(df) #> Message: `tfrmt` will need `value` value to `print_to_gt` when data is avaliable"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/footnotes.html","id":"example-5-footnote-for-spanning-header","dir":"Articles","previous_headings":"Examples","what":"Example 5 (footnote for spanning header)","title":"Using Footnotes","text":"","code":"# Add specification tfrmt(   group = group,   label = label,   column = c(\"span\", \"column\"),   param = param,   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = \".default\",                       element_block(post_space = \"   \")) ),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(\"{count} ({percent})\",                                 count = frmt(\"xx\"),                                 percent = frmt(\"xx.x\")))   ),   col_plan = col_plan(     group, label,     span_structure(span = c(\"Placebo\"),                    column = c(\"PL\")),     span_structure(span = c(\"Treatment\"),                    column = c(\"T1\", \"T2\", \"T1&T2\"))   ),      # Add footnote here   footnote_plan = footnote_plan(     footnote_structure(footnote_text = \"Footnote goes here\", column_val = list(span = \"Treatment\")),     marks = \"extended\"   ) ) %>%   print_mock_gt(span_df) #> Message: `tfrmt` will need `value` value to `print_to_gt` when data is avaliable"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/footnotes.html","id":"example-6-footnote-for-column-headers-under-spanning-header","dir":"Articles","previous_headings":"Examples","what":"Example 6 (footnote for column header/s under spanning header)","title":"Using Footnotes","text":"can apply mark multiple headers entering named list column variable.","code":"# Add specification tfrmt(   group = group,   label = label,   column = c(\"span\", \"column\"),   param = param,   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = \".default\",                       element_block(post_space = \"   \")) ),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(\"{count} ({percent})\",                                 count = frmt(\"xx\"),                                 percent = frmt(\"xx.x\")))   ),   col_plan = col_plan(     group, label,     span_structure(span = c(\"Placebo\"),                    column = c(\"PL\")),     span_structure(span = c(\"Treatment\"),                    column = c(\"T1\", \"T2\", \"T1&T2\"))   ),      # Add footnote here   footnote_plan = footnote_plan(     footnote_structure(footnote_text = \"Footnote goes here\", column_val = list(span = \"Treatment\", column = \"T1&T2\")),     marks = \"extended\"   ) ) %>%   print_mock_gt(span_df) #> Message: `tfrmt` will need `value` value to `print_to_gt` when data is avaliable"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/layer.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Layering tfrmts","text":"example layering piping. create template tfrmt_sigdig() pipe separate tfrmt. provide tfrmt_sigdig() data.frame detailing groups significant digits values rounded creates tfrmt body_plan supports . second tfrmt defines table specific information, including title, specific columns use row labels output columns, well col_plan. output tfrmt generates table subset data_labs.","code":"data_labs_subset <- data_labs %>%    filter(     group2 %in% c(\"ALANINE AMINOTRANSFERASE\" ,\"ALBUMIN\" ,\"ALKALINE PHOSPHATASE\",\"ASPARTATE AMINOTRANSFERASE\", \"BASOPHILS\"),     rowlbl %in% c(\"Bsln\", \"End[1]\")   )  data_input <- tribble(   ~group1,   ~group2, ~sigdig,   \"CHEMISTRY\",   \".default\", 3,   \"CHEMISTRY\",   \"ALBUMIN\",  1,   \"CHEMISTRY\",   \"CALCIUM\",   1,   \".default\",    \".default\",  2   )   labs_tfrmt_template <- tfrmt_sigdig(   sigdig_df = data_input,   group = vars(group1, group2),   label = rowlbl,   param_defaults = param_set(\"[{n}]\" = NA)   )   labs_tfrmt <- labs_tfrmt_template %>%   tfrmt(     column = vars(col1, col2),     param = param,     value = value,     sorting_cols = vars(ord1, ord2, ord3),     row_grp_plan = row_grp_plan(       label_loc = element_row_grp_loc(location = \"indent\")     ),     col_plan = col_plan(       group1, group2,       rowlbl,       \"Residuals\" = res,       \"Change From Baseline\" = cbl,       n,       -starts_with(\"ord\")       )   )  labs_tfrmt %>%    print_to_gt(data_labs_subset) %>%    tab_options(     container.width = 1000   )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/layer.html","id":"conflicting-layers","dir":"Articles","previous_headings":"","what":"Conflicting Layers","title":"Layering tfrmts","text":"two tfrmt layered, may come case groups value across body plan. Additionally, data may provided slightly different group names expected. Addressing without re-write entire body_plan able done update_group() function. Similar rename() function, provide new group name old group name needs updated. function maps across entire tfrmt updates references old group name new one. example, useful template tfrmt needs references updated. happen input data set slightly different naming convention expected.","code":"## provided data had different column names for groups alternate_data_labs_subset <- data_labs_subset %>%    rename(     `Lab Type` = group1,     `Lab Test` = group2,   )  labs_tfrmt %>%    update_group(     `Lab Type` = group1,     `Lab Test` = group2,   ) %>%    tfrmt(     col_plan = col_plan(       `Lab Type`, `Lab Test`,       rowlbl,       \"Residuals\" = res,       \"Change From Baseline\" = cbl,       n,       -starts_with(\"ord\")       )   ) %>%    print_to_gt(alternate_data_labs_subset) %>%    tab_options(     container.width = 1000   )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/mock_examples.html","id":"ae-mocks","dir":"Articles","previous_headings":"","what":"AE Mocks","title":"Mock Examples","text":"Reusable tfrmt base layer: Example 1: mock table groups Example 2: mock table one level grouping, indented labels Example 3: mock table two levels grouping, indented labels Example 4: mock table two levels grouping, column separated labels Example 5: mock table combined columns, using data_ae","code":"ae_mock_table <- function(tfrmt_obj){   tfrmt(     title = \"Table Name\",     subtitle = \"Study ID: GSK12345\",     body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(                      \"{count} {percent}\",                      count = frmt(\"XXX\"),                      percent = frmt_when(\"==100\"~ frmt(\"\"),                                          \"==0\"~ \"\",                                          \"TRUE\" ~ frmt(\"(XX.X%)\")))),     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(                      \"{num} ({lower}, {upper})\",                      num = frmt(\"XX.X\"),                      lower = frmt_when(\"==100\"~ frmt(\"\"),                                        \"==0\"~ \"\",                                        \"TRUE\" ~ frmt(\"XX.X%\")),                      upper = frmt_when(\"==100\"~ frmt(\"\"),                                        \"==0\"~ \"\",                                        \"TRUE\" ~ frmt(\"XX.X%\"))))     ),   col_plan = col_plan(     T1, T2, `T1&T2`, PL,     everything(),     -starts_with(\"ord\")     )   ) } df <- bind_rows(   crossing(label = c(\"label 1\", \"label 2\", \"label 3\"),            column = c(\"T1\", \"T2\", \"T1&T2\", \"PL\"),            param = c(\"count\", \"percent\")) %>%     mutate(ord1 = rep(seq(1:length(unique(.$label))), each = nrow(.)/length(unique(.$label)) )),   crossing(label = c(\"label 1\", \"label 2\", \"label 3\"),            column = c(\"risk T1-PL\", \"risk T2-PL\", \"risk T1&T2-PL\"),            param = c(\"num\", \"lower\", \"upper\")) %>%     mutate(ord1 = rep(seq(1:length(unique(.$label))), each = nrow(.)/length(unique(.$label)) ))   ) %>% arrange_all()  ae_mock_table() %>%   tfrmt(     label = \"label\",     param = \"param\",     column = \"column\",     value = value,     sorting_cols = vars(ord1)     ) %>%   print_mock_gt(df) df <- bind_rows(   crossing(group = c(\"grp1\", \"grp2\"),            label = c(\"label 1\", \"label 2\", \"label 3\"),            column = c(\"T1\", \"T2\", \"T1&T2\", \"PL\"),            param = c(\"count\", \"percent\")),   crossing(group = c(\"grp1\", \"grp2\"),            label = c(\"label 1\", \"label 2\", \"label 3\"),            column = c(\"risk T1-PL\", \"risk T2-PL\", \"risk T1&T2-PL\"),            param = c(\"num\", \"lower\", \"upper\"))   ) %>% arrange_all()  ae_mock_table() %>%   tfrmt(     group = group,     label = \"label\",     param = \"param\",     column = \"column\",     value = value,     row_grp_plan = row_grp_plan( row_grp_structure(group_val = \".default\", element_block(post_space = \"   \")) ),          col_plan = col_plan(       T1, T2, `T1&T2`, PL, `risk T1-PL`, `risk T2-PL`, `risk T1&T2-PL`,       everything(),       -starts_with(\"ord\"))     ) %>%   print_mock_gt(df) df <- bind_rows(   crossing(grp1 = c(\"group 1.1\", \"group 1.2\"),            grp2 = c(\"group 2.1\", \"group 2.2\"),            label = c(\"label 1\", \"label 2\"),            column = c(\"T1\", \"T2\", \"T1&T2\", \"PL\"),            param = c(\"count\", \"percent\")),   crossing(grp1 = c(\"group 1.1\", \"group 1.2\"),            grp2 = c(\"group 2.1\", \"group 2.2\"),            label = c(\"label 1\", \"label 2\"),            column = c(\"risk T1-PL\", \"risk T2-PL\", \"risk T1&T2-PL\"),            param = c(\"num\", \"lower\", \"upper\"))   ) %>% arrange_all()  ae_mock_table() %>%   tfrmt(     group = c(grp1, grp2),     label = \"label\",     param = \"param\",     column = \"column\",     value = value,     row_grp_plan = row_grp_plan( row_grp_structure(group_val = \".default\", element_block(post_space = \"   \")) ),          col_plan = col_plan(       T1, T2, `T1&T2`, PL, `risk T1-PL`, `risk T2-PL`, `risk T1&T2-PL`,       everything(),       -starts_with(\"ord\"))     ) %>%   print_mock_gt(df) ae_mock_table() %>%   tfrmt(     group = c(grp1, grp2),     label = \"label\",     param = \"param\",     column = \"column\",     value = value,     row_grp_plan = row_grp_plan(label_loc = element_row_grp_loc(location = \"column\")),              col_plan = col_plan(       T1, T2, `T1&T2`, PL, `risk T1-PL`, `risk T2-PL`, `risk T1&T2-PL`,       everything(),       -starts_with(\"ord\"))     ) %>%   print_mock_gt(df) fmt_spec <- tfrmt(   group = AEBODSYS,   label = AETERM,   param = param,   column = c(col2, col1),   value = value,   row_grp_plan = row_grp_plan(),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",             frmt_combine(\"{n} {pct}\",                         n = frmt(\"XXX\"),                         pct = frmt_when(                           \"==100\" ~ \"\",                           \"==0\" ~ \"\",                           TRUE ~ frmt(\"(xx.x %)\")))),     frmt_structure(group_val = \".default\", label_val = \".default\",                     AEs = frmt(\"[XXX]\")),     frmt_structure(group_val = \".default\", label_val = \".default\",                     pval = frmt_when(\">0.99\" ~ \">0.99\",                                     \"<0.001\" ~ \"<0.001\",                                     \"<0.05\" ~ frmt(\"x.xxx*\"),                                     TRUE ~ frmt(\"x.xxx\", missing = \"--\")))   ), col_plan = col_plan(-starts_with(\"ord\")))  # data_ae2 <- data_ae %>%    group_by(AEBODSYS, AETERM) %>%    mutate(pct_high = value[col2==\"Xanomeline High Dose\" & param==\"pct\"]) %>%    ungroup %>%    filter(pct_high >10) %>%    select(-pct_high)  data_ae2 %>%     select(-value) %>%    arrange(ord1, ord2 ) %>%    print_mock_gt(fmt_spec, . )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/mock_examples.html","id":"demography-mocks","dir":"Articles","previous_headings":"","what":"Demography Mocks","title":"Mock Examples","text":"","code":"tfrmt(   # specify columns in the data   group = c(rowlbl1,grp),   label = rowlbl2,   column = column,    param = param,   value = value,   sorting_cols = c(ord1, ord2),      # Specify body plan   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt_combine(\"{n} {pct}\",                                                                                  n = frmt(\"xxx\"),                                                                                 pct = frmt_when(\"==100\" ~ \"\",                                                                                                 \"==0\" ~ \"\",                                                                                                 TRUE ~ frmt(\"(xx.x %)\")))),     frmt_structure(group_val = \".default\", label_val = \"n\", frmt(\"xxx\")),     frmt_structure(group_val = \".default\", label_val = c(\"Mean\", \"Median\", \"Min\",\"Max\"), frmt(\"xxx.x\")),     frmt_structure(group_val = \".default\", label_val = \"SD\", frmt(\"xxx.xx\")),     frmt_structure(group_val = \".default\", label_val = \".default\", p = frmt(\"\")),     frmt_structure(group_val = \".default\", label_val = c(\"n\",\"<65 yrs\",\"<12 months\",\"<25\"), p = frmt_when(\">0.99\" ~ \">0.99\",                                                                                  \"<0.001\" ~ \"<0.001\",                                                                                  TRUE ~ frmt(\"x.xxx\", missing = \"\")))   ),      # Specify row group plan   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = \".default\", element_block(post_space = \" \")),     label_loc = element_row_grp_loc(location = \"column\")   ),      # Specify column styling plan   col_style_plan = col_style_plan(     col_style_structure(align = c(\".\",\",\",\" \"), col = vars(everything()))   ),      # remove extra cols   col_plan = col_plan(-grp,                        -starts_with(\"ord\") ) ) %>%    print_mock_gt(data_demog %>% select(-value))"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/mock_examples.html","id":"efficacy-mocks","dir":"Articles","previous_headings":"","what":"Efficacy Mocks","title":"Mock Examples","text":"","code":"tfrmt(   group = group,   label = label,   column = column,   param = param,   value = value,   sorting_cols = c(ord1, ord2),   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = list(group=\"Change from Baseline\"), element_block(post_space = \" \")),     row_grp_structure(group_val = list(group=\"p-value (Dose Response)\"), element_block(post_space = \" \")),     row_grp_structure(group_val = list(group=\"p-value (Xan - Placebo)\"), element_block(post_space = \" \"))   ),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \"n\", frmt(\"xx\")),      frmt_structure(group_val = \".default\", label_val = \"Median (Range)\", frmt_combine(\"{median} ({min};{max})\",                                                                                       median = frmt(\"xx.x\"),                                                                                       min = frmt(\"xx\"),                                                                                       max = frmt(\"xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"Mean (SD)\", frmt_combine(\"{mean} ({sd})\",                                                                                       mean = frmt(\"xx.x\"),                                                                                       sd = frmt(\"xx.xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"Diff of LS Means (SE)\", frmt_combine(\"{diff} ({diff_se})\",                                                                                  diff = frmt(\"xx.x\"),                                                                                  diff_se = frmt(\"xx.xx\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \"95% CI\", frmt_combine(\"({diff_lcl};{diff_ucl})\",                                                                               diff_lcl = frmt(\"xx.x\"),                                                                               diff_ucl = frmt(\"xx.x\"), missing = \" \")),     frmt_structure(group_val = \".default\", label_val = \".default\", p.value = frmt_when(\"<0.001\" ~ \"<0.001\",                                                                                        \">0.99\" ~ \">0.99\",                                                                                        TRUE ~ frmt(\"x.xxx\", missing = \" \")))   ),   col_plan = col_plan(     group, label,     contains(\"Placebo\"),     contains(\"Low\"),     contains(\"High\")   ) ) %>%   print_mock_gt(data_efficacy %>% select(-value))"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/print_to_ggplot.html","id":"survival-analysis-example","dir":"Articles","previous_headings":"","what":"Survival analysis example","title":"Print to ggplot","text":"common use case function production survival plots. following code sets Kaplan Meier plot using colon data survival package. print_to_gt, print_to_ggplot requires input table label, value,param column variables. following code sets mock input table. tfrmt object required specify formatting ggplot table. can piped print_to_ggplot seen .  Now using patchwork package can combine original plot, ggplot table. Since want table plot, use /. information using patchwork, refer documentation  don’t duplicate time points, can just remove x-axis labels using theme","code":"# Set up survival data fit <- survfit(Surv(time,status)~rx, data=colon)  # Plot kaplan meier between times 0-3000 km_plot<-autoplot(fit)+   xlim(c(0,3000)) risk<-tibble(time=c(rep(c(0,1000,2000,3000),3)),              label=c(rep(\"Obs\",4),rep(\"Lev\",4),rep(\"Lev+5FU\",4)),              value=c(630,372,256,11,620,360,266,8,608,425,328,14),              param=rep(\"n\",12)) table <-tfrmt(   # specify columns in the data   label = label ,   column = time,   param = param,   value = value,   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt(\"X\"))   )) %>%   print_to_ggplot(risk) table km_plot/table table2 <- table +   theme(axis.text.x = NULL)   km_plot/table2"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/print_to_ggplot.html","id":"using-grouping","dir":"Articles","previous_headings":"Survival analysis example","what":"Using grouping","title":"Print to ggplot","text":"can also apply groups ggplot table. code adds groupings risk table mock example. Now need add group tfrmt specification patch together: ## Forest Plots logic used survival plots can also used create forest plots, instead stacking plots just put side side. First can make table using print_to_ggplot.  Next need plot rate ratios. plot requires bit finessing need remove y-axis label can combined table plot. Also need add row data group value make plots match correctly.  Now thanks patchwork combining two plots relatively easy.","code":"riska<- risk %>%   mutate(group=\"A\")  riskb<- risk %>%   mutate(group=\"B\",          value=value+10)  risk_group<-riska %>%   rbind(riskb) group_table<-tfrmt(   # specify columns in the data   group = group,   label = label ,   column = time,   param = param,   value = value,    body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt(\"X\"))   )) %>%    print_to_ggplot(risk_group) +   theme(axis.text.x = NULL)  km_plot/group_table aes <- factor(c(\"Fever\", \"Malaise\", \"Local Allergic Reaction\"),               levels = c(\"Fever\", \"Malaise\", \"Local Allergic Reaction\"))  tbl_dat <- tibble(   grp = \"1 to 7 days after treatment\",   ae = rep(aes, each = 4),   trt = rep(rep(c(\"TRT A\", \"Placebo\"), each = 2), 3),   param = rep(c(\"n\", \"pct\"), 6),   value = c(60, 7.7, 26, 3.3, 183, 23.5, 89, 11.4, 94, 12, 55, 7) )  tbl_p <- tfrmt_n_pct() %>%    tfrmt(label = ae,         group = grp,         column = trt,         param = param,          value = \"value\") %>%    print_to_ggplot(tbl_dat) tbl_p plot_dat <- tibble(   ae = aes,   mean = c(3, 2.3, 2),   lower = c(1.95, 1.9, 1.2),   upper = c(4, 3.5, 3.4) ) %>%    bind_rows(c(ae = \"1 to 7 days after treatment\"))  plot_p <- ggplot(data=plot_dat, aes(x=ae, y=mean, ymin=lower, ymax=upper)) +   geom_pointrange() +    geom_hline(yintercept=1, lty=2) +  # add a dotted line at x=1 after flip   coord_flip() +   xlab(\"\") +   ylab(\"Adjusted Rate Ratio (95% CI)\")+   scale_x_discrete(limits=rev)+   scale_y_discrete(position = \"right\") +    theme_minimal() +   theme(axis.text.y=element_blank(), #remove x axis labels         axis.ticks.y=element_blank()) plot_p tbl_p + plot_p #> Warning: Removed 1 rows containing missing values (`geom_pointrange()`)."},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/print_to_ggplot.html","id":"table-styling","dir":"Articles","previous_headings":"","what":"Table Styling","title":"Print to ggplot","text":"final note ggplot tables. styling can adjusted theme table create. , table body needs adjusted print_to_ggplot call, supplying requirements .... need change size table boy just add print_to_ggplot.","code":"tfrmt_n_pct() %>%    tfrmt(label = ae,         group = grp,         column = trt,         param = param,          value = \"value\") %>%    print_to_ggplot(tbl_dat, size = 8)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/row_grp_plan.html","id":"row-group-structure","dir":"Articles","previous_headings":"","what":"Row group structure","title":"Row Group Plan","text":"Like body_plan, tfrmt’s row group plan (row_grp_plan), allows user specify number row group structure (row_grp_structure) objects, define groups rows appear. row_grp_structure contains group_val argument define relevant group values; behaves like filter relevant values. , row_grp_structure essentially performs group_by apply formatting within unique combination group values.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/row_grp_plan.html","id":"element-block-objects","dir":"Articles","previous_headings":"Row group structure","what":"Element block objects","title":"Row Group Plan","text":"row_grp_structures purely aesthetic nature, accept element_block objects define styling given group rows. element_block objects work progress, currently provide ability add empty rows lines following groups data. add post space groups values based variable “grp1” (group tfrmt object) following: row_grp_structure(group_val = \".default\", element_block(post_space = \"   \")) add post space values grp1 = “grp1_1” following: group_val = \"grp1_1\" table rather group_val = \"default\" previously, post space grp1_2 removed.","code":"my_tfrmt <- tfrmt(   group = grp1,   label = label,   param = param,    value = value,   column = column,   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = \".default\", element_block(post_space = \"   \"))     ),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"xx\"))   ) )  print_mock_gt(my_tfrmt, .default = 1:2)%>%     tab_style(       style = cell_text(whitespace = \"pre\", align = \"left\"),       locations = cells_stub()     ) my_tfrmt <- tfrmt(   group = grp1,   label = label,   param = param,    value = value,   column = column,   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = \"grp1_1\", element_block(post_space = \"   \"))     ),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"xx\"))   ) )  print_mock_gt(my_tfrmt, .default = 1:2)%>%     tab_style(       style = cell_text(whitespace = \"pre\", align = \"left\"),       locations = cells_stub()     )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/row_grp_plan.html","id":"row-labels","dir":"Articles","previous_headings":"","what":"Row labels","title":"Row Group Plan","text":"gt package offers default displays group row labels cover use cases, particularly user provides one group variable. , tfrmt offers multiple objects display. Let’s see differ following options: indented: Combined group/label variables spanning: Group label row spanning header column: Group label separate column noprint: Drop group labels","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/row_grp_plan.html","id":"indented","dir":"Articles","previous_headings":"Row labels","what":"indented","title":"Row Group Plan","text":"tfrmt combine group label variables single column, using indentation distinguish hierarchies:","code":"my_tfrmt <- tfrmt(   group = c(grp1, grp2),   label = label,   param = param,    value = value,   column = column,   row_grp_plan = row_grp_plan(label_loc = element_row_grp_loc(location = \"indented\")),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"xx\"))   ) )  print_mock_gt(my_tfrmt, .default = 1:2)%>%     tab_style(       style = cell_text(whitespace = \"pre\", align = \"left\"),       locations = cells_stub()     )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/row_grp_plan.html","id":"spanning","dir":"Articles","previous_headings":"Row labels","what":"spanning","title":"Row Group Plan","text":"default option gt: group labels become spanning headers rows. Note case multiple group variables, top level group variable spanning row header, rest combine label variable using indentation:","code":"my_tfrmt <- tfrmt(   group = c(grp1, grp2),   label = label,   param = param,    value = value,   column = column,   row_grp_plan = row_grp_plan(label_loc = element_row_grp_loc(location = \"spanning\")),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"xx\"))   ) )  print_mock_gt(my_tfrmt, .default = 1:2)%>%     tab_style(       style = cell_text(whitespace = \"pre\", align = \"left\"),       locations = cells_stub()     )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/row_grp_plan.html","id":"column","dir":"Articles","previous_headings":"Row labels","what":"column","title":"Row Group Plan","text":"case, group labels become separate column left. Note case multiple group variables, top level group variable column, rest combine label variable using indentation:","code":"my_tfrmt <- tfrmt(   group = c(grp1, grp2),   label = label,   param = param,    value = value,   column = column,   row_grp_plan = row_grp_plan(label_loc = element_row_grp_loc(location = \"column\")),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"xx\"))   ) )  print_mock_gt(my_tfrmt, .default = 1:2)%>%     tab_style(       style = cell_text(whitespace = \"pre\", align = \"left\"),       locations = cells_stub()     )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/row_grp_plan.html","id":"noprint","dir":"Articles","previous_headings":"Row labels","what":"noprint","title":"Row Group Plan","text":"user may also suppress printing group variable specifying “noprint” option.","code":"my_tfrmt <- tfrmt(   group = c(grp1, grp2),   label = label,   param = param,    value = value,   column = column,   row_grp_plan = row_grp_plan(label_loc = element_row_grp_loc(location = \"noprint\")),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"xx\"))   ) )  print_mock_gt(my_tfrmt, .default = 1:2)"},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/templates.html","id":"creating-a-standard-tfrmt","dir":"Articles","previous_headings":"","what":"Creating a Standard tfrmt","title":"Creating Template tfrmts","text":"first step creating Adverse Events table template determine constants format. requires standards can expected allows construction basic tfrmt: First, can provide instructions cell formatting via body_plan. know cells consistently formatted follows: Total counts whole numbers Cells within treatment group column combination count percent population. percent 100 zero, value blank. p-values formatted : >.99 displayed “>0.99”, <0.001 displayed “<0.001”, values displayed three decimal places. Missing p-values replaced “–”. Next, data standardized analysis results dataset, can pre-fill expected column names. also ensures data abides standard names set consistently: AEBODYSYS defines body systems overall grouping data. AETERM defines labels display table. value defines values present table. treatment defines treatment value. defines column span. col defines column value. param column describes params value column. “AEs” indicates number value represents total counts, “n” represents count specific AE, “pct” percent treatment population, finally “pval” p-value. information can construct template AE tfrmt:","code":"ae_tfrmt_template <- tfrmt(     group = AEBODSYS,     label = AETERM,     param = param,     column = c(treatment, col),     value = value,   body_plan = body_plan(     ## All entries where the param column is `AEs` (representing total counts)     frmt_structure(       group_val = \".default\",       label_val = \".default\",       AEs = frmt(\"[XXX]\")       ),          ## Combine entries where param column is `n` and `pct` to create a cell for     ## that population     frmt_structure(       group_val = \".default\",       label_val = \".default\",       frmt_combine(         \"{n} {pct}\",         n = frmt(\"XXX\"),         pct = frmt_when(           \"==100\" ~ \"\",           \"==0\" ~ \"\",           TRUE ~ frmt(\"(xx.x %)\")           )         )       ),          ## All entries where param column is `pval`, format conditionally.     ## When the value is missing, replace the NA with \"--\".     frmt_structure(        group_val = \".default\",         label_val = \".default\",        pval = frmt_when(          \">0.99\" ~ \">0.99\",          \"<0.001\" ~ \"<0.001\",          TRUE ~ frmt(\"x.xxx\", missing = \"--\")          )     )   ) )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/templates.html","id":"functionalising-the-template","dir":"Articles","previous_headings":"","what":"Functionalising the Template","title":"Creating Template tfrmts","text":"Now tfrmt, can wrap function form template. allows us many layers ’d like. example, can organization-level template used across tables, domain-level template used across tables given domain, project-level template used study-specific tables. tfrmt offers function layer_tfrmt(), provides ability layering tfrmt together. first two arguments tfrmt objects layered. default body_plans tfrmt joined together. leverage function creation template. See example creating template based function layering tfrmt together. scenario base AE template body_plan values handling total counts, case counts, percents, p-values. create another template p-values, finally layer study specific tfrmt. Using templates learned layering vignette, can apply multiple templates cleanly within pipe: See results table :","code":"ae_base_tfrmt_template <- function(tfrmt_obj){      ae_base <- tfrmt(     group = AEBODSYS,     label = AETERM,     param = param,     column = c(treatment, col),     value = value,     body_plan = body_plan(       ## All entries where the param column is `AEs` (representing total counts)       frmt_structure(         group_val = \".default\",         label_val = \".default\",         AEs = frmt(\"[XXX]\")         ),              ## Combine entries where param column is `n` and `pct` to create a cell for       ## that population       frmt_structure(         group_val = \".default\",         label_val = \".default\",         frmt_combine(           \"{n} {pct}\",           n = frmt(\"XXX\"),           pct = frmt_when(             \"==100\" ~ \"\",             \"==0\" ~ \"\",             TRUE ~ frmt(\"(xx.x %)\")             )           )         )     )   )       layer_tfrmt(x = tfrmt_obj, y = ae_base)    }  ae_pval_tfrmt_template <- function(tfrmt_obj){      ae_pval_template <- tfrmt(     body_plan = body_plan(       ## All entries where param column is `pval`, format conditionally.       ## When the value is missing, replace the NA with \"--\".       frmt_structure(          group_val = \".default\",           label_val = \".default\",          pval = frmt_when(            \">0.99\" ~ \">0.99\",            \"<0.001\" ~ \"<0.001\",            TRUE ~ frmt(\"x.xxx\", missing = \"--\")            )       )     )   )      layer_tfrmt(tfrmt_obj, ae_pval_template)    } study_ae_tfrmt_multi_layer <- ae_base_tfrmt_template() %>%    ae_pval_tfrmt_template() %>%    tfrmt(     title = \"Adverse Events for CDISC Pilot Study\",     subtitle = \"Data subset to AEs with >10% prevalence in the High Dose group\",          ## Sorting columns of rows     sorting_cols = c(ord1, ord2),          ## Nest Preferred terms under SOC     row_grp_plan = row_grp_plan(label_loc = element_row_grp_loc(location = \"indented\")),          ## alisgnment of columns     col_style_plan = col_style_plan(       col_style_structure(align = c(\".\",\",\",\" \"), col = vars(starts_with(\"p_\")))     ),          ## remove order columns from final table     col_plan = col_plan(       span_structure(         treatment = c(           \"Xanomeline High Dose (N=84)\" = `Xanomeline High Dose`,           \"Xanomeline Low Dose (N=84)\" = `Xanomeline Low Dose`,           \"Placebo (N=86)\" = Placebo         ),         col = c(           `n (%)` = `n_pct` ,           `[AEs]` = `AEs`           )       ),       span_structure(         treatment = c(           \"Fisher's Exact p-values\" = fisher_pval         ),         col = c(           `Placebo vs. Low Dose` = `p_low` ,           `Placebo vs. High Dose` = `p_high`         )       ),       - starts_with(\"ord\")     )   ) ## filter to keep only AEs with >10% prevalence in the High Dose group data_ae2 <- data_ae %>%    group_by(AEBODSYS, AETERM) %>%    mutate(pct_high = value[col2==\"Xanomeline High Dose\" & param==\"pct\"]) %>%    ungroup %>%    filter(pct_high >10) %>%    select(-pct_high) %>%    rename(     treatment = col2,     col = col1   )  study_ae_tfrmt_multi_layer %>%    print_to_gt(data_ae2) %>%    tab_options(     container.width = 1000   )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/templates.html","id":"alternatives-to-full-templates","dir":"Articles","previous_headings":"","what":"Alternatives to Full Templates","title":"Creating Template tfrmts","text":"addition defining full tfrmt templates, users can also create reusable frmt templates. benefit teams can use frmts tfrmt directly can sure table comply value presentation expected organization. common pre-defined frmts may include p-value displays, integers, n (%), among things. Now defined frmts, can use tfrmt generate table .","code":"# defined frmts  int_frmt <- frmt(\"[XXX]\")  pval_frmt <- frmt_when(            \">0.99\" ~ \">0.99\",            \"<0.001\" ~ \"<0.001\",            TRUE ~ frmt(\"x.xxx\", missing = \"--\")            )  n_pct_frmt <- frmt_combine(           \"{n} {pct}\",           n = frmt(\"XXX\"),           pct = frmt_when(             \"==100\" ~ \"\",             \"==0\" ~ \"\",             TRUE ~ frmt(\"(xx.x %)\")             )           )  ## frmts as functions  int_frmt_func <- function(ints = 2){   str_exp <- paste0(\"[\", paste0(rep(\"X\", ints), collapse = \"\"), \"]\")   frmt(str_exp) } tfrmt(     group = AEBODSYS,     label = AETERM,     param = param,     column = c(treatment,col),     value = value,          body_plan = body_plan(       frmt_structure(         group_val = \".default\",         label_val = \".default\",         AEs = int_frmt_func(3)         ),              frmt_structure(         group_val = \".default\",         label_val = \".default\",         n_pct_frmt         ),              frmt_structure(          group_val = \".default\",           label_val = \".default\",          pval = pval_frmt       )     ),          ## remove order columns from final table     col_plan = col_plan(       span_structure(         treatment = c(           \"Xanomeline High Dose (N=84)\" = `Xanomeline High Dose`,           \"Xanomeline Low Dose (N=84)\" = `Xanomeline Low Dose`,           \"Placebo (N=86)\" = Placebo         ),         col = c(           `n (%)` = `n_pct` ,           `[AEs]` = `AEs`           )       ),       span_structure(         treatment = c(           \"Fisher's Exact p-values\" = fisher_pval         ),         col = c(           `Placebo vs. Low Dose` = `p_low` ,           `Placebo vs. High Dose` = `p_high`         )       ),       - starts_with(\"ord\")     )        ) %>%    print_to_gt(data_ae2) %>%    tab_options(     container.width = 1000   )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/templates.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Creating Template tfrmts","text":"list ideas best practices comes defining tfrmt templates use across organization. comes experience writing using tfrmt potential change. template tfrmt intended provide interface creating complex tfrmts easily. creating function, helpful differentiate aspects display remain constant likely change across tables studies. changes can captured arguments function. functions serve provide way interact create tfrmts standard tables way customization specific table’s tfrmt simplified. However, normal function development, balanced limiting number arguments necessary pass get functional tfrmt. example, tfrmt_sigdig accepts minimal set arguments, including data.frame tibble, define complex body_plan. Simplifying way users may enter complex set instructions without manually type part strength. addition minimizing arguments tfrmt template, generally simpler define enforce standards around things people can see table. example, grouping, labels, value formats easy see understand. Standardizing around meta information impacts table may easily seen, value context (params), difficult.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/articles/unusual_tables.html","id":"multiple-columns-of-row-labels","dir":"Articles","previous_headings":"","what":"Multiple columns of Row Labels","title":"Unusual Tables","text":"unusual listings (tables) multiple row label columns. happens, often easier avoid using gt’s --box stub functions/formatting. example table like “Summary Number Subjects Site” CDISC pilot. make table values long “Pooled Id” “Site Id” columns, group label variables. also need column parameters even though . data standard ARD format can make tfrmt. makes tfrmt different won’t include group label, two ID columns displayed regular columns. also means columns table, including ID columns, can ordered via col_plan(). col_plan() follows conventions select() can’t specify order highest level spanning columns lower level columns. , tfrmt respects order things put , used factor populations.","code":"data <- tribble(   ~`Pooled Id`,  ~`Site Id`, \"701\",  \"701\", \"703\",  \"703\", \"704\",  \"704\", \"705\",  \"705\", \"708\",  \"708\", \"709\",  \"709\", \"710\",  \"710\", \"713\",  \"713\", \"716\",  \"716\", \"718\",  \"718\", \"900\",  \"702\", \"900\",  \"706\", \"900\",  \"707\", \"900\",  \"711\", \"900\",  \"714\", \"900\",  \"715\", \"900\",  \"717\", \"Total\", \" \") %>%   crossing(col1 = c(\"Placebo (N=86)\",                    \"Xanomeline Low Dose (N=84)\",                    \"Xanomeline High Dose (N=84)\",                    \"Total (N=254)\"),            col2 = factor(c(\"ITT\", \"Eff\", \"Com\"), levels = c(\"ITT\", \"Eff\", \"Com\"))) %>%   mutate(val = rpois(216, 15), # Here I am just faking the data for display purposes           param = \"val\") tfrmt(   param = \"param\",   value = \"val\",   column = vars(col1, col2),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"XX\"))   ),   row_grp_plan = row_grp_plan(label_loc =element_row_grp_loc(\"column\")),   col_plan = col_plan(     `Pooled Id`,  `Site Id`,     contains(\"Placebo\"),     contains(\"High Dose\"),     contains(\"Low Dose\"),     everything()   ) ) %>%   print_to_gt(data)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christina Fillmore. Author, maintainer. GlaxoSmithKline Research & Development Limited. Copyright holder, funder. Atorus Research LLC. Copyright holder, funder. Ellis Hughes. Author. Becca Krouse. Author. Karima Ahmad. Author. Shannon Haughton. Author.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fillmore C, Hughes E, Krouse B, Ahmad K, Haughton S (2023). tfrmt: Applies Display Metadata Analysis Results Datasets. https://GSK-Biostatistics.github.io/tfrmt/, https://gsk-biostatistics.github.io/tfrmt/.","code":"@Manual{,   title = {tfrmt: Applies Display Metadata to Analysis Results Datasets},   author = {Christina Fillmore and Ellis Hughes and Becca Krouse and Karima Ahmad and Shannon Haughton},   year = {2023},   note = {https://GSK-Biostatistics.github.io/tfrmt/, https://gsk-biostatistics.github.io/tfrmt/}, }"},{"path":"https://gsk-biostatistics.github.io/tfrmt/index.html","id":"tfrmt-","dir":"","previous_headings":"","what":"Applies Display Metadata to Analysis Results Datasets","title":"Applies Display Metadata to Analysis Results Datasets","text":"tfrmt package provides language defining display-related metadata, can used automate easily update output formats. clinical trials, displays generally quite standard, frequent, highly specific formatting tweaks (e.g., rounding, footnotes, headers) common. Prior data analysis, study teams often generate mock displays represent desired end product sponsors approve programmers replicate. process typically highly manual separate programming . also high importance placed verifying accuracy results via QC (Quality Control) process double programming. Finally, movement toward industry standard data structure Analysis Results Data “ARD”, means analysis results datasets consistent structures column names. Specifically, ARD long, 1 record per computed value. information ARDs click . tfrmt supports vision : Mock displays integrated programming workflow Results QC’ed prior formatting reduce rework Standard formatting styles can applied little one line code ARD structure can leveraged accommodate variety tables reducing amount repetitive tasks, study teams can focus quality interpretation results .","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/index.html","id":"why-tfrmt","dir":"","previous_headings":"","what":"Why tfrmt?","title":"Applies Display Metadata to Analysis Results Datasets","text":"many existing table-making packages R ecosystem, typically fall one two categories: Table packages perform analyses format results Table packages format output existing data design, tfrmt latter, intended used results computed. makes tfrmt unique, however, offers intuitive interface defining layering standard custom formats often specific clinical trials. also offers novel ability easily generate mock displays using metadata used actual displays. tfrmt built top powerful gt package, intended support variety output formats future.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Applies Display Metadata to Analysis Results Datasets","text":"development version tfrmt can installed :","code":"devtools::install_github(\"GSK-Biostatistics/tfrmt\")"},{"path":"https://gsk-biostatistics.github.io/tfrmt/index.html","id":"input-data-structure","dir":"","previous_headings":"","what":"Input data structure","title":"Applies Display Metadata to Analysis Results Datasets","text":"expect input dataset long, 1 record per computed value. Required columns include: [Optional] 1 group columns, containing grouping values single label column, containing row label values 1 column columns, containing column values single param column, provides label distinct types values single value column, containing computed, raw data values [Optional] 1 sorting_cols columns, containing numeric values used row ordering","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/index.html","id":"functionality","dir":"","previous_headings":"","what":"Functionality","title":"Applies Display Metadata to Analysis Results Datasets","text":"overview possible tfrmt: Create “tfrmt” metadata object containing formatting labelling display Create mock displays based existing sample data prior data ARD-standard compliant facilitates reuse automation benefits tfrmt: Provides tidyverse-friendly, pipeable interface Leverages gt output engine, allows customizations within gt ","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/index.html","id":"more-info","dir":"","previous_headings":"","what":"More Info","title":"Applies Display Metadata to Analysis Results Datasets","text":"information build tfrmt mocks/tables (like one !), please explore vignettes. Example GT Demography Table","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/apply_frmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply formatting — apply_frmt","title":"Apply formatting — apply_frmt","text":"Apply formatting","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/apply_frmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply formatting — apply_frmt","text":"","code":"apply_frmt(frmt_def, .data, value, mock = FALSE, ...)  # S3 method for frmt apply_frmt(frmt_def, .data, value, mock = FALSE, ...)  # S3 method for frmt_combine apply_frmt(   frmt_def,   .data,   value,   mock = FALSE,   param,   column,   label,   group,   ... )  # S3 method for frmt_when apply_frmt(frmt_def, .data, value, mock = FALSE, ...)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/apply_frmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply formatting — apply_frmt","text":"frmt_def formatting applied .data data, getting changed value value symbol one mock Logical value mock . default FALSE ... additional arguments methods param param column quosure column column columns list quosures label label column quosure group group column list quosures","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/apply_frmt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply formatting — apply_frmt","text":"formatted dataset","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/apply_frmt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply formatting — apply_frmt","text":"","code":"library(tibble) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union # Set up data df <- tibble(x = c(20.12,34.54,12.34))  apply_frmt(  frmt_def = frmt(\"XX.X\"),  .data=df,  value=quo(x)) #> # A tibble: 3 × 1 #>   x     #>   <chr> #> 1 20.1  #> 2 34.5  #> 3 12.3"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/as_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert tfrmt elements — as_json","title":"Convert tfrmt elements — as_json","text":"collection functions used create json json ready objects. primarily intended internal use functions can used externally","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/as_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert tfrmt elements — as_json","text":"","code":"as_json(x)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/as_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert tfrmt elements — as_json","text":"x tfrmt tfrmt element","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/as_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert tfrmt elements — as_json","text":"as_json.tfrmt() return json object methods return list cleaned can directly converted json object","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/big_n_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Big N Structure — big_n_structure","title":"Big N Structure — big_n_structure","text":"Big N structure allows specify values become subject totals (\"big N\" values) formatted table's column labels. Values specified providing value(s) param column values big N's. remove body table place columns matching values column column(s). default formatting N = xx, line, can changed providing different frmt() n_frmt","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/big_n_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Big N Structure — big_n_structure","text":"","code":"big_n_structure(param_val, n_frmt = frmt(\"\\nN = xx\"), by_page = FALSE)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/big_n_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Big N Structure — big_n_structure","text":"param_val row value(s) parameter column values big n's n_frmt frmt() control formatting big n's by_page Option include different big Ns group-defined set pages (defined variables set \".default\" page_plan). Default FALSE, meaning overall Ns applied","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/big_n_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Big N Structure — big_n_structure","text":"big_n_structure object","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/body_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Table Body Plan — body_plan","title":"Table Body Plan — body_plan","text":"Define formatting body contents table series frmt_structures. Structures get applied order bottom , last added structure first applied.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/body_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table Body Plan — body_plan","text":"","code":"body_plan(...)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/body_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table Body Plan — body_plan","text":"... list frmt_structures defining body formatting","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/body_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table Body Plan — body_plan","text":"body_plan object","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/body_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table Body Plan — body_plan","text":"","code":"tfrmt_spec<- tfrmt(       title = \"Table Title\",       body_plan = body_plan(         frmt_structure(           group_val = c(\"group1\"),           label_val = \".default\",           frmt(\"XXX\")         )       )      )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/cleaned_data_to_gt.html","id":null,"dir":"Reference","previous_headings":"","what":"Do all the formatting for the GT — cleaned_data_to_gt","title":"Do all the formatting for the GT — cleaned_data_to_gt","text":"formatting GT","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/cleaned_data_to_gt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do all the formatting for the GT — cleaned_data_to_gt","text":"","code":"cleaned_data_to_gt(x, tfrmt)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/cleaned_data_to_gt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do all the formatting for the GT — cleaned_data_to_gt","text":"x formatted data table tfrmt tfrmt object","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/cleaned_data_to_gt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Do all the formatting for the GT — cleaned_data_to_gt","text":"gt gt_group object","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/col_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Define the Column Plan & Span Structures — col_plan","title":"Define the Column Plan & Span Structures — col_plan","text":"Using <tidy-select> expressions series span_structures, define order columns. selection follows \"last selected\" principals, meaning columns moved last selection opposed preserving first location.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/col_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define the Column Plan & Span Structures — col_plan","text":"","code":"col_plan(..., .drop = FALSE)  span_structure(...)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/col_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define the Column Plan & Span Structures — col_plan","text":"... col_plan span_structure, <tidy-select> arguments, unquoted expressions separated commas, span_structures. span_structures must arguments named match name column input data identify correct columns. See examples .drop Boolean. un-listed columns dropped data. Defaults FALSE.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/col_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define the Column Plan & Span Structures — col_plan","text":"col_plan object span_structure object","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/col_plan.html","id":"column-selection","dir":"Reference","previous_headings":"","what":"Column Selection","title":"Define the Column Plan & Span Structures — col_plan","text":"col_plan gets applied used create output table, underlying logic sorts column specifically selected. column selected twice, last instance column selected location gets rendered. Avoid beginning col_plan() column selection deselection (.e. col_plan(-col1), col_plan(-starts_with(\"value\"))). result table preserving columns \"de-selected\" statement, order columns changed. preferred creating col_plan() identify columns planned preserving order wished appear, <tidy-select> arguments - everything- used, identify de-selection positive-selection. Alternatively, gt table produced, use cols_hide function remove un-wanted columns.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/col_plan.html","id":"images","dir":"Reference","previous_headings":"","what":"Images","title":"Define the Column Plan & Span Structures — col_plan","text":"example outputs:","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/col_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define the Column Plan & Span Structures — col_plan","text":"","code":"library(dplyr)  ## select col_1 as the first column, remove col_last, then create spanning ## structures that have multiple levels ## ## examples also assume the tfrmt has the column argument set to c(c1, c2, c3) ## spanning_col_plan_ex <- col_plan(  col_1,  -col_last,  span_structure(    c1 = \"Top Label Level 1\",    c2 = \"Second Label Level 1.1\",    c3 = c(col_3, col_4)  ),  span_structure(    c1 = \"Top Label Level 1\",    c2 = \"Second Label Level 1.2\",    c3 = starts_with(\"B\")    ),  span_structure(    c1 = \"Top Label Level 1\",    c3 = col_5  ),  span_structure(    c2 = \"Top Label Level 2\",    c3 = c(col_6, col_7)  ) )  ## select my_col_1 as the first column, then ## rename col_2 to new_col_1 and put as the ## second column, then select the rest of the columns renaming_col_plan_ex <- col_plan(    my_col_1,    new_col_1 = col_2,    everything()  )  renaming_col_plan_ex2 <- col_plan(    my_col_1,    new_col_1 = col_2,    span_structure(     c1 = c(`My Favorite span name` = \"Top Label Level 1\"),     c3 = c(`the results column` = col_5)    )  )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/col_style_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Column Style Plan — col_style_plan","title":"Column Style Plan — col_style_plan","text":"Define columns table body aligned, whether left, right specific character(s).","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/col_style_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Column Style Plan — col_style_plan","text":"","code":"col_style_plan(...)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/col_style_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Column Style Plan — col_style_plan","text":"... series col_style_structure objects","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/col_style_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Column Style Plan — col_style_plan","text":"col_style_plan object","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/col_style_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Column Style Plan — col_style_plan","text":"","code":"plan <- col_style_plan(     col_style_structure(col = \"my_var\", align = \"left\", width = 100),     col_style_structure(col = vars(four), align = \"right\"),     col_style_structure(col = vars(two, three), align = c(\".\", \",\", \" \"))    )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/data_ae.html","id":null,"dir":"Reference","previous_headings":"","what":"Adverse Events Analysis Results Data — data_ae","title":"Adverse Events Analysis Results Data — data_ae","text":"dataset containing results needed AE table. Using CDISC pilot data.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/data_ae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adverse Events Analysis Results Data — data_ae","text":"","code":"data_ae"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/data_ae.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Adverse Events Analysis Results Data — data_ae","text":"data frame 2,794 rows 8 variables: AEBODSYS highest level row labels: System Organ Class AETERM specific row labels: Preferred Term col2 higher level column names (spanners) col1 lower level column names param parameter explain value value values put table ord1 controls ordering ord2 ordering controls","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/data_demog.html","id":null,"dir":"Reference","previous_headings":"","what":"Demography Analysis Results Data — data_demog","title":"Demography Analysis Results Data — data_demog","text":"dataset containing results needed demography table. Using CDISC pilot data.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/data_demog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demography Analysis Results Data — data_demog","text":"","code":"data_demog"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/data_demog.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Demography Analysis Results Data — data_demog","text":"data frame 386 rows 7 variables: rowlbl1 highest level row labels rowlbl2 specific row labels param parameter explain value grp grouping column used distinguish continuous categorical ord1 controls ordering ord2 ordering controls column column names value values put table","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/data_efficacy.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficacy Analysis Results Data — data_efficacy","title":"Efficacy Analysis Results Data — data_efficacy","text":"dataset containing results needed Efficacy table. Using CDISC pilot data ADAS-Cog(11).","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/data_efficacy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficacy Analysis Results Data — data_efficacy","text":"","code":"data_efficacy"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/data_efficacy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Efficacy Analysis Results Data — data_efficacy","text":"data frame 70 rows 7 variables: group highest level row labels label specific row labels column column names param parameter explain value value values put table ord1 controls ordering ord2 ordering controls","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/data_labs.html","id":null,"dir":"Reference","previous_headings":"","what":"Labs Analysis Results Data — data_labs","title":"Labs Analysis Results Data — data_labs","text":"dataset containing results needed labs results table. Using CDISC pilot data.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/data_labs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Labs Analysis Results Data — data_labs","text":"","code":"data_labs"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/data_labs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Labs Analysis Results Data — data_labs","text":"data frame 4,950 rows 7 variables: group1 highest level row labels: Lab value class group2 specific row labels: Lab parameter rowlbl specific row labels: Study visit col1 higher level column names (spanners) col2 lower level column names param parameter explain value value values put table ord1 controls ordering ord2 ordering controls ord3 ordering controls","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/display_row_frmts.html","id":null,"dir":"Reference","previous_headings":"","what":"Display formatting applied to each row — display_row_frmts","title":"Display formatting applied to each row — display_row_frmts","text":"Used debugging formatting, easy way allow see formats applied row dataset. Used debugging formatting, easy way allow see formats applied row dataset.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/display_row_frmts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display formatting applied to each row — display_row_frmts","text":"","code":"display_row_frmts(tfrmt, .data, convert_to_txt = TRUE)  display_row_frmts(tfrmt, .data, convert_to_txt = TRUE)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/display_row_frmts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display formatting applied to each row — display_row_frmts","text":"tfrmt tfrmt object apply data .data Data apply tfrmt convert_to_txt Logical value converting formatting text, default TRUE","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/display_row_frmts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display formatting applied to each row — display_row_frmts","text":"formatted tibble formatted tibble","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/display_row_frmts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display formatting applied to each row — display_row_frmts","text":"","code":"library(dplyr)  library(tidyr)   tfrmt_spec <- tfrmt(  label = label,  column = column,  param = param,  value=value,  body_plan = body_plan(    frmt_structure(group_val = \".default\", label_val = \".default\",                   frmt_combine(                     \"{count} {percent}\",                     count = frmt(\"xxx\"),                     percent = frmt_when(\"==100\"~ frmt(\"\"),                                         \"==0\"~ \"\",                                         \"TRUE\" ~ frmt(\"(xx.x%)\"))))  ))   # Create data  df <- crossing(label = c(\"label 1\", \"label 2\"),                 column = c(\"placebo\", \"trt1\"),                 param = c(\"count\", \"percent\")) %>%    mutate(value=c(24,19,2400/48,1900/38,5,1,500/48,100/38))   display_row_frmts(tfrmt_spec,df) #> # A tibble: 8 × 6 #>   label   column  param   value frmt_type    frmt_details        #>   <chr>   <chr>   <chr>   <dbl> <chr>        <chr>               #> 1 label 1 placebo count   24    frmt_combine `{count} {percent}` #> 2 label 1 placebo percent 19    frmt_combine `{count} {percent}` #> 3 label 1 trt1    count   50    frmt_combine `{count} {percent}` #> 4 label 1 trt1    percent 50    frmt_combine `{count} {percent}` #> 5 label 2 placebo count    5    frmt_combine `{count} {percent}` #> 6 label 2 placebo percent  1    frmt_combine `{count} {percent}` #> 7 label 2 trt1    count   10.4  frmt_combine `{count} {percent}` #> 8 label 2 trt1    percent  2.63 frmt_combine `{count} {percent}`  library(dplyr)  library(tidyr)   tfrmt_spec <- tfrmt(  label = label,  column = column,  param = param,  value=value,  body_plan = body_plan(    frmt_structure(group_val = \".default\", label_val = \".default\",                   frmt_combine(                     \"{count} {percent}\",                     count = frmt(\"xxx\"),                     percent = frmt_when(\"==100\"~ frmt(\"\"),                                         \"==0\"~ \"\",                                         \"TRUE\" ~ frmt(\"(xx.x%)\"))))  ))   # Create data  df <- crossing(label = c(\"label 1\", \"label 2\"),                 column = c(\"placebo\", \"trt1\"),                 param = c(\"count\", \"percent\")) %>%    mutate(value=c(24,19,2400/48,1900/38,5,1,500/48,100/38))   display_row_frmts(tfrmt_spec,df) #> # A tibble: 8 × 6 #>   label   column  param   value frmt_type    frmt_details        #>   <chr>   <chr>   <chr>   <dbl> <chr>        <chr>               #> 1 label 1 placebo count   24    frmt_combine `{count} {percent}` #> 2 label 1 placebo percent 19    frmt_combine `{count} {percent}` #> 3 label 1 trt1    count   50    frmt_combine `{count} {percent}` #> 4 label 1 trt1    percent 50    frmt_combine `{count} {percent}` #> 5 label 2 placebo count    5    frmt_combine `{count} {percent}` #> 6 label 2 placebo percent  1    frmt_combine `{count} {percent}` #> 7 label 2 trt1    count   10.4  frmt_combine `{count} {percent}` #> 8 label 2 trt1    percent  2.63 frmt_combine `{count} {percent}`"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/display_val_frmts.html","id":null,"dir":"Reference","previous_headings":"","what":"Display formatted values — display_val_frmts","title":"Display formatted values — display_val_frmts","text":"helper creating positional-alignment specifications col_style_plan. Returns unique formatted values appear column(s) specified. Numeric values represented x's.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/display_val_frmts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display formatted values — display_val_frmts","text":"","code":"display_val_frmts(tfrmt, .data, mock = FALSE, col = NULL)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/display_val_frmts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display formatted values — display_val_frmts","text":"tfrmt tfrmt object apply data .data Data apply tfrmt mock Mock table? TRUE FALSE (default) col Column value align column variable. May quoted unquoted column name, tidyselect semantic, span_structure.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/display_val_frmts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display formatted values — display_val_frmts","text":"text representing character vector formatted values copied modified col_style_plan","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/display_val_frmts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display formatted values — display_val_frmts","text":"","code":"tf_spec <- tfrmt(  group = c(rowlbl1,grp),  label = rowlbl2,  column = column,  param = param,  value = value,  sorting_cols = c(ord1, ord2),  body_plan = body_plan(  frmt_structure(group_val = \".default\", label_val = \".default\", frmt_combine(\"{n} ({pct} %)\",                                                                              n = frmt(\"xxx\"),                                                                              pct = frmt(\"xx.x\"))),  frmt_structure(group_val = \".default\", label_val = \"n\", frmt(\"xxx\")),  frmt_structure(group_val = \".default\", label_val = c(\"Mean\", \"Median\", \"Min\",\"Max\"),                              frmt(\"xxx.x\")),  frmt_structure(group_val = \".default\", label_val = \"SD\", frmt(\"xxx.xx\")),  frmt_structure(group_val = \".default\", label_val = \".default\",                             p = frmt_when(\">0.99\" ~ \">0.99\",                                           \"<0.15\" ~ \"<0.15\",                                           TRUE ~ frmt(\"x.xxx\", missing = \"\"))) ))   display_val_frmts(tf_spec, data_demog, col = vars(everything())) #> c(\"\", #>   \"x\", #>   \" xx\", #>   \"xxx\", #>   \"x.xxx\", #>   \" xx.x\", #>   \"<x.xx\", #>   \"  x.x\", #>   \"xxx.x\", #>   \"  x.xx\", #>   \" xx.xx\", #>   \" xx (xx.x %)\", #>   \"  x ( x.x %)\", #>   \"xxx (xx.x %)\", #>   \"  x (xx.x %)\", #>   \" xx ( x.x %)\")  display_val_frmts(tf_spec, data_demog, col = \"p-value\") #> c(\"\", #>   \"x.xxx\", #>   \"<x.xx\")"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/element_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Element block — element_block","title":"Element block — element_block","text":"Element block","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/element_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Element block — element_block","text":"","code":"element_block(   post_space = c(NULL, \" \", \"-\"),   border = c(NULL, \"outline\", \"bottom\") )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/element_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Element block — element_block","text":"post_space Option create new line group block; specified characters fill cells border Option add solid border group block (rectangle just bottom border)","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/element_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Element block — element_block","text":"element block object","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/element_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Element block — element_block","text":"","code":"tfrmt_spec <- tfrmt(   group = grp1,   label = label,   param = param,   value = value,   column = column,   row_grp_plan = row_grp_plan(     row_grp_structure(group_val = \".default\", element_block(post_space = \"   \"))   ),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"xx\"))   ) )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/element_row_grp_loc.html","id":null,"dir":"Reference","previous_headings":"","what":"Element Row Group Location — element_row_grp_loc","title":"Element Row Group Location — element_row_grp_loc","text":"Element Row Group Location","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/element_row_grp_loc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Element Row Group Location — element_row_grp_loc","text":"","code":"element_row_grp_loc(   location = c(\"indented\", \"spanning\", \"column\", \"noprint\", \"gtdefault\"),   indent = \"  \" )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/element_row_grp_loc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Element Row Group Location — element_row_grp_loc","text":"location Location row group labels. Specifying 'indented' combines group label variables single column sub-group indented parent. 'spanning' 'column' retain highest level group variable column combine remaining group label variables single column sub-groups indented. highest level group column either printed spanning header column gt. 'noprint' option allows user suppress group values printed. Finally, 'gtdefault' option allows users use gt defaults styling multiple group columns. indent string number spaces want indent","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/element_row_grp_loc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Element Row Group Location — element_row_grp_loc","text":"element_row_grp_loc object","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/element_row_grp_loc.html","id":"images","dir":"Reference","previous_headings":"","what":"Images","title":"Element Row Group Location — element_row_grp_loc","text":"example outputs:","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/element_row_grp_loc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Element Row Group Location — element_row_grp_loc","text":"","code":"tfrmt_spec <- tfrmt(   group = c(grp1, grp2),   label = label,   param = param,   value = value,   column = column,   row_grp_plan = row_grp_plan(label_loc = element_row_grp_loc(location = \"noprint\")),   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\", frmt(\"xx\"))   ) )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/footnote_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Footnote Plan — footnote_plan","title":"Footnote Plan — footnote_plan","text":"Defining location content footnotes series footnote structures. structure footnote can applied multiple locations.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/footnote_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Footnote Plan — footnote_plan","text":"","code":"footnote_plan(..., marks = c(\"numbers\", \"letters\", \"standard\", \"extended\"))"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/footnote_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Footnote Plan — footnote_plan","text":"... series footnote_structure() separated commas marks type marks required footnotes, properties inherited tab_footnote gt. Available options \"numbers\", \"letters\", \"standard\" \"extended\" (standard traditional set 4 symbols, extended 6 symbols). default option set \"numbers\".","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/footnote_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Footnote Plan — footnote_plan","text":"footnote plan object","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/footnote_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Footnote Plan — footnote_plan","text":"","code":"# Adds a footnote indicated by letters rather than numbers to Group 1 footnote_plan <- footnote_plan(     footnote_structure(footnote_text = \"Source Note\", group_val = \"Group 1\"),     marks=\"letters\")  # Adds a footnote to the 'Placebo' column footnote_plan <- footnote_plan(     footnote_structure(footnote_text = \"footnote\", column_val = \"Placebo\"),     marks=\"numbers\")"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/footnote_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Footnote Structure — footnote_structure","title":"Footnote Structure — footnote_structure","text":"Footnote Structure","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/footnote_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Footnote Structure — footnote_structure","text":"","code":"footnote_structure(   footnote_text,   column_val = NULL,   group_val = NULL,   label_val = NULL )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/footnote_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Footnote Structure — footnote_structure","text":"footnote_text string text footnote column_val string named list strings represent column apply footnote group_val string named list strings represent value group apply footnote label_val string represents value label apply footnote ","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/footnote_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Footnote Structure — footnote_structure","text":"footnote structure object","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/footnote_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Footnote Structure — footnote_structure","text":"","code":"# Adds a source note aka a footnote without a symbol in the table footnote_structure <- footnote_structure(footnote_text = \"Source Note\")  # Adds a footnote to the 'Placebo' column footnote_structure <- footnote_structure(footnote_text = \"Text\",                                column_val = \"Placebo\")  # Adds a footnote to either 'Placebo' or 'Treatment groups' depending on which # which is last to appear in the column vector footnote_structure <- footnote_structure(footnote_text = \"Text\",       column_val = list(col1 = \"Placebo\", col2= \"Treatment groups\"))  # Adds a footnote to the 'Adverse Event' label footnote_structure <- footnote_structure(\"Text\", label_val = \"Adverse Event\")"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/frmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Table Value Formatting — frmt","title":"Table Value Formatting — frmt","text":"functions provide abstracted way approach define formatting table contents. defining way, formats can layered specific general cell styling can done first. frmt() base definition format. defines spacing, rounding, missing behaviour. frmt_combine() used two rows need combined single cell table. rows needs defined frmt() need share label. frmt_when() used rows format behaviour dependent value written similarly dplyr::case_when(). left hand side equation \"TRUE\"default case right hand side boolean expression \">50\".","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/frmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table Value Formatting — frmt","text":"","code":"frmt(expression, missing = NULL, scientific = NULL, transform = NULL, ...)  frmt_combine(expression, ..., missing = NULL)  frmt_when(..., missing = NULL)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/frmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table Value Formatting — frmt","text":"expression string representing intended format. See details: expression detailed description. missing value missing intended formatted, value place. See details: missing detailed description. scientific string representing intended scientific notation appended expression. Ex. \"e^XX\" \" x10^XX\". transform happen value prior formatting, formula function. Ex. ~.*100if want convert percent decimal prior rounding ... See details: ... detailed description.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/frmt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table Value Formatting — frmt","text":"frmt object","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/frmt.html","id":"expression","dir":"Reference","previous_headings":"","what":"expression","title":"Table Value Formatting — frmt","text":"frmt() numbers represented \"x\". additional character printed -. additional X's present left decimal point value, represented spaces. frmt_combine() defines parameters combined glue::glue() statement. Parameters need equal values param column defined expression \"param1 param2\".","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/frmt.html","id":"missing","dir":"Reference","previous_headings":"","what":"missing","title":"Table Value Formatting — frmt","text":"frmt() Value enter value missing. NULL, value \"\". frmt_combine() defines values combined missing. NULL value \"\".","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/frmt.html","id":"-","dir":"Reference","previous_headings":"","what":"...","title":"Table Value Formatting — frmt","text":"frmt() dots future extensions must empty. frmt_combine() accepts named arguments defining frmt() applied parameters combined. frmt_when()accepts series equations separated commas, similar dplyr::case_when(). left hand side equation \"TRUE\"default case right hand side boolean expression \">50\". right hand side equation frmt() apply left side evaluates TRUE.","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/frmt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table Value Formatting — frmt","text":"","code":"frmt(\"XXX %\") #> < frmt | Expression: `XXX %` >  frmt(\"XX.XXX\") #> < frmt | Expression: `XX.XXX` >  frmt(\"xx.xx\", scientific = \"x10^xx\") #> < frmt | Expression: `xx.xx` >  frmt_combine(  \"{param1} {param2}\",  param1 = frmt(\"XXX %\"),  param2 = frmt(\"XX.XXX\") ) #> < frmt_combine | Expression: `{param1} {param2}` >  frmt_when(   \">3\" ~ frmt(\"(X.X%)\"),   \"<=3\" ~ frmt(\"Undetectable\")   ) #> < frmt_when |   #>   >3 ~ < frmt | Expression: `(X.X%)` > #>   <=3 ~ < frmt | Expression: `Undetectable` >  #>   Missing:   #>  >  frmt_when(   \"==100\"~ frmt(\"\"),   \"==0\"~ \"\",   \"TRUE\" ~ frmt(\"(XXX.X%)\")   ) #> < frmt_when |   #>   ==100 ~ < frmt | Expression: `` > #>   ==0 ~  #>   TRUE ~ < frmt | Expression: `(XXX.X%)` >  #>   Missing:   #>  >"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/frmt_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Structure Object — frmt_structure","title":"Format Structure Object — frmt_structure","text":"Function needed create frmt_structure object, building block body_plan(). specifies rows format applied .","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/frmt_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Structure Object — frmt_structure","text":"","code":"frmt_structure(group_val = \".default\", label_val = \".default\", ...)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/frmt_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Structure Object — frmt_structure","text":"group_val string named list strings represent value group given frmt implemented label_val string represent value label given frmt implemented ... either frmt(), frmt_combine(), frmt_when() object. can named also specify parameter value","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/frmt_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Structure Object — frmt_structure","text":"frmt_structure object","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/frmt_structure.html","id":"images","dir":"Reference","previous_headings":"","what":"Images","title":"Format Structure Object — frmt_structure","text":"example outputs:","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/frmt_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Structure Object — frmt_structure","text":"","code":"sample_structure <- frmt_structure(           group_val = c(\"group1\"),           label_val = \".default\",           frmt(\"XXX\")         ) ## multiple group columns sample_structure <- frmt_structure(           group_val = list(grp_col1 = \"group1\", grp_col2 = \"subgroup3\"),           label_val = \".default\",           frmt(\"XXX\")         )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/frmt_utils.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if input is a frmt — is_frmt","title":"Check if input is a frmt — is_frmt","text":"Check input frmt Check input frmt_combine Check input frmt_when Check input frmt_structure Check input row_grp_structure","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/frmt_utils.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if input is a frmt — is_frmt","text":"","code":"is_frmt(x)  is_frmt_combine(x)  is_frmt_when(x)  is_frmt_structure(x)  is_row_grp_structure(x)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/frmt_utils.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if input is a frmt — is_frmt","text":"x Object check","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/frmt_utils.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if input is a frmt — is_frmt","text":"'TRUE' yes, 'FALSE' ","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/frmt_utils.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if input is a frmt — is_frmt","text":"","code":"x1 <- frmt(\"XXX.XX\") is_frmt(x1) #> [1] TRUE  x2 <- frmt_combine(\"XXX %\",\"XX,XXX\") is_frmt_combine(x2) #> [1] TRUE  x2 <- frmt_when( \">3\" ~ frmt(\"(X.X%)\"), \"<=3\" ~ frmt(\"Undetectable\") ) is_frmt_when(x2) #> [1] TRUE  x3 <- frmt_structure(  group_val = c(\"group1\"),  label_val = \".default\", frmt(\"XXX\") ) is_frmt_structure(x3) #> [1] TRUE  x4 <- row_grp_structure(group_val = c(\"A\",\"C\"), element_block(post_space = \"---\")) is_row_grp_structure(x4) #> [1] TRUE"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/json_to_tfrmt.html","id":null,"dir":"Reference","previous_headings":"","what":"json to tfrmt — json_to_tfrmt","title":"json to tfrmt — json_to_tfrmt","text":"Reader read JSON files/objects tfrmt objects","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/json_to_tfrmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"json to tfrmt — json_to_tfrmt","text":"","code":"json_to_tfrmt(path = NULL, json = NULL)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/json_to_tfrmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"json to tfrmt — json_to_tfrmt","text":"path location json file read json json object read . default null. function read json object preferentially. path json object supplied json object read .","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/layer_tfrmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer tfrmt objects together — layer_tfrmt","title":"Layer tfrmt objects together — layer_tfrmt","text":"Provide utility layering tfrmt objects together. tfrmt's values, preferentially choose second tfrmt default. alternative piping together tfrmt's","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/layer_tfrmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer tfrmt objects together — layer_tfrmt","text":"","code":"layer_tfrmt(x, y, ..., join_body_plans = TRUE)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/layer_tfrmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer tfrmt objects together — layer_tfrmt","text":"x, y tfrmt objects need combined ... arguments passed layer_tfrmt_arg functions combining different tfrmt elements join_body_plans body_plans combined, just keep styling y. See details: join_body_plans details.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/layer_tfrmt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer tfrmt objects together — layer_tfrmt","text":"tfrmt object","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/layer_tfrmt.html","id":"join-body-plan","dir":"Reference","previous_headings":"","what":"join_body_plan","title":"Layer tfrmt objects together — layer_tfrmt","text":"combining two body_plans, body plans stack together, first body plan x tfrmt y tfrmt. means frmt_structures y take priority x. Combining two tfrmt large body_plans can lead slow table evaluation. Consider setting join_body_plan FALSE. y body_plan preserved.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/layer_tfrmt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer tfrmt objects together — layer_tfrmt","text":"","code":"tfrmt_1 <- tfrmt(title = \"title1\")  tfrmt_2 <- tfrmt(title = \"title2\",subtitle = \"subtitle2\")  layered_table_format <- layer_tfrmt(tfrmt_1, tfrmt_2)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/page_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Page Plan — page_plan","title":"Page Plan — page_plan","text":"Defining location /frequency page splits series page_structure's row_every_n argument, respectively.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/page_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Page Plan — page_plan","text":"","code":"page_plan(   ...,   note_loc = c(\"noprint\", \"preheader\", \"subtitle\", \"source_note\"),   max_rows = NULL )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/page_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Page Plan — page_plan","text":"... series page_structure() separated commas note_loc Location note describing table's subset value(s). Useful page_structure contains \".default\" values (meaning table split every unique level grouping variable), variable dropped col_plan. preheader available rtf output. max_rows Option set maximum number rows per page. Takes numeric value.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/page_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Page Plan — page_plan","text":"page_plan object","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/page_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Page Plan — page_plan","text":"","code":"# use of page_struct  page_plan(     page_structure(group_val = \"grp1\", label_val = \"lbl1\")  ) #> $struct_list #> $struct_list[[1]] #> $group_val #> [1] \"grp1\" #>  #> $label_val #> [1] \"lbl1\" #>  #> attr(,\"class\") #> [1] \"page_structure\" \"structure\"      #>  #>  #> $note_loc #> [1] \"noprint\" #>  #> $max_rows #> NULL #>  #> attr(,\"class\") #> [1] \"page_plan\" \"plan\"        # use of #  rows  page_plan(     max_rows = 5  ) #> $struct_list #> list() #>  #> $note_loc #> [1] \"noprint\" #>  #> $max_rows #> [1] 5 #>  #> attr(,\"class\") #> [1] \"page_plan\" \"plan\""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/page_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Page structure — page_structure","title":"Page structure — page_structure","text":"Page structure","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/page_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Page structure — page_structure","text":"","code":"page_structure(group_val = NULL, label_val = NULL)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/page_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Page structure — page_structure","text":"group_val string named list strings represent value group split . Set \".default\" split occur every unique value variable. label_val string represents value label split . Set \".default\" split occur every unique value variable.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/page_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Page structure — page_structure","text":"page structure object","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/page_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Page structure — page_structure","text":"","code":"# split page after every unique level of the grouping variable  page_structure(group_val = \".default\", label_val = NULL) #> $group_val #> [1] \".default\" #>  #> $label_val #> NULL #>  #> attr(,\"class\") #> [1] \"page_structure\" \"structure\"        # split page after specific levels  page_structure(group_val = \"grp1\", label_val = \"lbl3\") #> $group_val #> [1] \"grp1\" #>  #> $label_val #> [1] \"lbl3\" #>  #> attr(,\"class\") #> [1] \"page_structure\" \"structure\""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/param_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set custom parameter-level significant digits rounding — param_set","title":"Set custom parameter-level significant digits rounding — param_set","text":"Set custom parameter-level significant digits rounding","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/param_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set custom parameter-level significant digits rounding — param_set","text":"","code":"param_set(...)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/param_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set custom parameter-level significant digits rounding — param_set","text":"... Series name-value pairs, optionally formatted using glue::glue() syntax (note glue syntax required combined parameters).name represents parameter value represents number places round parameter . combined parameters (e.g., \"min, max\"), value vector length (e.g., c(1,1)).","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/param_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set custom parameter-level significant digits rounding — param_set","text":"list default parameter-level significant digits rounding","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/param_set.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set custom parameter-level significant digits rounding — param_set","text":"Type param_set() console view package defaults. Use function add defaults /override included defaults name. values integers, use NA decimal places added.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/param_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set custom parameter-level significant digits rounding — param_set","text":"","code":"# View included defaults param_set() #> $min #> [1] 1 #>  #> $max #> [1] 1 #>  #> $median #> [1] 1 #>  #> $`{mean} ({sd})` #> [1] 1 2 #>  #> $n #> [1] NA #>   # Update the defaults param_set(\"{mean} ({sd})\" = c(2,3), \"pct\" = 1) #> $min #> [1] 1 #>  #> $max #> [1] 1 #>  #> $median #> [1] 1 #>  #> $n #> [1] NA #>  #> $`{mean} ({sd})` #> [1] 2 3 #>  #> $pct #> [1] 1 #>   # Separate mean and SD to different lines param_set(\"mean\" = 2, \"sd\" = 3) #> $min #> [1] 1 #>  #> $max #> [1] 1 #>  #> $median #> [1] 1 #>  #> $n #> [1] NA #>  #> $mean #> [1] 2 #>  #> $sd #> [1] 3 #>   # Add formatting using the glue syntax param_set(\"{pct} %\" = 1) #> $min #> [1] 1 #>  #> $max #> [1] 1 #>  #> $median #> [1] 1 #>  #> $`{mean} ({sd})` #> [1] 1 2 #>  #> $n #> [1] NA #>  #> $`{pct} %` #> [1] 1 #>"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/print_mock_gt.html","id":null,"dir":"Reference","previous_headings":"","what":"Print mock table to GT — print_mock_gt","title":"Print mock table to GT — print_mock_gt","text":"Print mock table GT","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/print_mock_gt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print mock table to GT — print_mock_gt","text":"","code":"print_mock_gt(tfrmt, .data = NULL, .default = 1:3, n_cols = NULL)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/print_mock_gt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print mock table to GT — print_mock_gt","text":"tfrmt tfrmt mock table based .data Optional data. missing, group values, labels values parameter values estimated based tfrmt .default sequence replace default values dataset provided n_cols number columns. used mock data provided. supplied, default using col_plan tfrmt. neither available use 3.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/print_mock_gt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print mock table to GT — print_mock_gt","text":"stylized gt object","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/print_mock_gt.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print mock table to GT — print_mock_gt","text":"","code":"# Create tfrmt specification   tfrmt_spec <- tfrmt( label = label, column =   column, param = param, body_plan = body_plan( frmt_structure(group_val =   \".default\", label_val = \".default\", frmt_combine( \"{count} {percent}\",   count = frmt(\"xxx\"), percent = frmt_when(\"==100\"~ frmt(\"\"), \"==0\"~ \"\",   \"TRUE\" ~ frmt(\"(xx.x%)\")))) ))    # Print mock table using default   print_mock_gt(tfrmt = tfrmt_spec) # Create mock data   df <- crossing(label = c(\"label 1\", \"label 2\",   \"label 3\"), column = c(\"placebo\", \"trt1\", \"trt2\"), param = c(\"count\",   \"percent\"))    # Print mock table using mock data   print_mock_gt(tfrmt_spec, df)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/print_to_ggplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Print to ggplot — print_to_ggplot","title":"Print to ggplot — print_to_ggplot","text":"Print ggplot","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/print_to_ggplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print to ggplot — print_to_ggplot","text":"","code":"print_to_ggplot(tfrmt, .data, ...)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/print_to_ggplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print to ggplot — print_to_ggplot","text":"tfrmt tfrmt object dictate structure ggplot object .data Data style order make ggplot object ... Inputs geom_text modify style table body","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/print_to_ggplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print to ggplot — print_to_ggplot","text":"stylized ggplot object","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/print_to_ggplot.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print to ggplot — print_to_ggplot","text":"","code":"# Create data risk<-tibble(time=c(rep(c(0,1000,2000,3000),3)),             label=c(rep(\"Obs\",4),rep(\"Lev\",4),rep(\"Lev+5FU\",4)),             value=c(630,372,256,11,620,360,266,8,608,425,328,14),             param=rep(\"n\",12))  table<-tfrmt(  label = label ,  column = time,  param = param,  value = value) %>%   print_to_ggplot(risk)  table"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/print_to_gt.html","id":null,"dir":"Reference","previous_headings":"","what":"Print to gt — print_to_gt","title":"Print to gt — print_to_gt","text":"Print gt","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/print_to_gt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print to gt — print_to_gt","text":"","code":"print_to_gt(tfrmt, .data)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/print_to_gt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print to gt — print_to_gt","text":"tfrmt tfrmt object dictate structure table .data Data style order make table","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/print_to_gt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print to gt — print_to_gt","text":"stylized gt object","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/print_to_gt.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print to gt — print_to_gt","text":"","code":"library(dplyr) # Create tfrmt specification tfrmt_spec <- tfrmt(   label = label,   column = column,   param = param,   value=value,   body_plan = body_plan(     frmt_structure(group_val = \".default\", label_val = \".default\",                    frmt_combine(                      \"{count} {percent}\",                      count = frmt(\"xxx\"),                      percent = frmt_when(\"==100\"~ frmt(\"\"),                                          \"==0\"~ \"\",                                          \"TRUE\" ~ frmt(\"(xx.x%)\"))))   ))  # Create data df <- crossing(label = c(\"label 1\", \"label 2\"),                column = c(\"placebo\", \"trt1\"),                param = c(\"count\", \"percent\")) %>%       mutate(value=c(24,19,2400/48,1900/38,5,1,500/48,100/38))  print_to_gt(tfrmt_spec,df)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/row_grp_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Row Group Plan — row_grp_plan","title":"Row Group Plan — row_grp_plan","text":"Define look table groups output. function allows add spaces blocks allows control groups viewed whether span entire table nested column.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/row_grp_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row Group Plan — row_grp_plan","text":"","code":"row_grp_plan(..., label_loc = element_row_grp_loc(location = \"indented\"))"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/row_grp_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row Group Plan — row_grp_plan","text":"... Row group structure objects separated commas label_loc element_row_grp_loc() object specifying location","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/row_grp_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row Group Plan — row_grp_plan","text":"row_grp_plan object","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/row_grp_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Row Group Plan — row_grp_plan","text":"","code":"## single grouping variable example   sample_grp_plan <- row_grp_plan(     row_grp_structure(group_val = c(\"A\",\"C\"), element_block(post_space = \"---\")),     row_grp_structure(group_val = c(\"B\"), element_block(post_space = \" \")),     label_loc = element_row_grp_loc(location = \"column\")   )    ## example with multiple grouping variables   sample_grp_plan <- row_grp_plan(      row_grp_structure(group_val = list(grp1 = \"A\", grp2 = \"b\"), element_block(post_space = \" \")),      label_loc = element_row_grp_loc(location = \"spanning\")      )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/row_grp_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Row Group Structure Object — row_grp_structure","title":"Row Group Structure Object — row_grp_structure","text":"Function needed create row_grp_structure object, building block row_grp_plan()","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/row_grp_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row Group Structure Object — row_grp_structure","text":"","code":"row_grp_structure(group_val = \".default\", element_block)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/row_grp_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row Group Structure Object — row_grp_structure","text":"group_val string named list strings represent value group given frmt implemented element_block element_block() object define block styling","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/row_grp_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row Group Structure Object — row_grp_structure","text":"row_grp_structure object","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/row_grp_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Row Group Structure Object — row_grp_structure","text":"","code":"## single grouping variable example row_grp_structure(group_val = c(\"A\",\"C\"), element_block(post_space = \"---\")) #> $group_val #> [1] \"A\" \"C\" #>  #> $block_to_apply #> List of 2 #>  $ post_space: chr \"---\" #>  $ border    : chr [1:2] \"outline\" \"bottom\" #>  - attr(*, \"class\")= chr [1:2] \"element_block\" \"element\" #>  #> attr(,\"class\") #> [1] \"row_grp_structure\" \"frmt_table\"         ## example with multiple grouping variables row_grp_structure(group_val = list(grp1 = \"A\", grp2 = \"b\"), element_block(post_space = \" \")) #> $group_val #> $group_val$grp1 #> [1] \"A\" #>  #> $group_val$grp2 #> [1] \"b\" #>  #>  #> $block_to_apply #> List of 2 #>  $ post_space: chr \" \" #>  $ border    : chr [1:2] \"outline\" \"bottom\" #>  - attr(*, \"class\")= chr [1:2] \"element_block\" \"element\" #>  #> attr(,\"class\") #> [1] \"row_grp_structure\" \"frmt_table\""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Table Format — tfrmt","title":"Table Format — tfrmt","text":"tfrmt, \"table format\" way pre-define non-data components tables, data handled added: .e. title, footers, headers, span headers, cell formats. addition, tfrmt's can layered, building one table format next. cases one value can used, newly defined tfrmt accepts latest tfrmt","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table Format — tfrmt","text":"","code":"tfrmt(   tfrmt_obj,   group = vars(),   label = quo(),   param = quo(),   value = quo(),   column = vars(),   title,   subtitle,   row_grp_plan,   body_plan,   col_style_plan,   col_plan,   sorting_cols,   big_n,   footnote_plan,   page_plan,   ... )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table Format — tfrmt","text":"tfrmt_obj tfrmt object base new format group grouping vars input dataset label label column input dataset param param column input dataset value value column input dataset column column names column input dataset title title table subtitle subtitle table row_grp_plan plan row groups blocking. Takes row_grp_plan() body_plan combination formatting input data. Takes body_plan() col_style_plan style columns including alignment (left, right, character) width. Takes col_style_plan() col_plan col_plan object used select, rename, nest columns. Takes col_plan() sorting_cols columns determine sorting output big_n format subject totals (\"big Ns\") inclusion column labels. Takes big_n_structure() footnote_plan footnotes added table. Takes footnote_plan() page_plan pagination splits applied table. Takes page_plan() ... dots future extensions must empty.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table Format — tfrmt","text":"tfrmt object","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt.html","id":"nse-and-argument-evaluation","dir":"Reference","previous_headings":"","what":"NSE and Argument Evaluation","title":"Table Format — tfrmt","text":"tfrmt allows users pass vars, quo, unquoted expressions variety arguments, group, label, param, value, column, sorting_cols. Users accustomed tidyverse semantics familiar behaviour. However, important behaviour difference tfrmt normal tidyverse functions. data part tfrmt, know value passed intended unquoted expression representing column name object environment. , preferentially uses value environment preserving entry expression. example, object \"my_object\" environment value \"Hello world\", try create tfrmt tfrmt(column = my_object), take value \"my_object\" assuming column argument unquoted expression view entry column \"Hello World\". pass \"my_object\" tfrmt column name, use quotes around value: tfrmt(columnn = \"my_object\"). Additionally, unquoted expressions match tfrmt's argument names can cause unexpected results. recommended put quotes around value : tfrmt(label = \"group\"). case, quoting prevent tfrmt assigning group input value label value.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt.html","id":"images","dir":"Reference","previous_headings":"","what":"Images","title":"Table Format — tfrmt","text":"example outputs:","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table Format — tfrmt","text":"","code":"tfrmt_spec <- tfrmt(   label = label,   column = column,   param = param,   value=value)  tfrmt_spec <- tfrmt(   label = label,   column = column,   param = param,   value=value, # Set the formatting for values   body_plan = body_plan(     frmt_structure(       group_val = \".default\",       label_val = \".default\",       frmt_combine(\"{n} {pct}\",            n = frmt(\"xxx\"),            pct = frmt_when(                 \"==100\" ~ \"(100%)\",                 \"==0\" ~ \"\",                 TRUE ~ frmt(\"(xx.x %)\")                 )            )     )   ), # Specify column styling plan   col_style_plan = col_style_plan(     col_style_structure(col = vars(everything()), align = c(\".\",\",\",\" \"))   ))  tfrmt_spec <- tfrmt(   group = group,   label = label,   column = column,   param = param,   value=value,   sorting_cols = c(ord1, ord2),   # specify value formatting   body_plan = body_plan(     frmt_structure(       group_val = \".default\",       label_val = \".default\",       frmt_combine(\"{n} {pct}\",            n = frmt(\"xxx\"),            pct = frmt_when(                 \"==100\" ~ \"(100%)\",                 \"==0\" ~ \"\",                 TRUE ~ frmt(\"(xx.x %)\")                 )            )     ),     frmt_structure(         group_val = \".default\",         label_val = \"n\",         frmt(\"xxx\")    ),     frmt_structure(         group_val = \".default\",         label_val = c(\"Mean\", \"Median\", \"Min\",\"Max\"),         frmt(\"xxx.x\")      ),     frmt_structure(         group_val = \".default\",         label_val = \"SD\",         frmt(\"xxx.xx\")     ),     frmt_structure(         group_val = \".default\",         label_val = \".default\",         p = frmt(\"\")     ),     frmt_structure(         group_val = \".default\",         label_val = c(\"n\",\"<65 yrs\",\"<12 months\",\"<25\"),         p = frmt_when(             \">0.99\" ~ \">0.99\",             \"<0.001\" ~ \"<0.001\",             TRUE ~ frmt(\"x.xxx\", missing = \"\")         )     )   ),   # remove extra cols   col_plan = col_plan(-grp,                       -starts_with(\"ord\") ),   # Specify column styling plan   col_style_plan = col_style_plan(     col_style_structure(col = vars(everything()), align = c(\".\",\",\",\" \"))   ),    # Specify row group plan   row_grp_plan = row_grp_plan(     row_grp_structure(          group_val = \".default\",          element_block(post_space = \" \")     ),     label_loc = element_row_grp_loc(location = \"column\")   )  )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt_n_pct.html","id":null,"dir":"Reference","previous_headings":"","what":"N Percent Template — tfrmt_n_pct","title":"N Percent Template — tfrmt_n_pct","text":"function creates tfrmt n % table, count based table. parameter values n percent can provided (default assume n pct). Additionally frmt_when formatting percent can specified. default 100% 0% appear everything 99% 100% 0% 1% rounded using greater (>) less (<) signs respectively.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt_n_pct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"N Percent Template — tfrmt_n_pct","text":"","code":"tfrmt_n_pct(   n = \"n\",   pct = \"pct\",   pct_frmt_when = frmt_when(\"==100\" ~ frmt(\"\"), \">99\" ~ frmt(\"(>99%)\"), \"==0\" ~ \"\", \"<1\"     ~ frmt(\"(<1%)\"), \"TRUE\" ~ frmt(\"(xx.x%)\")),   tfrmt_obj = NULL )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt_n_pct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"N Percent Template — tfrmt_n_pct","text":"n name count (n) value parameter column pct name percent (pct) value parameter column pct_frmt_when formatting used percent values tfrmt_obj optional tfrmt object layer","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt_n_pct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"N Percent Template — tfrmt_n_pct","text":"tfrmt object","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt_n_pct.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"N Percent Template — tfrmt_n_pct","text":"","code":"print_mock_gt(tfrmt_n_pct())"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt_sigdig.html","id":null,"dir":"Reference","previous_headings":"","what":"Create tfrmt object from significant digits spec — tfrmt_sigdig","title":"Create tfrmt object from significant digits spec — tfrmt_sigdig","text":"function creates tfrmt based significant digits specifications group/label values. input data spec provided sigdig_df contain group/label value specifications. tfrmt_sigdig assumes columns group columns unless otherwise specified. user may optionally choose pass names group /label columns arguments function.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt_sigdig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create tfrmt object from significant digits spec — tfrmt_sigdig","text":"","code":"tfrmt_sigdig(   sigdig_df,   group = vars(),   label = quo(),   param_defaults = param_set(),   missing = NULL,   tfrmt_obj = NULL,   ... )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt_sigdig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create tfrmt object from significant digits spec — tfrmt_sigdig","text":"sigdig_df data frame containing significant digits formatting spec. 1 record per group/label value, columns relevant group /label variables, well numeric column sigdig containing significant digits rounding applied addition default. unique group/label values represented multiple rows, result one sigdig values carried implementation. group grouping vars input dataset label label column input dataset param_defaults Option override add default parameters. missing missing option included frmts tfrmt_obj optional tfrmt object layer ... dots future extensions must empty.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt_sigdig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create tfrmt object from significant digits spec — tfrmt_sigdig","text":"tfrmt object body_plan constructed based significant digits data spec param-level significant digits defaults.","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt_sigdig.html","id":"formats-covered","dir":"Reference","previous_headings":"","what":"Formats covered","title":"Create tfrmt object from significant digits spec — tfrmt_sigdig","text":"Currently covers specifications frmt frmt_combine. frmt_when supported must supplied additional tfrmt layered .","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt_sigdig.html","id":"group-label-variables","dir":"Reference","previous_headings":"","what":"Group/label variables","title":"Create tfrmt object from significant digits spec — tfrmt_sigdig","text":"group/label variables provided arguments, body_plan constructed input data following behaviour: group label supplied, assumed columns input data group columns. label variable provided, nothing specified group, leftover columns (.e. matching sigdig supplied label variable name) input data assumed group columns. group variable provided, leftover columns (.e. matching sigdig supplied group/label variable) disregarded.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt_sigdig.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create tfrmt object from significant digits spec — tfrmt_sigdig","text":"","code":"sig_input <- tibble::tribble(   ~group1,   ~group2, ~sigdig,   \"CHEMISTRY\",   \".default\", 3,   \"CHEMISTRY\",   \"ALBUMIN\",  1,   \"CHEMISTRY\",   \"CALCIUM\",   1,   \".default\",    \".default\",  2 )  # Subset data for the example data <- dplyr::filter(data_labs, group2 == \"BASOPHILS\", col1 %in% c(\"Placebo\", \"Xanomeline Low Dose\")) tfrmt_sigdig(sigdig_df = sig_input,              group = vars(group1, group2),              label = rowlbl,              param_defaults = param_set(\"[{n}]\" = NA)) %>%   tfrmt(column = vars(col1, col2),         param = param,         value = value,         sorting_cols = vars(ord1, ord2, ord3),         col_plan = col_plan(-starts_with(\"ord\"))) %>%   print_to_gt(.data = data)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt_to_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Print to JSON — tfrmt_to_json","title":"Print to JSON — tfrmt_to_json","text":"Print JSON","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt_to_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print to JSON — tfrmt_to_json","text":"","code":"tfrmt_to_json(tfrmt, path = NULL)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt_to_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print to JSON — tfrmt_to_json","text":"tfrmt tfrmt print path file path save JSON . provided JSON just print console","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt_to_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print to JSON — tfrmt_to_json","text":"JSON","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/tfrmt_to_json.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print to JSON — tfrmt_to_json","text":"","code":"tfrmt(   label = label,   column = column,   param = param,   value=value) %>%   tfrmt_to_json() #> { #>   \"group\": [], #>   \"label\": [\"label\"], #>   \"param\": [\"param\"], #>   \"value\": [\"value\"], #>   \"column\": [\"column\"] #> }"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/theme_element.html","id":null,"dir":"Reference","previous_headings":"","what":"Column Style Structure — col_style_structure","title":"Column Style Structure — col_style_structure","text":"Column Style Structure","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/theme_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Column Style Structure — col_style_structure","text":"","code":"col_style_structure(   col,   align = NULL,   type = c(\"char\", \"pos\"),   width = NULL,   ... )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/theme_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Column Style Structure — col_style_structure","text":"col Column value align column variable. May quoted unquoted column name, tidyselect semantic, span_structure. align Alignment applied column. Defaults left alignment. See details acceptable values. type Type alignment: \"char\" \"pos\", character alignment (default), positional alignment, respectively. Positional alignment allows aligning multiple positions column. width Width apply column number characters. Acceptable values include numeric value, character string number. ... dots future extensions must empty","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/theme_element.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Column Style Structure — col_style_structure","text":"col_style_structure object","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/theme_element.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Column Style Structure — col_style_structure","text":"Supports alignment width setting data value columns (values found column column). Row group label columns left-aligned default. Acceptable input values align differ type = \"char\" \"pos\":","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/theme_element.html","id":"character-alignment-type-char-","dir":"Reference","previous_headings":"","what":"Character alignment (type = \"char\"):","title":"Column Style Structure — col_style_structure","text":"\"left\" left alignment \"right\" right alignment\" supply vector character(s) align . one character provided, alignment based first occurrence characters. alignment based white space, leading white spaces ignored.","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/theme_element.html","id":"positional-alignment-type-pos-","dir":"Reference","previous_headings":"","what":"Positional alignment (type = \"pos\"):","title":"Column Style Structure — col_style_structure","text":"supply vector strings covering formatted cell values, numeric values represented x's. values can created manually obtained utilizing helper display_val_frmts(). Alignment positions represented vertical bars. example, starting values: c(\"12.3\", \"(5%)\", \"2.35 (10.23)\") can align first sets decimals parentheses providing align = c(\"xx|.x\", \"||(x%)\", \"x|.xx |\")","code":""},{"path":[]},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/theme_element.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Column Style Structure — col_style_structure","text":"","code":"plan <- col_style_plan(     col_style_structure(col = \"my_var\",                         align = c(\"xx| |(xx%)\",                                   \"xx|.x |(xx.x - xx.x)\"),                         type = \"pos\", width = 100),     col_style_structure(col = vars(four), align = \"right\", width = 200),     col_style_structure(col = vars(two, three), align = c(\".\", \",\", \" \")),     col_style_structure(col = c(two, three), width = 25),     col_style_structure(col = two, width = 25),     col_style_structure(col = span_structure(span = value, col = val2),                         width = 25)    )"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/update_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Remap group values in a tfrmt — update_group","title":"Remap group values in a tfrmt — update_group","text":"Remap group values tfrmt","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/update_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remap group values in a tfrmt — update_group","text":"","code":"update_group(tfrmt, ...)"},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/update_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remap group values in a tfrmt — update_group","text":"tfrmt tfrmt ... Use new_name = old_name rename selected variables","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/update_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remap group values in a tfrmt — update_group","text":"tfrmt group variables updated places tfrmt object updated groups#'","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/reference/update_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remap group values in a tfrmt — update_group","text":"","code":"tfrmt_spec <- tfrmt(     group = c(group1, group2),     body_plan  = body_plan(       frmt_structure(          group_val = list(group2 = \"value\"),          label_val = \".default\",          frmt(\"XXX\")          ),      frmt_structure(          group_val = list(group1 = \"value\", group2 = \"value\"),          label_val = \".default\",          frmt(\"XXX\")        )     ))  tfrmt_spec %>%   update_group(New_Group = group1) #> $group #> <list_of<quosure>> #>  #> [[1]] #> <quosure> #> expr: ^New_Group #> env:  0x55f92e8c8ab0 #>  #> [[2]] #> <quosure> #> expr: ^group2 #> env:  0x55f92e8cb7d0 #>  #>  #> $label #> <quosure> #> expr: ^ #> env:  empty #>  #> $param #> <quosure> #> expr: ^ #> env:  empty #>  #> $value #> <quosure> #> expr: ^ #> env:  empty #>  #> $column #> <list_of<quosure>> #>  #> named list() #>  #> $body_plan #> [[1]] #> Format Structure #>   Group Values: `group2` - \"value\" #>   Label Values: \".default\" #>   Format: < frmt | Expression: `XXX` > #>  #> [[2]] #> Format Structure #>   Group Values: `New_Group` - \"value\"; `group2` - \"value\" #>   Label Values: \".default\" #>   Format: < frmt | Expression: `XXX` > #>  #> attr(,\"class\") #> [1] \"body_plan\"  \"frmt_table\" #>  #> attr(,\"class\") #> [1] \"tfrmt\""},{"path":"https://gsk-biostatistics.github.io/tfrmt/news/index.html","id":"tfrmt-003","dir":"Changelog","previous_headings":"","what":"tfrmt 0.0.3","title":"tfrmt 0.0.3","text":"CRAN release: 2023-06-22 Fixed bugs JSON read/write Added transformation capabilities frmt()","code":""},{"path":"https://gsk-biostatistics.github.io/tfrmt/news/index.html","id":"tfrmt-002","dir":"Changelog","previous_headings":"","what":"tfrmt 0.0.2","title":"tfrmt 0.0.2","text":"CRAN release: 2023-02-13 Added NEWS.md file track changes package. Added functionality read/write tfrmts JSON files Updates made work newest version dplyr","code":""}]
